<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Western Devs</title>
  
  <link href="/feeds/dave_paquette" rel="self" type="application/atom+xml"/>
  <link href="http://www.westerndevs.com" rel="alternate" type="application/atom+xml"/>
  
  <updated>2018-04-12T23:57:35.282Z</updated>
  <id>http://www.westerndevs.com/</id>
  
  <author>
    <name>Western Devs</name>
	<uri>http://www.westerndevs.com</uri>
    <email>info@westerndevs.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title type="html">Loading Related Entities with Dapper Many-to-One - Part 2</title>
    <link href="http://www.westerndevs.com/Dapper/loading-related-entities-many-to-one-part-2/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Dapper/loading-related-entities-many-to-one-part-2/</id>
    <published>2018-04-10T22:04:42.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This is a part of a series of blog posts on data access with Dapper. To see the full list of posts, visit the <a href="https://www.davepaquette.com/archive/2018/01/21/exploring-dapper-series.aspx" target="_blank" rel="noopener">Dapper Series Index Page</a>.</p><p>In today's post, we look at another option for how to load Many-to-One relationships. In the last post, we used a technique called Multi-Mapping to load related Many-to-One entities. In that post, I had a theory that maybe this approach was not the most efficient method for loading related entities because it duplicated a lot of data.</p><p><img src="https://www.davepaquette.com/images/dapper/flight_to_airport_many_to_one.png" alt="Many-to-One"></p><p>To recap, we would like to load a list of <code>ScheduledFlight</code> entities. A <code>ScheduleFlight</code> has a departure <code>Airport</code> and an arrival <code>Airport</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ScheduledFlight</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FlightNumber &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Airport DepartureAirport &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> DepartureHour &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> DepartureMinute &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Airport ArrivalAirport &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ArrivalHour &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ArrivalMinute &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//Other properties omitted for brevity </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Airport</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Code &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> City &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ProvinceState &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Country &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <h2>Using Multiple Result Sets</h2><p>In the previous post, we loaded the <code>ScheduledFlight</code> entities and all related <code>Airport</code> entities in a single query. In this example we will use 2 separate queries: One for the <code>ScheduledFlight</code> entities, one for the related arrival and departure <code>Airport</code> entities. These 2 queries will all be executed as a single sql command that returns multiple result sets.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.Id, s.FlightNumber, s.DepartureHour, s.DepartureMinute, s.ArrivalHour, s.ArrivalMinute, s.IsSundayFlight, s.IsMondayFlight, s.IsTuesdayFlight, s.IsWednesdayFlight, s.IsThursdayFlight, s.IsFridayFlight, s.IsSaturdayFlight,</span><br><span class="line">s.DepartureAirportId, s.ArrivalAirportId</span><br><span class="line"><span class="keyword">FROM</span> ScheduledFlight s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Airport a1</span><br><span class="line"><span class="keyword">ON</span> s.DepartureAirportId = a1.Id</span><br><span class="line">    <span class="keyword">WHERE</span> a1.Code = @FromCode</span><br><span class="line">    </span><br><span class="line"><span class="keyword">SELECT</span> a1.Id, a1.Code, a1.City, a1.ProvinceState, a1.Country</span><br><span class="line"><span class="keyword">FROM</span> Airport a1</span><br><span class="line"><span class="keyword">WHERE</span> a1.Code = @FromCode</span><br><span class="line"><span class="keyword">UNION</span>    </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> a2.Id, a2.Code, a2.City, a2.ProvinceState, a2.Country</span><br><span class="line"><span class="keyword">FROM</span> ScheduledFlight s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Airport a1</span><br><span class="line"><span class="keyword">ON</span> s.DepartureAirportId = a1.Id</span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Airport a2</span><br><span class="line"><span class="keyword">ON</span> s.ArrivalAirportId = a2.Id</span><br><span class="line">    <span class="keyword">WHERE</span> a1.Code = @FromCode</span><br></pre></td></tr></table></figure>  <p>Using Dapper's <code>QueryMultipleAsync</code> method, we pass in 2 arguments: the query and the parameters for the query.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;ScheduledFlight&gt;&gt; GetAlt(<span class="keyword">string</span> <span class="keyword">from</span>)</span><br><span class="line">&#123;</span><br><span class="line">  IEnumerable&lt;ScheduledFlight&gt; scheduledFlights;</span><br><span class="line">  <span class="keyword">using</span> (<span class="keyword">var</span> connection = <span class="keyword">new</span> SqlConnection(_connectionString))</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">await</span> connection.OpenAsync();</span><br><span class="line">  <span class="keyword">var</span> query = <span class="string">@"</span></span><br><span class="line"><span class="string">SELECT s.Id, s.FlightNumber, s.DepartureHour, s.DepartureMinute, s.ArrivalHour, s.ArrivalMinute, s.IsSundayFlight, s.IsMondayFlight, s.IsTuesdayFlight, s.IsWednesdayFlight, s.IsThursdayFlight, s.IsFridayFlight, s.IsSaturdayFlight,</span></span><br><span class="line"><span class="string">s.DepartureAirportId, s.ArrivalAirportId</span></span><br><span class="line"><span class="string">FROM ScheduledFlight s</span></span><br><span class="line"><span class="string">INNER JOIN Airport a1</span></span><br><span class="line"><span class="string">ON s.DepartureAirportId = a1.Id</span></span><br><span class="line"><span class="string">    WHERE a1.Code = @FromCode</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">SELECT a1.Id, a1.Code, a1.City, a1.ProvinceState, a1.Country</span></span><br><span class="line"><span class="string">FROM Airport a1</span></span><br><span class="line"><span class="string">WHERE a1.Code = @FromCode</span></span><br><span class="line"><span class="string">UNION    </span></span><br><span class="line"><span class="string">SELECT DISTINCT a2.Id, a2.Code, a2.City, a2.ProvinceState, a2.Country</span></span><br><span class="line"><span class="string">FROM ScheduledFlight s</span></span><br><span class="line"><span class="string">INNER JOIN Airport a1</span></span><br><span class="line"><span class="string">ON s.DepartureAirportId = a1.Id</span></span><br><span class="line"><span class="string">    INNER JOIN Airport a2</span></span><br><span class="line"><span class="string">ON s.ArrivalAirportId = a2.Id</span></span><br><span class="line"><span class="string">    WHERE a1.Code = @FromCode"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> multi = <span class="keyword">await</span> connection.QueryMultipleAsync(query, <span class="keyword">new</span>&#123;FromCode = <span class="keyword">from</span>&#125; ))</span><br><span class="line">    &#123;</span><br><span class="line">        scheduledFlights = multi.Read&lt;ScheduledFlight&gt;();</span><br><span class="line">        <span class="keyword">var</span> airports = multi.Read&lt;Airport&gt;().ToDictionary(a =&gt; a.Id);</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> flight <span class="keyword">in</span> scheduledFlights)</span><br><span class="line">        &#123;</span><br><span class="line">            flight.ArrivalAirport = airports[flight.ArrivalAirportId];</span><br><span class="line">            flight.DepartureAirport = airports[flight.DepartureAirportId];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> scheduledFlights;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>The <code>QueryMultipleAsync</code> method returns a <code>GridReader</code>. The <code>GridReader</code> makes it very easy to map mutliple result sets to different objects using the <code>Read&lt;T&gt;</code> method. When you call the <code>Read&lt;T&gt;</code> method, it will read all the results from the next result set that was returned by the query. In our case, we call <code>Read&lt;ScheduledFlight&gt;</code> to read the first result set and map the results into a collection of <code>ScheduledFlight</code> entities. Next, we call <code>Read&lt;Airport&gt;</code> to read the second result set. We then call <code>ToDictionary(a =&gt; a.Id)</code> to populate those <code>Airport</code> entities into a dictionary. This is to make it easier to read the results when setting the <code>ArrivalAirport</code> and <code>DepartureAirport</code> properties for each <code>ScheduledFlight</code>.</p><p>Finally, we iterate through the scheduled flights and set the <code>ArrivalAirport</code> and <code>DepartureAirport</code> properties to the correct <code>Airport</code> entity.</p><p>The big difference between this approach and the previous approach is that we no longer have duplicate instances for <code>Airport</code> entities. For example, if the query returned 100 scheduled flights departing from Calgary (YYC), there would be a single instance of the <code>Airport</code> entity representing YYC, whereas the previous approach would have resulted in 100 separate instances of the <code>Airport</code> entity.</p><p>There is also less raw data returned by the query itself since the columns from the <code>Airport</code> table are not repeated in each row from the <code>ScheduleFlight</code> table.</p><h2>Comparing Performance</h2><p>I had a theory that the multi-mapping approach outlined in the previous blog post would be less efficient than the multiple result set approach outlined in this blog post, at least from a memory usage perspective. However, a theory is just theory until it is tested. I was curious and also wanted to make sure I wasn't misleading anyone so I decided to test things out using <a href="http://benchmarkdotnet.org/" target="_blank" rel="noopener">Benchmark.NET</a>. Using Benchmark.NET, I compared both methods using different sizes of data sets.</p><p>I won't get into the details of Benchmark.NET. If you want to dig into it in more detail, visit the <a href="http://benchmarkdotnet.org/" target="_blank" rel="noopener">official site</a> and read through the docs. For the purposes of this blog post, the following legend should suffice:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Mean      : <span class="type">Arithmetic</span> mean <span class="keyword">of</span> <span class="keyword">all</span> measurements</span><br><span class="line">Error     : <span class="type">Half</span> <span class="keyword">of</span> <span class="number">99.9</span>% confidence interval</span><br><span class="line">StdDev    : <span class="type">Standard</span> deviation <span class="keyword">of</span> <span class="keyword">all</span> measurements</span><br><span class="line">Gen <span class="number">0</span>     : <span class="type">GC</span> Generation <span class="number">0</span> collects per <span class="number">1</span>k Operations</span><br><span class="line">Gen <span class="number">1</span>     : <span class="type">GC</span> Generation <span class="number">1</span> collects per <span class="number">1</span>k Operations</span><br><span class="line">Gen <span class="number">2</span>     : <span class="type">GC</span> Generation <span class="number">2</span> collects per <span class="number">1</span>k Operations</span><br><span class="line">Allocated : <span class="type">Allocated</span> memory per single operation (managed only, inclusive, <span class="number">1</span>KB = <span class="number">1024</span>B)</span><br></pre></td></tr></table></figure><h3>10 ScheduledFlight records</h3><table><thead><tr><th>Method</th><th style="text-align:right">Mean</th><th style="text-align:right">Error</th><th style="text-align:right">StdDev</th><th style="text-align:right">Gen 0</th><th style="text-align:right">Allocated</th></tr></thead><tbody><tr><td>MultiMapping</td><td style="text-align:right">396.9 us</td><td style="text-align:right">7.392 us</td><td style="text-align:right">7.260 us</td><td style="text-align:right">5.8594</td><td style="text-align:right">6.77 KB</td></tr><tr><td>MultipleResultSets</td><td style="text-align:right">467.6 us</td><td style="text-align:right">9.194 us</td><td style="text-align:right">16.811 us</td><td style="text-align:right">4.8828</td><td style="text-align:right">6.69 KB</td></tr></tbody></table><p>As I suspected, the difference is minimal when dealing with small result sets. The results here are in microseconds so in both cases, executing the query and mapping the results takes less 1/2 a millisecond. The mutliple result sets approach takes a little longer, which I kind of expected because of the overhead of creating a dictionary and doing lookups into that dictionary when setting the <code>ArrivalAirport</code> and <code>DepartureAirport</code> properties. The difference is minimal and in a most real world scenarios, this won't be noticable. What is interesting is that even with this small amount of data, we can see that there is ~1 more Gen 0 garbage collection happening per 1,000 operations. I suspect we will see this creep up as the amount of data increases.</p><h3>100 ScheduledFlight records</h3><table><thead><tr><th>Method</th><th style="text-align:right">Mean</th><th style="text-align:right">Error</th><th style="text-align:right">StdDev</th><th style="text-align:right">Gen 0</th><th style="text-align:right">Gen 1</th><th style="text-align:right">Allocated</th></tr></thead><tbody><tr><td>MultiMapping</td><td style="text-align:right">1.013 ms</td><td style="text-align:right">0.0200 ms</td><td style="text-align:right">0.0287 ms</td><td style="text-align:right">25.3906</td><td style="text-align:right">5.8594</td><td style="text-align:right">6.77 KB</td></tr><tr><td>MultipleResultSets</td><td style="text-align:right">1.114 ms</td><td style="text-align:right">0.0220 ms</td><td style="text-align:right">0.0225 ms</td><td style="text-align:right">15.6250</td><td style="text-align:right">-</td><td style="text-align:right">6.69 KB</td></tr></tbody></table><p>Okay, this surprised me a little. I expected to see a bigger different between the two but they are still, essentially the same in terms of time. The multi-mapping approach is still slightly faster. Keep in mind that both are still just a little over 1ms to query and map 100 records. That's crazy fast!</p><h3>1000 ScheduledFlight records</h3><table><thead><tr><th>Method</th><th style="text-align:right">Mean</th><th style="text-align:right">Error</th><th style="text-align:right">StdDev</th><th style="text-align:right">Gen 0</th><th style="text-align:right">Gen 1</th><th style="text-align:right">Allocated</th></tr></thead><tbody><tr><td>MultiMapping</td><td style="text-align:right">5.137 ms</td><td style="text-align:right">0.1006 ms</td><td style="text-align:right">0.1443 ms</td><td style="text-align:right">148.4375</td><td style="text-align:right">70.3125</td><td style="text-align:right">6.77 KB</td></tr><tr><td>MultipleResultSets</td><td style="text-align:right">3.459 ms</td><td style="text-align:right">0.0408 ms</td><td style="text-align:right">0.0341 ms</td><td style="text-align:right">113.2813</td><td style="text-align:right">27.3438</td><td style="text-align:right">6.69 KB</td></tr></tbody></table><p>Here we go. Now the multiple result sets approach finally wins out, and you can see why. There are way more Gen 0 and Gen 1 garbage collections happening per 1,000 operations when using the multi-mapping approach.</p><h3>10,000 ScheduledFlight records</h3><table><thead><tr><th>Method</th><th style="text-align:right">Mean</th><th style="text-align:right">Error</th><th style="text-align:right">StdDev</th><th style="text-align:right">Gen 0</th><th style="text-align:right">Gen 1</th><th style="text-align:right">Gen 2</th><th style="text-align:right">Allocated</th></tr></thead><tbody><tr><td>MultiMapping</td><td style="text-align:right">58.51 ms</td><td style="text-align:right">1.1483 ms</td><td style="text-align:right">1.276 ms</td><td style="text-align:right">1687.5000</td><td style="text-align:right">687.5000</td><td style="text-align:right">187.5000</td><td style="text-align:right">6.78 KB</td></tr><tr><td>MultipleResultSets</td><td style="text-align:right">38.23 ms</td><td style="text-align:right">0.8821 ms</td><td style="text-align:right">1.918 ms</td><td style="text-align:right">812.5000</td><td style="text-align:right">312.5000</td><td style="text-align:right">125.0000</td><td style="text-align:right">6.69 KB</td></tr></tbody></table><p>One last test with 10,000 records shows a more substantial difference. The multiple result sets approach is a full 20ms faster!</p><h2>Wrapping it up</h2><p>I think that in most realistic scenarios, there is no discernable difference between the 2 approaches to loading many-to-one related entities. If you loading larger amounts of records into memory in a single query, then the multiple result sets approach will likely give you better performance. If you are dealing with &lt; 100 records per query, then you likely won't notice a difference. Keep in mind also that your results will vary depending on the specific data you are loading.</p>]]></content>
    
    <summary type="html">
    
      This is a part of a series of blog posts on data access with Dapper. In today&#39;s post, we look at a second option for loading Many-to-One related entities.
    
    </summary>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/categories/Dapper/"/>
    
    
      <category term=".NET Core" scheme="http://www.westerndevs.com/tags/NET-Core/"/>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/tags/Dapper/"/>
    
      <category term=".NET" scheme="http://www.westerndevs.com/tags/NET/"/>
    
      <category term="Micro ORM" scheme="http://www.westerndevs.com/tags/Micro-ORM/"/>
    
  </entry>
  
  <entry>
    <title type="html">Loading Related Entities: Many-to-One</title>
    <link href="http://www.westerndevs.com/Dapper/loading-related-entities-many-to-one/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Dapper/loading-related-entities-many-to-one/</id>
    <published>2018-02-07T05:00:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This is a part of a series of blog posts on data access with Dapper. To see the full list of posts, visit the <a href="https://www.davepaquette.com/archive/2018/01/21/exploring-dapper-series.aspx" target="_blank" rel="noopener">Dapper Series Index Page</a>.</p><p>In today's post, we will start our journey into more complex query scenarios by exploring how to load related entities. There are a few different scenarios to cover here. In this post we will be covering the Many-to-One scenario.</p><p><img src="https://www.davepaquette.com/images/dapper/flight_to_airport_many_to_one.png" alt="Many-to-One"></p><p>Continuing with our sample domain for the ever expanding <em>Air Paquette</em> airline, we will now look at loading a list of <code>ScheduledFlight</code> entities. A <code>ScheduleFlight</code> has a departure <code>Airport</code> and an arrival <code>Airport</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ScheduledFlight</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FlightNumber &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Airport DepartureAirport &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> DepartureHour &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> DepartureMinute &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Airport ArrivalAirport &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ArrivalHour &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ArrivalMinute &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//Other properties omitted for brevity </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Airport</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Code &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> City &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ProvinceState &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Country &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p><em>Side Note:</em> Let's ignore my poor representation of the arrival and departure times of the scheduled flights. In a future most we might look using Noda Time to properly represent these values.</p><h2>Loading everything in a single query</h2><p>Using Dapper, we can easily load a list of <code>ScheduledFlight</code> using a single query. First, we need to craft a query that returns all the columns for a <code>ScheduledFlight</code>, the departure <code>Airport</code> and the arrival <code>Airport</code> in a single row.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.Id, s.FlightNumber, s.DepartureHour, s.DepartureMinute, s.ArrivalHour, s.ArrivalMinute, s.IsSundayFlight, s.IsMondayFlight, s.IsTuesdayFlight, s.IsWednesdayFlight, s.IsThursdayFlight, s.IsFridayFlight, s.IsSaturdayFlight,</span><br><span class="line">       a1.Id, a1.Code, a1.City, a1.ProvinceState, a1.Country,</span><br><span class="line">   a2.Id, a2.Code, a2.City, a2.ProvinceState, a2.Country</span><br><span class="line"><span class="keyword">FROM</span> ScheduledFlight s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Airport a1</span><br><span class="line"><span class="keyword">ON</span> s.DepartureAirportId = a1.Id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Airport a2</span><br><span class="line"><span class="keyword">ON</span> s.ArrivalAirportId = a2.Id</span><br></pre></td></tr></table></figure><p>We use the <code>QueryAsync</code> method to load a list of <code>ScheduledFlight</code> entities along with their related <code>DepartureAirport</code> and <code>ArrivalAirport</code> entities. The parameters we pass in are a little different from what we saw in our previous posts.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;ScheduledFlight&gt;&gt; Get(<span class="keyword">string</span> <span class="keyword">from</span>)</span><br><span class="line">&#123;</span><br><span class="line">    IEnumerable&lt;ScheduledFlight&gt; scheduledFlights;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> connection = <span class="keyword">new</span> SqlConnection(_connectionString))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> connection.OpenAsync();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> query = <span class="string">@"</span></span><br><span class="line"><span class="string">SELECT s.Id, s.FlightNumber, s.DepartureHour, s.DepartureMinute, s.ArrivalHour, s.ArrivalMinute, s.IsSundayFlight, s.IsMondayFlight, s.IsTuesdayFlight, s.IsWednesdayFlight, s.IsThursdayFlight, s.IsFridayFlight, s.IsSaturdayFlight,</span></span><br><span class="line"><span class="string">     a1.Id, a1.Code, a1.City, a1.ProvinceState, a1.Country,</span></span><br><span class="line"><span class="string">     a2.Id, a2.Code, a2.City, a2.ProvinceState, a2.Country</span></span><br><span class="line"><span class="string">FROM ScheduledFlight s</span></span><br><span class="line"><span class="string">     INNER JOIN Airport a1</span></span><br><span class="line"><span class="string">          ON s.DepartureAirportId = a1.Id</span></span><br><span class="line"><span class="string">    INNER JOIN Airport a2</span></span><br><span class="line"><span class="string">          ON s.ArrivalAirportId = a2.Id</span></span><br><span class="line"><span class="string">WHERE a1.Code = @FromCode"</span>;</span><br><span class="line"></span><br><span class="line">        scheduledFlights = </span><br><span class="line">            <span class="keyword">await</span> connection.QueryAsync&lt;ScheduledFlight, Airport, Airport, ScheduledFlight&gt;(query,</span><br><span class="line">                    (flight, departure, arrival ) =&gt; &#123;</span><br><span class="line">                        flight.DepartureAirport = departure;</span><br><span class="line">                        flight.ArrivalAirport = arrival;</span><br><span class="line">                        <span class="keyword">return</span> flight;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="keyword">new</span>&#123;FromCode = <span class="keyword">from</span>&#125; );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> scheduledFlights;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>First, instead of a single type parameter <code>&lt;ScheduledFlight&gt;</code>, we need to provide a series of type parameters: <code>&lt;ScheduledFlight, Airport, Airport, ScheduledFlight&gt;</code>. The first 3 parameters specify the types that are contained in each row that the query returns. In this example, each row contains columns that will be mapped to <code>ScheduledFlight</code> and 2 <code>Airports</code>. The order matters here, and Dapper assumes that when it seems a column named <code>Id</code> then it is looking at columns for the next entity type. In the example below, the columns from <code>Id</code> to <code>IsSaturdayFlight</code> are mapped to a <code>ScheduledFlight</code> entity. The next 5 columns <code>Id, Code, City, ProvinceState, Country</code> are mapped to an <code>Airport</code> entity, and the last 5 columns are mapped to a second <code>Airport</code> entity. If you aren't using <code>Id</code>, you can use the optional <code>splitOn</code> argument to specify the column names that Dapper should use to identity the start of each entity type.</p><p>What's that last type parameter? Why do we need to specify <code>ScheduledFlight</code> again? Well, I'm glad you asked. The thing about Dapper is that it doesn't actually know much about the structure of our entities so we need to tell it how to wire up the 3 entities that it just mapped from a row. That last <code>ScheduledFlight</code> type parameter is telling Dapper that <code>ScheduledFlight</code> is ultimately the entity we want to return from this query. It is important for the second argument that is passed to the <code>QueryAsync</code> method.</p><p>That second argument is a function that takes in the 3 entities that were mapped back from that row and returns and entity of the type that was specified as the last type parameter. In this case, we assign the first <code>Airport</code> to the flight's <code>DepartureAirport</code> property and assign the second <code>Airport</code> to the flight's <code>ArrivalAiport</code> parameter, then we return the flight that was passed in.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(flight, departure, arrival ) =&gt; &#123;</span><br><span class="line">    flight.DepartureAirport = departure;</span><br><span class="line">    flight.ArrivalAirport = arrival;</span><br><span class="line">    <span class="keyword">return</span> flight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The first argument argument passed to the <code>QueryAsync</code> method is the SQL query, and the third argument is an anonymous object containing any parameters for that query. Those arguments are really no different than the simple examples we saw in <a href="https://www.davepaquette.com/archive/2018/01/22/loading-an-object-graph-with-dapper.aspx" target="_blank" rel="noopener">previous blog posts</a>.</p><h2>Wrapping it up</h2><p>Dapper refers to this technique as <a href="https://github.com/StackExchange/Dapper#multi-mapping" target="_blank" rel="noopener">Multi Mapping</a>. I think it's called that because we are mapping multiple entities from each row that the query returns. In a fully featured ORM like Entity Framework, we call this feature Eager Loading. It is an optimization technique that avoids the need for multiple queries in order to load an entity and it's associated entities.</p><p>This approach is simple enough to use and it does reduce the number of round trips needed to load a set of entities. It does, however, come at a cost. Specifically, the results of the query end up causing some duplication of data. As you can see below, the data for the Calgary and Vancouver airports is repeated in each row.</p><p><img src="https://www.davepaquette.com/images/dapper/multi_mapping_data_duplication.png" alt="Data Duplication"></p><p>This isn't a huge problem if the result set only contains 3 rows but it can become problematic when dealing with large result sets. In addition to creating somewhat bloated result sets, Dapper will also create new instances of those related entities for each row in the result set. In the example above, we would end up with 3 instances of the <code>Airport</code> class representing YYC - Calgary and 3 instances of the <code>Airport</code> class representing YVR - Vancouver. Again, this isn't necessarily a big problem when we have 3 rows in the result set but with larger result sets it could cause your application to use a lot more memory than necessary.</p><p>It is worth considering the cost associated with this approach. Given the added memory cost, this approach might be better suited to One-to-One associations rather than the Many-to-One example we talked about in this post. In the next post, we will explore an alternate approach that is more memory efficient but probably a little more costly on the CPU for the mapping.</p>]]></content>
    
    <summary type="html">
    
      This is a part of a series of blog posts on data access with Dapper. In today&#39;s post, we will start our journey into more complex query scenarios by exploring how to load related entities. There are a few different scenarios to cover here. In this post we will be covering the Many-to-One scenario.
    
    </summary>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/categories/Dapper/"/>
    
    
      <category term=".NET Core" scheme="http://www.westerndevs.com/tags/NET-Core/"/>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/tags/Dapper/"/>
    
      <category term=".NET" scheme="http://www.westerndevs.com/tags/NET/"/>
    
      <category term="Micro ORM" scheme="http://www.westerndevs.com/tags/Micro-ORM/"/>
    
  </entry>
  
  <entry>
    <title type="html">Using Stored Procedures to Load Data with Dapper</title>
    <link href="http://www.westerndevs.com/Dapper/using-stored-procedures-to-load-data-with-dapper/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Dapper/using-stored-procedures-to-load-data-with-dapper/</id>
    <published>2018-01-29T01:00:01.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This is a part of a series of blog posts on data access with Dapper. To see the full list of posts, visit the <a href="https://www.davepaquette.com/archive/2018/01/21/exploring-dapper-series.aspx" target="_blank" rel="noopener">Dapper Series Index Page</a>.</p><p>Let's just get this one out of the way early. Stored procedures are not my favorite way to get data from SQL Server but there was a time when they were extremely popular. They are still heavily used today and so this series would not be complete without covering how to use stored procedures with Dapper.</p><h2>A Simple Example</h2><p>Let's imagine a simple stored procedure that allows us to query for <code>Aircraft</code> by model.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> GetAircraftByModel @<span class="keyword">Model</span> <span class="keyword">NVARCHAR</span>(<span class="number">255</span>) <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">       <span class="keyword">Id</span></span><br><span class="line">      ,Manufacturer</span><br><span class="line">      ,<span class="keyword">Model</span></span><br><span class="line">      ,RegistrationNumber</span><br><span class="line">      ,FirstClassCapacity</span><br><span class="line">      ,RegularClassCapacity</span><br><span class="line">      ,CrewCapacity</span><br><span class="line">      ,ManufactureDate</span><br><span class="line">      ,NumberOfEngines</span><br><span class="line">      ,EmptyWeight</span><br><span class="line">      ,MaxTakeoffWeight</span><br><span class="line">    <span class="keyword">FROM</span> Aircraft a</span><br><span class="line">    <span class="keyword">WHERE</span> a.Model = @<span class="keyword">Model</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>To execute this stored procedure and map the results to a collection of <code>Aircraft</code> objects, use the <code>QueryAsync</code> method almost exactly like we did in the <a href="https://www.davepaquette.com/archive/2018/01/22/loading-an-object-graph-with-dapper.aspx" target="_blank" rel="noopener">last post</a>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GET api/aircraft</span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;Aircraft&gt;&gt; Get(<span class="keyword">string</span> model)</span><br><span class="line">&#123;</span><br><span class="line">    IEnumerable&lt;Aircraft&gt; aircraft;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> connection = <span class="keyword">new</span> SqlConnection(_connectionString))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> connection.OpenAsync();</span><br><span class="line"></span><br><span class="line">        aircraft = <span class="keyword">await</span> connection.QueryAsync&lt;Aircraft&gt;(<span class="string">"GetAircraftByModel"</span>,</span><br><span class="line">                        <span class="keyword">new</span> &#123;Model = model&#125;, </span><br><span class="line">                        commandType: CommandType.StoredProcedure);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> aircraft;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Instead of passing in the raw SQL statement, we simply pass in the name of the stored procedure. We also pass in an object that has properties for each of the stored procedures arguments, in this case <code>new {Model = model}</code> maps the <code>model</code> variable to the stored procedure's <code>@Model</code> argument. Finally, we specify the <code>commandType</code> as <code>CommandType.StoredProcedure</code>.</p><h2>Wrapping it up</h2><p>That's all there is to using stored procedures with Dapper. As much as I dislike using stored procedures in my applications, I often do have to call stored procedures to fetch data from legacy databases. When that situation comes up, Dapper is my tool of choice.</p><p>Stay tuned for the next installment in this Dapper series. Comment below if there is a specific topic you would like covered.</p>]]></content>
    
    <summary type="html">
    
      Let&#39;s just get this one out of the way early. Stored procedures are not my favorite way to get data from SQL Server but there was a time when they were extremely popular. They are still heavily used today and so this series would not be complete without covering how to use stored procedures with Dapper.
    
    </summary>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/categories/Dapper/"/>
    
    
      <category term=".NET Core" scheme="http://www.westerndevs.com/tags/NET-Core/"/>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/tags/Dapper/"/>
    
      <category term=".NET" scheme="http://www.westerndevs.com/tags/NET/"/>
    
      <category term="Micro ORM" scheme="http://www.westerndevs.com/tags/Micro-ORM/"/>
    
  </entry>
  
  <entry>
    <title type="html">Loading an Object From SQL Server Using Dapper</title>
    <link href="http://www.westerndevs.com/Dapper/loading-an-object-graph-with-dapper/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Dapper/loading-an-object-graph-with-dapper/</id>
    <published>2018-01-23T02:30:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I was recently asked to create a read-only web API to expose some parts of a system's data model to third party developers. While <a href="https://docs.microsoft.com/en-us/ef/" target="_blank" rel="noopener">Entity Framework</a> is often my go-to tool for data access, I thought this was a good scenario to use Dapper instead. This series of blog posts explores dapper and how you might use it in your application. To see the full list of posts, visit the <a href="https://www.davepaquette.com/archive/2018/01/21/exploring-dapper-series.aspx" target="_blank" rel="noopener">Dapper Series Index Page</a>.</p><p>Today, we will start with the basics of loading a mapping and database table to a C# class.</p><h1>What is Dapper?</h1><p><a href="https://github.com/StackExchange/Dapper" target="_blank" rel="noopener">Dapper</a> calls itself a simple object mapper for .NET and is usually lumped into the category of micro ORM (Object Relational Mapper). When compared to a fully featured ORM like Entity Framework, Dapper lacks certain features like change-tracking, lazy loading and the ability to translate complex LINQ expressions to SQL queries. The fact that Dapper is missing these features is probably the single best thing about Dapper. While it might seem like you're giving up a lot, you are also gaining a lot by dropping those types of features. Dapper is fast since it doesn't do a lot of the magic that Entity Framework does under the covers. Since there is less magic, Dapper is also a lot easier to understand which can lead to lower maintenance costs and maybe even fewer bugs.</p><h1>How does it work?</h1><p>Throughout this series we will build on an example domain for an airline. All airlines need to manage a fleet of aircraft, so let's start there. Imagine a database with a table named <code>Aircraft</code> and a C# class with property names that match the column names of the <code>Aircraft</code> table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Aircraft</span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">Id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">CONSTRAINT</span> pk_Aircraft_Id PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">        Manufacturer <span class="keyword">nvarchar</span>(<span class="number">255</span>),</span><br><span class="line">        <span class="keyword">Model</span> <span class="keyword">nvarchar</span>(<span class="number">255</span>),</span><br><span class="line">        RegistrationNumber <span class="keyword">nvarchar</span>(<span class="number">50</span>),</span><br><span class="line">        FirstClassCapacity <span class="built_in">int</span>,</span><br><span class="line">        RegularClassCapacity <span class="built_in">int</span>,</span><br><span class="line">        CrewCapacity <span class="built_in">int</span>,</span><br><span class="line">        ManufactureDate <span class="built_in">date</span>,</span><br><span class="line">        NumberOfEngines <span class="built_in">int</span>,</span><br><span class="line">        EmptyWeight <span class="built_in">int</span>,</span><br><span class="line">        MaxTakeoffWeight <span class="built_in">int</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Aircraft</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Manufacturer &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Model &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> RegistrationNumber &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> FirstClassCapacity &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> RegularClassCapacity &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> CrewCapacity &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime ManufactureDate &#123;<span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> NumberOfEngines &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> EmptyWeight &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> MaxTakeoffWeight &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>Installing Dapper</h2><p>Dapper is available as a <a href="https://www.nuget.org/packages/Dapper/" target="_blank" rel="noopener">Nuget package</a>. To use Dapper, all you need to do is add the <code>Dapper</code> package to your project.</p><p><strong>.NET Core CLI</strong>: <code>dotnet add package Dapper</code></p><p><strong>Package Manager Console</strong>: <code>Install-Package Dapper</code></p><h2>Querying a single object</h2><p>Dapper provides a set of extension methods for .NET's <code>IDbConnection</code> interface. For our first task, we want to execute a query to return the data for a single row from the <code>Aircraft</code> table and place the results in an instance of the <code>Aircraft</code> class. This is easily accomplished using Dapper's <code>QuerySingleAsync</code> method.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet(<span class="meta-string">"&#123;id&#125;"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;Aircraft&gt; <span class="title">Get</span>(<span class="params"><span class="keyword">int</span> id</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Aircraft aircraft;</span><br><span class="line">  <span class="keyword">using</span> (<span class="keyword">var</span> connection = <span class="keyword">new</span> SqlConnection(_connectionString))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">await</span> connection.OpenAsync();</span><br><span class="line">    <span class="keyword">var</span> query = <span class="string">@"</span></span><br><span class="line"><span class="string">SELECT </span></span><br><span class="line"><span class="string">       Id</span></span><br><span class="line"><span class="string">      ,Manufacturer</span></span><br><span class="line"><span class="string">      ,Model</span></span><br><span class="line"><span class="string">      ,RegistrationNumber</span></span><br><span class="line"><span class="string">      ,FirstClassCapacity</span></span><br><span class="line"><span class="string">      ,RegularClassCapacity</span></span><br><span class="line"><span class="string">      ,CrewCapacity</span></span><br><span class="line"><span class="string">      ,ManufactureDate</span></span><br><span class="line"><span class="string">      ,NumberOfEngines</span></span><br><span class="line"><span class="string">      ,EmptyWeight</span></span><br><span class="line"><span class="string">      ,MaxTakeoffWeight</span></span><br><span class="line"><span class="string">  FROM Aircraft WHERE Id = @Id"</span>;</span><br><span class="line"></span><br><span class="line">    aircraft = <span class="keyword">await</span> connection.QuerySingleAsync&lt;Aircraft&gt;(query, <span class="keyword">new</span> &#123;Id = id&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> aircraft;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>Before we can call Dapper's <code>QuerySingleASync</code> method, we need an instance of an open <code>SqlConnection</code>. If you are an Entity Framework user, you might not be used to working directly with the <code>SqlConnection</code> class because Entity Framework generally manages connections for you. All we need to do is create a new <code>SqlConnection</code>, passing in the connection string, then call <code>OpenAsync</code> to open that connection. We wrap the connection in a <code>using</code> statement to ensure that <code>connection.Dispose()</code> is called when we are done with the connection. This is important because it ensures the connection is returned to the connection pool that is managed by .NET. If you forget to do this, you will quickly run into problems where your application is not able to connect to the database because the connection pool is starved. Check out the <a href="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql-server-connection-pooling" target="_blank" rel="noopener">.NET Docs</a> for  more information on connection pooling.</p><p>We will use the following pattern throughout this series of blogs posts:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span>(<span class="keyword">var</span> connection = <span class="keyword">new</span> SqlConnection(_connectionString))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">await</span> connection.OpenAsync();</span><br><span class="line">  <span class="comment">//Do Dapper Things</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As @Disman pointed out in the comments, it is not necessary to call <code>connection.OpenAsync()</code>. If the connection is not already opened, Dapper will call <code>OpenAsync</code> for you. Call me old fashioned but I think that whoever created the connection should be the one responsible for opening it, that's why I like to open the connection before calling Dapper.</p><p>Let's get back to our example. To query for a single <code>Aircraft</code>, we call the <code>QuerySingleAsync</code> method, specifying the <code>Aircraft</code> type parameter. The type parameter tells Dapper what class type to return. Dapper will take the results of the query that gets executed and map the column values to properties of the specified type. We also pass in two arguments. The first is the query that will return a single row based on a specified <code>@Id</code> parameter.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">       Id</span><br><span class="line">      ,Manufacturer</span><br><span class="line">      ,Model</span><br><span class="line">      ,RegistrationNumber</span><br><span class="line">      ,FirstClassCapacity</span><br><span class="line">      ,RegularClassCapacity</span><br><span class="line">      ,CrewCapacity</span><br><span class="line">      ,ManufactureDate</span><br><span class="line">      ,NumberOfEngines</span><br><span class="line">      ,EmptyWeight</span><br><span class="line">      ,MaxTakeoffWeight</span><br><span class="line">  FROM Aircraft WHERE Id = @Id</span><br></pre></td></tr></table></figure> <p>The next parameter is an anonymous class containing properties that will map to the parameters of the query.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> &#123;Id = id&#125;</span><br></pre></td></tr></table></figure><p>Passing the parameters in this way ensures that our queries are not susceptible to SQL injection attacks.</p><p>That's really all there is to it. As long as the column names and data types match the property of your class, Dapper takes care of executing the query, creating an instance of the <code>Aircraft</code> class and setting all the properties.</p><p>If the query doesn't contain return any results, Dapper will throw an <code>InvalidOperationException</code>.</p><blockquote><p>InvalidOperationException: Sequence contains no elements</p></blockquote><p>If you prefer that Dapper returns null when there are no results, use the <code>QuerySingleOrDefaultAsnyc</code> method instead.</p><h2>Querying a list of objects</h2><p>Querying for a list of objects is just as easy as querying for a single object. Simply call the <code>QueryAsync</code> method as follows.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;Aircraft&gt;&gt; Get()</span><br><span class="line">&#123;</span><br><span class="line">  IEnumerable&lt;Aircraft&gt; aircraft;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">using</span> (<span class="keyword">var</span> connection = <span class="keyword">new</span> SqlConnection(_connectionString))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">await</span> connection.OpenAsync();</span><br><span class="line">    <span class="keyword">var</span> query = <span class="string">@"</span></span><br><span class="line"><span class="string">SELECT </span></span><br><span class="line"><span class="string">       Id</span></span><br><span class="line"><span class="string">      ,Manufacturer</span></span><br><span class="line"><span class="string">      ,Model</span></span><br><span class="line"><span class="string">      ,RegistrationNumber</span></span><br><span class="line"><span class="string">      ,FirstClassCapacity</span></span><br><span class="line"><span class="string">      ,RegularClassCapacity</span></span><br><span class="line"><span class="string">      ,CrewCapacity</span></span><br><span class="line"><span class="string">      ,ManufactureDate</span></span><br><span class="line"><span class="string">      ,NumberOfEngines</span></span><br><span class="line"><span class="string">      ,EmptyWeight</span></span><br><span class="line"><span class="string">      ,MaxTakeoffWeight</span></span><br><span class="line"><span class="string">  FROM Aircraft"</span>;</span><br><span class="line">    aircraft = <span class="keyword">await</span> connection.QueryAsync&lt;Aircraft&gt;(query);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> aircraft;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this case, the query did not contain any parameters. If it did, we would pass those parameters in as an argument to the <code>QueryAsync</code> method just like we did for the <code>QuerySingleAsync</code> method.</p><h2>What's next?</h2><p>This is just the beginning of what I expect will be a long series of blog posts. You can follow along on this blog and you can track the <a href="https://github.com/AspNetMonsters/DapperSeries" target="_blank" rel="noopener">sample code on GitHub</a>.</p><p>Leave a comment below if there is a topic you would like me to cover.</p>]]></content>
    
    <summary type="html">
    
      I was recently asked to create a read-only web API to expose some parts of a system&#39;s data model to third party developers. While Entity Framework is often my go-to tool for data access, I thought this was a good scenario to use Dapper instead. This series of blog posts explores dapper and how you might use it in your application. Today, we will start with the basics of loading and mapping a database table to a C# class.
    
    </summary>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/categories/Dapper/"/>
    
    
      <category term=".NET Core" scheme="http://www.westerndevs.com/tags/NET-Core/"/>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/tags/Dapper/"/>
    
      <category term=".NET" scheme="http://www.westerndevs.com/tags/NET/"/>
    
      <category term="Micro ORM" scheme="http://www.westerndevs.com/tags/Micro-ORM/"/>
    
  </entry>
  
  <entry>
    <title type="html">Authorize Resource Tag Helper for ASP.NET Core</title>
    <link href="http://www.westerndevs.com/ASP-NET-Core/Tag-Helpers/authorize-resource-tag-helper/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/ASP-NET-Core/Tag-Helpers/authorize-resource-tag-helper/</id>
    <published>2017-11-29T01:30:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>In my previous blog post, I wrote an <a href="https://www.davepaquette.com/archive/2017/11/05/authorize-tag-helper.aspx" target="_blank" rel="noopener">Authorize tag helper</a> that made it simple to use role and policy based authorization in Razor Views. In this blog post, we will take this one step further and build a tag helper for resource-based authorization.</p><h1>Resource-Based Authorization</h1><p>Using the <code>IAuthorizationService</code> in ASP.NET Core, it is easy to implement an authorization strategy that depends not only on properties of the User but also depends on the resource being accessed. To learn how resource-based authorization works, take a look at the well written <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/resourcebased?tabs=aspnetcore2x" target="_blank" rel="noopener">offical documentation</a>.</p><p>Once you have defined your authorization handlers and setup any policies in <code>Startup.ConfigureServices</code>, applying resource-based authorization is a matter of calling one of two overloads of the <code>AuthorizeAsync</code> method on the <code>IAuthorizationService</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;AuthorizationResult&gt; <span class="title">AuthorizeAsync</span>(<span class="params">ClaimsPrincipal user,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">object</span> resource,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">string</span> policyName</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Task&lt;AuthorizationResult&gt; <span class="title">AuthorizeAsync</span>(<span class="params">ClaimsPrincipal user,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">object</span> resource,</span></span></span><br><span class="line"><span class="function"><span class="params">                          IAuthorizationRequirement requirements</span>)</span>;</span><br></pre></td></tr></table></figure>                          <p>One method takes in a policy name while the other takes in an <code>IAuthorizationRequirement</code>. The resulting <code>AuthorizationResult</code> has a <code>Succeeded</code> boolean that indicates whether or not the user meets the requirements for the specified policy. Using the <code>IAuthorizationService</code> in a controller is easy enough. Simply inject the service into the controller, call the method you want to call and then check the result.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">public async Task&lt;IActionResult&gt; Edit(int id)</span><br><span class="line">&#123;</span><br><span class="line">    var document = _documentContext.Find(documentId);</span><br><span class="line"></span><br><span class="line">    var authorizationResult = await _authorizationService.AuthorizeAsync(User, Document, &quot;EditDocument&quot;);</span><br><span class="line"></span><br><span class="line">    if (authorizationResult.Succeeded)</span><br><span class="line">    &#123;</span><br><span class="line">        return View(document);</span><br><span class="line">    &#125;    </span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return new ChallengeResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using this approach, we can easily restrict which users can edit specific documents as defined by our EditDocument policy. For example, we might limit editing to only users who originally created the document.</p><p>Where things start to get a little ugly is if we want to render a UI element based on resource-based authorization. For example, we might only want to render the edit button for a document if the current user is actually authorized to edit that document. Out of the box, this would require us to inject the <code>IAuthorizationService</code> in the Razor view and use it like we did in the controller action. The approach works, but the Razor code will get ugly really fast.</p><h1>Authorize Resource Tag Helper</h1><p>Similar to the Authorize Tag Helper from the last blog post, this Authorize Resource Tag Helper will make it easy to show or hide blocks of HTML by evaluating authorization rules.</p><h2>Resource-Based Policy Authorization</h2><p>Let's assume we have a named &quot;EditDocument&quot; that requires a user to be the original author of a <code>Document</code> in order to edit the document. With the authorize resource tag helper, specify the resource instance using the <code>asp-authorize-resource</code> attribute and the policy name using the <code>asp-policy</code> attribute. Here is an example where <code>Model</code> is an instance of a <code>Document</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">asp-authorize-resource</span>=<span class="string">"Model"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">asp-policy</span>=<span class="string">"EditDocument"</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-pencil"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If the user meets the requirments for the &quot;EditDocument&quot; policy and the specified resource, then the block of HTML will be sent to the browser. If the requirements are not met, the tag helper will suppress the output of that block of HTML. The tag helper can be applied to any HTML element.</p><h2>Resource-Based Requirement Authorization</h2><p>Instead of specifying a policy name, authorization can be evaluated by specifying an instance of an <code>IAuthorizationRequirement</code>. When using requirements directly instead of policies, specify the requirement using the <code>asp-requirement</code> attribute.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">asp-authorize-resource</span>=<span class="string">"document"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">asp-requirement</span>=<span class="string">"Operations.Delete"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-trash text-danger"</span>&gt;</span>                            </span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If the user meets <code>Operations.Delete</code> requirement for the specified resource, then the block of HTML will be sent to the browser. If the requirement is not met, the tag helper will suppress the output of that block of HTML. The tag helper can be applied to any HTML element.</p><h2>Implementation Details</h2><p>The authorize resource tag helper itself is fairly simple. The implementation will likely evolve after this blog post so you can check out the latest version <a href="https://github.com/dpaquette/TagHelperSamples/blob/master/TagHelperSamples/src/TagHelperSamples.Authorization/AuthorizeResourceTagHelper.cs" target="_blank" rel="noopener">here</a>.</p><p>The tag helper needs an instance of the <code>IHttpContextAccessor</code> to get access to the current user and an instance of the <code>IAuthorizationService</code>. These are injected into the constructor. In the <code>ProcessAsync</code> method, either the specified <code>Policy</code> or the specified <code>Requirement</code> are passed in to the <code>IAuthorizationService</code> along with the resource.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HtmlTargetElement(Attributes = <span class="meta-string">"asp-authorize-resource,asp-policy"</span>)</span>]</span><br><span class="line">[<span class="meta">HtmlTargetElement(Attributes = <span class="meta-string">"asp-authorize-resource,asp-requirement"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorizeResourceTagHelper</span> : <span class="title">TagHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IAuthorizationService _authorizationService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IHttpContextAccessor _httpContextAccessor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthorizeResourceTagHelper</span>(<span class="params">IHttpContextAccessor httpContextAccessor, IAuthorizationService authorizationService</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _httpContextAccessor = httpContextAccessor;</span><br><span class="line">        _authorizationService = authorizationService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Gets or sets the policy name that determines access to the HTML block.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">HtmlAttributeName(<span class="meta-string">"asp-policy"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Policy &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Gets or sets a comma delimited list of roles that are allowed to access the HTML  block.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">HtmlAttributeName(<span class="meta-string">"asp-requirement"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> IAuthorizationRequirement Requirement &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Gets or sets the resource to be authorized against a particular policy</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">HtmlAttributeName(<span class="meta-string">"asp-authorize-resource"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">object</span> Resource &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ProcessAsync</span>(<span class="params">TagHelperContext context, TagHelperOutput output</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Resource == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"Resource cannot be null"</span>);                </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrWhiteSpace(Policy) &amp;&amp; Requirement == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"Either Policy or Requirement must be specified"</span>);</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(Policy) &amp;&amp; Requirement != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"Policy and Requirement cannot be specified at the same time"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AuthorizationResult authorizeResult;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(Policy))</span><br><span class="line">        &#123;</span><br><span class="line">            authorizeResult = <span class="keyword">await</span> _authorizationService.AuthorizeAsync(_httpContextAccessor.HttpContext.User, Resource, Policy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Requirement != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            authorizeResult =</span><br><span class="line">                <span class="keyword">await</span> _authorizationService.AuthorizeAsync(_httpContextAccessor.HttpContext.User, Resource,</span><br><span class="line">                    Requirement);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"Either Policy or Requirement must be specified"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!authorizeResult.Succeeded)</span><br><span class="line">        &#123;</span><br><span class="line">            output.SuppressOutput();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure> <p>Note that either a policy or a requirement must be specified along with a resource, but you can't specify both a policy AND a requirement. Most of the code in the <code>ProcessAsync</code> method is checking the argument values to make sure a valid combination was used.</p><h1>Try it out</h1><p>You can see the authorize resource tag helper in action on my tag helper samples site <a href="http://taghelpersamples.azurewebsites.net/Samples/Authorize" target="_blank" rel="noopener">here</a>. The sample site contains the examples listed in this blog post and also provides a way to log in as different users to test different scenarios.</p><p>The authorize resource tag helper is also available on <a href="https://www.nuget.org/packages/TagHelperSamples.Authorization/" target="_blank" rel="noopener">NuGet</a> so you can use it in your own ASP.NET Core application.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add <span class="keyword">package</span> <span class="title">TagHelperSamples.Authorization</span></span><br></pre></td></tr></table></figure><p>Let me know what you think. Would you like to see this tag helper including in the next release of ASP.NET Core?</p><p><em>NOTE:</em> If you choose to use the authorize resource tag helper in your application, you should remember that hiding a section of HTML is not enough to fully secure your application. You also need to make sure that resource-based authorization is applied to any related controllers and action methods.</p><h1>What's Next?</h1><p>There is one more authorization scenario related to supporting different authorization schemes that I hope to cover. Watch out for that in a future blog post. Also, this tag helper project is all open source so feel free to jump in on <a href="https://github.com/dpaquette/TagHelperSamples" target="_blank" rel="noopener">GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      ASP.NET Core has a powerful mechanism for implementing resource-based authorization using the IAuthorizationService and resource-based AuthorizationHandlers. In this blog post, we build a tag helper that makes it simple to use resource-based auhtorization to Razor views without writing any C# code in the view.
    
    </summary>
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/categories/ASP-NET-Core/"/>
    
      <category term="Tag Helpers" scheme="http://www.westerndevs.com/categories/ASP-NET-Core/Tag-Helpers/"/>
    
    
      <category term="Tag Helpers" scheme="http://www.westerndevs.com/tags/Tag-Helpers/"/>
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/tags/ASP-NET-Core/"/>
    
      <category term="MVC" scheme="http://www.westerndevs.com/tags/MVC/"/>
    
      <category term="Authorization" scheme="http://www.westerndevs.com/tags/Authorization/"/>
    
  </entry>
  
  <entry>
    <title type="html">Authorize Tag Helper for ASP.NET Core</title>
    <link href="http://www.westerndevs.com/ASP-NET-Core/Tag-Helpers/authorize-tag-helper/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/ASP-NET-Core/Tag-Helpers/authorize-tag-helper/</id>
    <published>2017-11-05T19:38:30.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>In ASP.NET Core, it's easy to control access to Controllers and Action Methods using the <code>[Authorize]</code> attribute. This attribute provides a simple way to ensure only authorized users are able to access certain parts of your application. While the <code>[Authorize]</code> attribute makes it easy to control authorization for an entire page, the mechanism for controlling access to a section of a page is <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/views?tabs=aspnetcore2x" target="_blank" rel="noopener">a little clumsy</a>, involving the use of a the <code>IAuthorizationService</code> and writing C# based <code>if</code> blocks in your Razor code.</p><p>In this blog post, we build an Authorize tag helper that makes it easy to control access to any block HTML in a Razor view.</p><h1>Authorize Tag Helper</h1><p>The basic idea of this tag helper is to provide similar functionality to the <code>[Authorize]</code> attribute and it's associated action filter in ASP.NET Core MVC. The authorize tag helper will provide the same options as the <code>[Authorize]</code> attribute and the implementation will be based on the authorize filter. In the MVC framework, the <code>[Authorize]</code> attribute provides data such as the names of roles and policies while the authorize filter contains the logic to check for roles and policies as part of the request pipeline. Let's walk through the most common scenarios.</p><h2>Simple Authorization</h2><p>In it's <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/simple" target="_blank" rel="noopener">simplest form</a>, adding the <code>[Authorize]</code> attribute to a controller or action method will limit access to that controller or action method to users who are authenticated. That is, only users who are logged in will be able to access those controllers or action methods.</p><p>With the Authorize tag helper, we will implement a similar behaviour. Adding the <code>asp-authorize</code> attribute to any HTML element will ensure that only authenticated users can see that that block of HTML.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">asp-authorize</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>Welcome !!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        If you're logged in, you can see this section</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If a user is not authenticated, the tag helper will suppress the output of that entire block of HTML. That section of HTML will not be sent to the browser.</p><h2>Role Based Authorization</h2><p>The <code>[Authorize]</code> attribute provides an option to specify the role that a user must belong to in order to access a controller or action method. For example, if a user must belong to the <em>Admin</em> role, we would add the <code>[Authorize]</code> attribute and specify the <code>Roles</code> property as follows:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Authorize(Roles = <span class="meta-string">"Admin"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AdminController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//Action methods here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The equivalent using the Authorize tag helper would be to add the <code>asp-authorize</code> attribute to an HTML element and then also add the <code>asp-roles</code> attribute specifying the require role.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">asp-authorize</span> <span class="attr">asp-roles</span>=<span class="string">"Admin"</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>Admin Section<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        Only admin users can see this section. Top secret admin things go here.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You can also specify a comma separated list of roles, in which case the HTML would be rendered if the user was a member of any of the roles specified.</p><h2>Policy Based Authorization</h2><p>The <code>[Authorize]</code> attribe also provides an option to authorize users based on the requirements specified in a Policy. You can learn more about the specifics of this approach by reading the offical docs on <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/claims" target="_blank" rel="noopener">Claims-Based Authorization</a> and <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies" target="_blank" rel="noopener">Custom-Policy Based Authorization</a>. Policy based authorization is applied by specifying <code>Policy</code> property for the <code>[Authorize]</code> attribute as follows:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Authorize(Policy = <span class="meta-string">"Seniors"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AdminController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//action methods here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This assumes a policy named <em>Seniors</em> was defined at startup. For example:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">services.AddAuthorization(o =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        o.AddPolicy(<span class="string">"Seniors"</span>, p =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            p.RequireAssertion(context =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> context.User.Claims</span><br><span class="line">                      .Any(c =&gt; c.Type == <span class="string">"Age"</span> &amp;&amp; Int32.Parse(c.Value) &gt;= <span class="number">65</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>The equivalent using the Authorize tag helper would be to add the <code>asp-authorize</code> attribute to an HTML element and then also add the <code>asp-policy</code> attribute specifying the policy name.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">asp-authorize</span> <span class="attr">asp-policy</span>=<span class="string">"Seniors"</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>Seniors Only<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        Only users age 65 or older can see this section. Early bird dinner coupons go here. </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>Combining Role and Policy Based Authorization</h2><p>You can combine the role based and policy based approaches by specifying both the <code>asp-roles</code> and <code>asp-policy</code> attributes. This has the effect of requiring that the user meets the requiremnts for both the role and the policy. For example, the following would require that the usere were both a member of the Admin role and meets the requirements defined in the Seniors policy.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">asp-authorize</span> <span class="attr">asp-roles</span>=<span class="string">"Admin"</span> <span class="attr">asp-policy</span>=<span class="string">"Seniors"</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>Admin Seniors Only<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        Only users who have both the Admin role AND are age 65 or older can see this section.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>Implementation Details</h2><p>The Authorize tag helper itself is fairly simple. The implementation will likely evolve after this blog post so you can check out the latest version <a href="https://github.com/dpaquette/TagHelperSamples/blob/master/TagHelperSamples/src/TagHelperSamples.Authorization/AuthorizeTagHelper.cs" target="_blank" rel="noopener">here</a>.</p><p>The tag helper implements the <code>IAuthorizeData</code> interface. This is the interface implemented by the <a href="https://github.com/aspnet/Security/blob/dev/src/Microsoft.AspNetCore.Authorization/AuthorizeAttribute.cs" target="_blank" rel="noopener">Authorize</a> attribute in ASP.NET Core. In the <code>ProcessAsync</code> method, the properties of <code>IAuthorizeData</code> are used to create an effective policy that is then evaluated against the current <code>HttpContext</code>. If the policy does not succeed, then the output of the tag helper is supressed. Remember that supressing the output of a tag helper means that the HTML for that element, including it's children, will be NOT sent to the client.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HtmlTargetElement(Attributes = <span class="meta-string">"asp-authorize"</span>)</span>]</span><br><span class="line">[<span class="meta">HtmlTargetElement(Attributes = <span class="meta-string">"asp-authorize,asp-policy"</span>)</span>]</span><br><span class="line">[<span class="meta">HtmlTargetElement(Attributes = <span class="meta-string">"asp-authorize,asp-roles"</span>)</span>]</span><br><span class="line">[<span class="meta">HtmlTargetElement(Attributes = <span class="meta-string">"asp-authorize,asp-authentication-schemes"</span>)</span>]</span><br><span class="line">public class AuthorizationPolicyTagHelper : TagHelper, IAuthorizeData</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IAuthorizationPolicyProvider _policyProvider;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IPolicyEvaluator _policyEvaluator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IHttpContextAccessor _httpContextAccessor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthorizationPolicyTagHelper</span>(<span class="params">IHttpContextAccessor httpContextAccessor, IAuthorizationPolicyProvider policyProvider, IPolicyEvaluator policyEvaluator</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _httpContextAccessor = httpContextAccessor;</span><br><span class="line">        _policyProvider = policyProvider;</span><br><span class="line">        _policyEvaluator = policyEvaluator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Gets or sets the policy name that determines access to the HTML block.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">HtmlAttributeName(<span class="meta-string">"asp-policy"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Policy &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Gets or sets a comma delimited list of roles that are allowed to access the HTML  block.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">HtmlAttributeName(<span class="meta-string">"asp-roles"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Roles &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Gets or sets a comma delimited list of schemes from which user information is constructed.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">HtmlAttributeName(<span class="meta-string">"asp-authentication-schemes"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> AuthenticationSchemes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ProcessAsync</span>(<span class="params">TagHelperContext context, TagHelperOutput output</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> policy = <span class="keyword">await</span> AuthorizationPolicy.CombineAsync(_policyProvider, <span class="keyword">new</span>[] &#123; <span class="keyword">this</span> &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> authenticateResult = <span class="keyword">await</span> _policyEvaluator.AuthenticateAsync(policy, _httpContextAccessor.HttpContext);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> authorizeResult = <span class="keyword">await</span> _policyEvaluator.AuthorizeAsync(policy, authenticateResult, _httpContextAccessor.HttpContext, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!authorizeResult.Succeeded)</span><br><span class="line">        &#123;</span><br><span class="line">            output.SuppressOutput();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>The code in the <code>ProcessAsync</code> method is based on the <a href="https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Core/Authorization/AuthorizeFilter.cs" target="_blank" rel="noopener">AuthorizeFilter</a> from ASP.NET Core MVC.</p><h1>Try it out</h1><p>You can see the Authorize tag helper in action on my tag helper samples site <a href="http://taghelpersamples.azurewebsites.net/Samples/Authorize" target="_blank" rel="noopener">here</a>. The sample site contains the examples listed in this blog post and also provides a way to log in as different users to test different scenarios.</p><p>The Authorize tag helper is also available on <a href="https://www.nuget.org/packages/TagHelperSamples.Authorization/" target="_blank" rel="noopener">NuGet</a> so you can use it in your own ASP.NET Core application.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add <span class="keyword">package</span> <span class="title">TagHelperSamples.Authorization</span></span><br></pre></td></tr></table></figure><p>Let me know what you think. Would you like to see this tag helper included in the next release of ASP.NET Core?</p><h1>What's Next?</h1><p>If you choose to use the Authorize tag helper in your application, you should remember that hiding a section of HTML is not enough to fully secure your application. You also need to make sure that authorization is applied to any related controllers and action methods. The Authorize tag helper is meant to be used in conjugtion with the <code>[Authorize]</code> attribute, not as a replacement for it.</p><p>There are a couple more scenarios I would like to go through and I will address those in a future post. One of those is supporting different Authorization Schemes and the other resource based authorization. Of course, this project is all open source so feel free to jump in on <a href="https://github.com/dpaquette/TagHelperSamples" target="_blank" rel="noopener">GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      In ASP.NET Core, it&#39;s easy to control access to Controllers and Action Methods using the Authorize attribute. This attribute provides a simple way to ensure only authorized users are able to access certain parts of your application. While the Authorize attribute makes it easy to control authorization for an entire page, the mechanism for controlling access to a section of a page is a little clumsy. In this blog post, we build a Tag Helper that makes it incredibly easy to control access to any block HTML in a Razor view.
    
    </summary>
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/categories/ASP-NET-Core/"/>
    
      <category term="Tag Helpers" scheme="http://www.westerndevs.com/categories/ASP-NET-Core/Tag-Helpers/"/>
    
    
      <category term="Tag Helpers" scheme="http://www.westerndevs.com/tags/Tag-Helpers/"/>
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/tags/ASP-NET-Core/"/>
    
      <category term="MVC" scheme="http://www.westerndevs.com/tags/MVC/"/>
    
      <category term="Authorization" scheme="http://www.westerndevs.com/tags/Authorization/"/>
    
  </entry>
  
  <entry>
    <title type="html">Integration Testing with Entity Framework Core and SQL Server</title>
    <link href="http://www.westerndevs.com/Development/integration-testing-with-entity-framework-core-and-sql-server/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Development/integration-testing-with-entity-framework-core-and-sql-server/</id>
    <published>2016-11-27T22:00:00.000Z</published>
    <updated>2018-04-12T23:57:35.278Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Entity Framework Core makes it easy to write tests that execute against an in-memory store. Using an in-memory store is convenient since we don't need to worry about setting up a relational database. It also ensures our unit tests run quickly so we aren't left waiting hours for a large test suite to complete.</p><p>While Entity Framework Core's in-memory store works great for many scenarios, there are some situations where it might be better to run our tests against a real relational database. Some examples include when loading entities using raw SQL or when using SQL Server specific features that can not be tested using the in-memory provider. In this case, the tests would be considered an integration test since we are no longer testing our Entity Framework context in isolation. We are testing how it will work in the real world when connected to SQL Server.</p><h2>The Sample Project</h2><p>For this example, I used the following simple model and DbContext classes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Monster</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsScary &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Colour &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MonsterContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MonsterContext</span>(<span class="params">DbContextOptions&lt;MonsterContext&gt; options</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">options</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Monster&gt; Monsters &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In an ASP.NET Core application, the context is configured to use SQL Server in the <code>Startup.ConfigureServices</code> method.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services.AddDbContext&lt;MonsterContext&gt;(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.UseSqlServer(<span class="string">"DefaultConnection"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The <code>DefaultConnection</code> is defined in <code>appsettings.json</code> which is loaded at startup.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"ConnectionStrings"</span>: &#123;</span><br><span class="line">        <span class="string">"DefaultConnection"</span>: <span class="string">"Server=(localdb)\\mssqllocaldb;Database=monsters_db;Trusted_Connection=True;MultipleActiveResultSets=true"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>MonsterContext</code> is also configured to use Migrations which were initialized using the <code>dotnet ef migrations add InitialCreate</code> command. For more on Entity Framework Migrations, see the <a href="https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/migrations" target="_blank" rel="noopener">official tutorial</a>.</p><p>As a simple example, I created a query class that loads <em>scary</em> monsters from the database using a SQL query instead of querying the <code>Monsters</code> <code>DbSet</code> directly.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ScaryMonstersQuery</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> MonsterContext _context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScaryMonstersQuery</span>(<span class="params">MonsterContext context</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerable&lt;Monster&gt; <span class="title">Execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _context.Monsters</span><br><span class="line">            .FromSql(<span class="string">"SELECT Id, Name, IsScary, Colour FROM Monsters WHERE IsScary = &#123;0&#125;"</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To be clear, a better way to write this query is <code>_context.Monster.Where(m =&gt; m.IsScary == true)</code>, but I wanted a simple example. I also wanted to use <code>FromSql</code> because it is inherently difficult to unit test. The <code>FromSql</code> method doesn't work with the in-memory provider since it requires a relational database. It is also an extension method which means we can't simply mock the context using a tool like <code>Moq</code>. We could of course create a wrapper service that calls the <code>FromSql</code> extension method and mock that service but this only shifts the problem. The <em>wrapper</em> approach would allow us to ensure that <code>FromSql</code> is called in the way we expect it to be called but it would not be able to ensure that the query will actually run successfully and return the expected results.</p><p>An integration test is a good option here since it will ensure that the query runs exactly as expected against a real SQL Server database.</p><h2>The Test</h2><p>I used xunit as the test framework in this example. In the constructor, which is the setup method for any tests in the class, I configure an instance of the <code>MonsterContext</code> connecting to a localdb instance using a database name containing a random guid. Using a guid in the database name ensures the database is unique for this test. Uniqueness is important when running tests in parallel because it ensures these tests won't impact any other tests that aer currently running. After creating the context, a call to <code>_context.Database.Migrate()</code> creates a new database and applies any Entity Framework migrations that are defined for the <code>MonsterContext</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SimpleIntegrationTest</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    MonsterContext _context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleIntegrationTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> serviceProvider = <span class="keyword">new</span> ServiceCollection()</span><br><span class="line">            .AddEntityFrameworkSqlServer()</span><br><span class="line">            .BuildServiceProvider();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> builder = <span class="keyword">new</span> DbContextOptionsBuilder&lt;MonsterContext&gt;();</span><br><span class="line"></span><br><span class="line">        builder.UseSqlServer(<span class="string">$"Server=(localdb)\\mssqllocaldb;Database=monsters_db_<span class="subst">&#123;Guid.NewGuid()&#125;</span>;Trusted_Connection=True;MultipleActiveResultSets=true"</span>)</span><br><span class="line">                .UseInternalServiceProvider(serviceProvider);</span><br><span class="line"></span><br><span class="line">        _context = <span class="keyword">new</span> MonsterContext(builder.Options);</span><br><span class="line">        _context.Database.Migrate();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QueryMonstersFromSqlTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//Add some monsters before querying</span></span><br><span class="line">        _context.Monsters.Add(<span class="keyword">new</span> Monster &#123; Name = <span class="string">"Dave"</span>, Colour = <span class="string">"Orange"</span>, IsScary = <span class="literal">false</span> &#125;);</span><br><span class="line">        _context.Monsters.Add(<span class="keyword">new</span> Monster &#123; Name = <span class="string">"Simon"</span>, Colour = <span class="string">"Blue"</span>, IsScary = <span class="literal">false</span> &#125;);</span><br><span class="line">        _context.Monsters.Add(<span class="keyword">new</span> Monster &#123; Name = <span class="string">"James"</span>, Colour = <span class="string">"Green"</span>, IsScary = <span class="literal">false</span> &#125;);</span><br><span class="line">        _context.Monsters.Add(<span class="keyword">new</span> Monster &#123; Name = <span class="string">"Imposter Monster"</span>, Colour = <span class="string">"Red"</span>, IsScary = <span class="literal">true</span> &#125;);</span><br><span class="line">        _context.SaveChanges();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Execute the query</span></span><br><span class="line">        ScaryMonstersQuery query = <span class="keyword">new</span> ScaryMonstersQuery(_context);</span><br><span class="line">        <span class="keyword">var</span> scaryMonsters = query.Execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Verify the results</span></span><br><span class="line">        Assert.Equal(<span class="number">1</span>, scaryMonsters.Count());</span><br><span class="line">        <span class="keyword">var</span> scaryMonster = scaryMonsters.First();</span><br><span class="line">        Assert.Equal(<span class="string">"Imposter Monster"</span>, scaryMonster.Name);</span><br><span class="line">        Assert.Equal(<span class="string">"Red"</span>, scaryMonster.Colour);</span><br><span class="line">        Assert.True(scaryMonster.IsScary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _context.Database.EnsureDeleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The actual test itself happens in the <code>QueryMonstersFromSqlTest</code> method. I start by adding some sample data to the database. Next, I create and execute the <code>ScaryMonstersQuery</code> using the context that was created in the setup method. Finally, I verify the results, ensuring that the expected data is returned from the query.</p><p>The last step is the <code>Dispose</code> method which in xunit is the teardown for any tests in this class. We don't want all these test databases hanging around forever so this is the place to delete the database that was created in the setup method. The database is deleted by calling <code>_context.Database.EnsureDeleted()</code>.</p><h2>Use with Caution</h2><p>These tests are slow! The very simple example above takes 13 seconds to run on my laptop. My advice here is to use this sparingly and only when it really adds value for your project. If you end up with a large number of these integration tests, I would consider splitting the integration tests into a separate test suite and potentially running them on a different schedule than my unit test suite (e.g. Nightly instead of every commit).</p><h2>The Code</h2><p>You can browse or download the source on <a href="https://github.com/AspNetMonsters/EntityFrameworkCoreIntegrationTest" target="_blank" rel="noopener">GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      Entity Framework Core makes it easy to write tests that execute against an in-memory store but sometimes we want to actually run our tests against a real relational database. In this post, we look at how to create an integration test that runs against a real SQL Server database.
    
    </summary>
    
      <category term="Development" scheme="http://www.westerndevs.com/categories/Development/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/tags/ASP-NET-Core/"/>
    
      <category term="Entity Framework" scheme="http://www.westerndevs.com/tags/Entity-Framework/"/>
    
      <category term="Testing" scheme="http://www.westerndevs.com/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title type="html">Creating a New View Engine in ASP.NET Core</title>
    <link href="http://www.westerndevs.com/ASP-NET-Core/creating-a-new-view-engine-in-asp-net-core/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/ASP-NET-Core/creating-a-new-view-engine-in-asp-net-core/</id>
    <published>2016-11-22T17:00:00.000Z</published>
    <updated>2018-04-12T23:57:35.278Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Earlier in November, the <a href="http://aspnetmonsters.com/2016/01/welcome/" target="_blank" rel="noopener">ASP.NET Monsters</a> had the opportunity to take part in the ASP.NET Core hackathon at the Microsoft MVP Summit. In past years, we have used the hackathon as an opportunity to spend some time working on GenFu. This year, we wanted to try something a little different.</p><h2>The Crazy Idea</h2><p>A few months ago, we had <a href="https://channel9.msdn.com/Series/aspnetmonsters/ASPNET-Monsters-59-Razor-with-Taylor-Mullen" target="_blank" rel="noopener">Taylor Mullen on The Monsters Weekly</a> to chat about Razor in ASP.NET Core. At some point during that interview, it was pointed that MVC is designed in a way that a new view engine could easily be plugged into the framework. It was also noted that implementing a view engine is a really big job. This got us to thinking...what if we could find an existing view engine of some sort. How easy would it be to get actually put a new view engine in MVC?</p><p>And so, that was our goal for the hackathon. Find a way to replace Razor with an alternate view engine in a single day of hacking.</p><h2>Finding a Replacement</h2><p>We wanted to pick something that in no way resembled Razor. Simon suggested <a href="https://pugjs.org/api/getting-started.html" target="_blank" rel="noopener">Pug</a> (previously known as Jade), a popular view template engine used in <a href="https://expressjs.com" target="_blank" rel="noopener">Express</a>. In terms of syntax, Pug is about as different from Razor as it possibly could be. Pug uses whitespace to indicate nesting of elements and does away with angle brackets all together. For example, the following template:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div</span><br><span class="line">    a(<span class="name">href=</span>'google.com') Google</span><br></pre></td></tr></table></figure>  <p>would generate this HTML:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"google.com"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>Calling Pug from ASP.NET Core</h2><p>The first major hurdle for us was figuring out a way to compile pug templates from within an ASP.NET Core application. Pug is a JavaScript based template engine and we only had a single day to pull this off so a full port of the engine to C# was not feasible.</p><p>Our first thought was to use Edgejs to call Pug's JavaScript compile function. Some quick prototyping showed us that this worked but Edgejs doesn't have support for .NET Core. This lead us to explore the <a href="https://github.com/aspnet/JavaScriptServices" target="_blank" rel="noopener">JavaScriptServices</a> packages created by the ASP.NET Core team. Specifically the <a href="https://github.com/aspnet/JavaScriptServices/tree/dev/src/Microsoft.AspNetCore.NodeServices#microsoftaspnetcorenodeservices" target="_blank" rel="noopener">Node Services</a> package which allows us to easily call out to a JavaScript module from within an ASP.NET Core application.</p><p>To our surpise, this not only worked, it was also easy! We created a very simple file called pugcompile.js.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> pug = <span class="built_in">require</span>(<span class="string">'pug'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">callback, viewPath, model</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> pugCompiledFunction = pug.compileFile(viewPath);</span><br><span class="line">callback(<span class="literal">null</span>, pugCompiledFunction(model));</span><br><span class="line">&#125;;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Calling this JavaScript from C# is easy thanks to the Node Services package. Assuming <code>model</code> is the view model we want to bind to the template and <code>mytemplate.pug</code> is the name of the file containing the pug template:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="keyword">await</span> _nodeServices.InvokeAsync&lt;<span class="keyword">string</span>&gt;(<span class="string">"pugcompile"</span>, <span class="string">"mytemplate.pug"</span>, model);</span><br></pre></td></tr></table></figure><p>Now that we had proven this was possible, it was time to integrate this with MVC by creating a new MVC View Engine.</p><h2>Creating the Pugzor View Engine</h2><p>We decided to call our view engine Pugzor which is a combination of Pug and Razor. Of course, this doesn't really make much sense since our view engine really has nothing to do with Razor but naming is hard and we thought we were being funny.</p><p>Keeping in mind our goal of implenting a view engine in a single day, we wanted to do this with the simplest way possible. After spending some time digging through the source code for MVC, we determined that we needed to implement the <code>IViewEngine</code> interface as well as implement a custom <code>IView</code>.</p><p>The <code>IViewEngine</code> is responsible for locating a view based on a <code>ActionContext</code> and a <code>ViewName</code>.  When a controller returns a <code>View</code>, it is the <code>IViewEngine</code>'s <code>FindView</code> method that is responsible for finding a view based on some convetions. The <code>FindView</code> method returns a <code>ViewEngineResult</code> which is a simple class containing a <code>boolean Success</code> property indicating whether or not a view was found and an <code>IView View</code> property containing the view if it was found.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Defines the contract for a view engine.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IViewEngine</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Finds the view with the given <span class="doctag">&lt;paramref name="viewName"/&gt;</span> using view locations and information from the</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;paramref name="context"/&gt;</span>.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="context"&gt;</span>The <span class="doctag">&lt;see cref="ActionContext"/&gt;</span>.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="viewName"&gt;</span>The name of the view.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="isMainPage"&gt;</span>Determines if the page being found is the main page for an action.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The <span class="doctag">&lt;see cref="ViewEngineResult"/&gt;</span> of locating the view.<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function">ViewEngineResult <span class="title">FindView</span>(<span class="params">ActionContext context, <span class="keyword">string</span> viewName, <span class="keyword">bool</span> isMainPage</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Gets the view with the given <span class="doctag">&lt;paramref name="viewPath"/&gt;</span>, relative to <span class="doctag">&lt;paramref name="executingFilePath"/&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> unless <span class="doctag">&lt;paramref name="viewPath"/&gt;</span> is already absolute.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="executingFilePath"&gt;</span>The absolute path to the currently-executing view, if any.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="viewPath"&gt;</span>The path to the view.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="isMainPage"&gt;</span>Determines if the page being found is the main page for an action.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The <span class="doctag">&lt;see cref="ViewEngineResult"/&gt;</span> of locating the view.<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function">ViewEngineResult <span class="title">GetView</span>(<span class="params"><span class="keyword">string</span> executingFilePath, <span class="keyword">string</span> viewPath, <span class="keyword">bool</span> isMainPage</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We decided to use the same view location conventions as Razor. That is, a view is located in <code>Views/{ControllerName}/{ActionName}.pug</code>.</p><p>Here is a simplified version of the FindView method for the <code>PugzorViewEngine</code>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ViewEngineResult <span class="title">FindView</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    ActionContext actionContext,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">string</span> viewName,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">bool</span> isMainPage</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> controllerName = GetNormalizedRouteValue(actionContext, ControllerKey);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> checkedLocations = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> location <span class="keyword">in</span> _options.ViewLocationFormats)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> view = <span class="keyword">string</span>.Format(location, viewName, controllerName);</span><br><span class="line">        <span class="keyword">if</span>(File.Exists(view))</span><br><span class="line">            <span class="keyword">return</span> ViewEngineResult.Found(<span class="string">"Default"</span>, <span class="keyword">new</span> PugzorView(view, _nodeServices));</span><br><span class="line">        checkedLocations.Add(view);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ViewEngineResult.NotFound(viewName, checkedLocations);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can view the complete implentation on <a href="https://github.com/AspNetMonsters/pugzor/blob/master/src/pugzor.core/PugzorViewEngine.cs" target="_blank" rel="noopener">GitHub</a>.</p><p>Next, we created a class called <code>PugzorView</code> which implements <code>IView</code>. The <code>PugzorView</code> takes in a path to a pug template and an instance of <code>INodeServices</code>. The MVC framework calls the <code>IView</code>'s <code>RenderAsync</code> when it is wants the view to be rendered. In this method, we call out to <code>pugcompile</code> and then write the resulting HTML out to the view context.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PugzorView</span> : <span class="title">IView</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _path;</span><br><span class="line">    <span class="keyword">private</span> INodeServices _nodeServices;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PugzorView</span>(<span class="params"><span class="keyword">string</span> path, INodeServices nodeServices</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _path = path;</span><br><span class="line">        _nodeServices = nodeServices;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Path</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">RenderAsync</span>(<span class="params">ViewContext context</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> _nodeServices.InvokeAsync&lt;<span class="keyword">string</span>&gt;(<span class="string">"./pugcompile"</span>, Path, context.ViewData.Model);</span><br><span class="line">        context.Writer.Write(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The only thing left was to configure MVC to use our new view engine. At first, we thought we could easy add a new view engine using the <code>AddViewOptions</code> extension method when adding MVC to the service collection.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddMvc()</span><br><span class="line">        .AddViewOptions(options =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                options.ViewEngines.Add(<span class="keyword">new</span> PugzorViewEngine(nodeServices));</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>This is where we got stuck.  We can't add a concrete instance of the <code>PugzorViewEngine</code> to the <code>ViewEngines</code> collection in the <code>Startup.ConfigureServices</code> method because the view engine needs to take part in dependency injection. The <code>PugzorViewEngine</code> has a dependency on <code>INodeServices</code> and we want that to be injected by ASP.NET Core's dependency injection framework. Luckily, the all knowning Razor master Taylor Mullen was on hand to show us the right way to register our view engine.</p><p>The recommended approach for adding a view engine to MVC is to create a custom setup class that implements <code>IConfigureOptions&lt;MvcViewOptions&gt;</code>. The setup class takes in an instance of our <code>IPugzorViewEngine</code> via constructor injection. In the configure method, that view engine is added to the list of view engines in the <code>MvcViewOptions</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class PugzorMvcViewOptionsSetup : IConfigureOptions&lt;MvcViewOptions&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IPugzorViewEngine _pugzorViewEngine;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Initializes a new instance of <span class="doctag">&lt;see cref="PugzorMvcViewOptionsSetup"/&gt;</span>.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="pugzorViewEngine"&gt;</span>The <span class="doctag">&lt;see cref="IPugzorViewEngine"/&gt;</span>.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PugzorMvcViewOptionsSetup</span>(<span class="params">IPugzorViewEngine pugzorViewEngine</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pugzorViewEngine == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(pugzorViewEngine));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _pugzorViewEngine = pugzorViewEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Configures <span class="doctag">&lt;paramref name="options"/&gt;</span> to use <span class="doctag">&lt;see cref="PugzorViewEngine"/&gt;</span>.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="options"&gt;</span>The <span class="doctag">&lt;see cref="MvcViewOptions"/&gt;</span> to configure.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">MvcViewOptions options</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (options == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(options));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        options.ViewEngines.Add(_pugzorViewEngine);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now all we need to do is register the setup class and view engine the <code>Startup.ConfigureServices</code> method.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services.AddTransient&lt;IConfigureOptions&lt;MvcViewOptions&gt;, PugzorMvcViewOptionsSetup&gt;();</span><br><span class="line">services.AddSingleton&lt;IPugzorViewEngine, PugzorViewEngine&gt;();</span><br></pre></td></tr></table></figure><p>Like magic, we now have a working view engine. Here's a simple example:</p><h4>Controllers/HomeController.cs</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ViewData.Add(<span class="string">"Title"</span>, <span class="string">"Welcome to Pugzor!"</span>);</span><br><span class="line">    ModelState.AddModelError(<span class="string">"model"</span>, <span class="string">"An error has occurred"</span>);</span><br><span class="line">    <span class="keyword">return</span> View(<span class="keyword">new</span> &#123; People = A.ListOf&lt;Person&gt;() &#125;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4>Views/Home/Index.pug</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">block body</span><br><span class="line"><span class="selector-tag">h2</span> Hello</span><br><span class="line"><span class="selector-tag">p</span> #&#123;ViewData.title&#125; </span><br><span class="line">table(class=<span class="string">'table'</span>)</span><br><span class="line">thead</span><br><span class="line">tr</span><br><span class="line"><span class="selector-tag">th</span> Name</span><br><span class="line"><span class="selector-tag">th</span> Title</span><br><span class="line"><span class="selector-tag">th</span> Age</span><br><span class="line">tbody</span><br><span class="line">each val <span class="keyword">in</span> people</span><br><span class="line">tr</span><br><span class="line">td= val.firstName</span><br><span class="line">td= val.title</span><br><span class="line">td= val<span class="selector-class">.age</span></span><br></pre></td></tr></table></figure><h4>Result</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome to Pugzor! <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Laura<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Mrs.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>38<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Gabriel<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Mr. <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>62<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Judi<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Princess<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>44<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Isaiah<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Air Marshall<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>39<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Amber<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Miss.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>69<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Jeremy<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Master<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>92<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Makayla<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Dr.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>15<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Sean<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Mr. <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Lillian<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Mr. <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Brandon<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Doctor<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>88<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Joel<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Miss.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Madeline<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>General<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>67<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Allison<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Mr. <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>21<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Brooke<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Dr.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>27<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Jonathan<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Air Marshall<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>63<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Mrs.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Tristan<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Doctor<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>46<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Kandra<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Doctor<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>47<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Timothy<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Ms.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>83<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Milissa<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Dr.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>68<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Lekisha<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Mrs.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>40<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Connor<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Dr.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>73<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Danielle<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Princess<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>27<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Miss.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Chloe<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Princess<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>85<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>All the features of pug work as expected, including templage inheritance and inline JavaScript code. Take a look at our <a href="https://github.com/AspNetMonsters/pugzor/tree/master/test/pugzore.website" target="_blank" rel="noopener">test website</a> for some examples.</p><h2>Packaging it all up</h2><p>So we reached our goal of creating an alternate view engine for MVC in a single day. We had some time left so we thought we would try to take this one step further and create a NuGet package. There were some challenges here, specifically related to including the required node modules in the NuGet package. Simon is planning to write a separate blog post on that topic.</p><p>You can give it a try yourself. Add a reference to the <code>pugzor.core</code> NuGet package then call <code>.AddPugzor()</code> after <code>.AddMvc()</code> in the <code>Startup.ConfigureServices</code> method.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)</span><br><span class="line">&#123;</span><br><span class="line">    // Add framework services.</span><br><span class="line">    services.AddMvc().AddPugzor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Razor still works as the default but if no Razor view is found, the MVC framework will try using the PugzorViewEngine. If a matching pug template is found, that template will be rendered.</p><p><img src="http://www.davepaquette.com/images/pugzor.png" alt="Pugzor"></p><h2>Wrapping it up</h2><p>We had a blast working on this project. While this started out as a silly excercise, we sort of ended up with something that could be useful. We were really surprised at how easy it was to create a new view engine for MVC. We don't expect that Pugzor will be wildly popular but since it works we thought we would put it out there and see what people think.</p><p>We have some <a href="https://github.com/AspNetMonsters/pugzor/issues" target="_blank" rel="noopener">open issues</a> and some ideas for how to extend the <code>PugzorViewEngine</code>. Let us know what you think or jump in and contribute some code. We accept pull requests :-)</p>]]></content>
    
    <summary type="html">
    
      At the ASP.NET Hackathon in Redmond, we replaced the Razor view engine with Pug. It started off as a joke but it kind of worked okay so we rolled with it.
    
    </summary>
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/categories/ASP-NET-Core/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/tags/ASP-NET-Core/"/>
    
      <category term="MVC" scheme="http://www.westerndevs.com/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title type="html">Loading View Components from a Class Library in ASP.NET Core MVC</title>
    <link href="http://www.westerndevs.com/ASP-NET-Core/View-Components/loading-view-components-from-a-class-library-in-asp-net-core/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/ASP-NET-Core/View-Components/loading-view-components-from-a-class-library-in-asp-net-core/</id>
    <published>2016-07-16T12:36:36.000Z</published>
    <updated>2018-04-12T23:57:35.274Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>In a previous post we explored the new <a href="http://www.davepaquette.com/archive/2016/01/02/goodbye-child-actions-hello-view-components.aspx" target="_blank" rel="noopener">View Component</a> feature of ASP.NET Core MVC. In today's post we take a look at how view components can be implemented in a separate class library and shared across multiple web applications.</p><h2>Creating a class library</h2><p>First, add a  a new .NET Core class library to your solution.</p><p><img src="http://www.davepaquette.com/images/external_view_components/create_new_class_library.png" alt="Add class library"></p><p>This is the class library where we will add our view components but before we can do that we have to add a reference to the MVC and Razor bits.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"NETStandard.Library"</span>: <span class="string">"1.6.0"</span>,</span><br><span class="line">    <span class="string">"Microsoft.AspNetCore.Mvc"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">    <span class="string">"Microsoft.AspNetCore.Razor.Tools"</span>: &#123;</span><br><span class="line">        <span class="string">"version"</span>: <span class="string">"1.0.0-preview2-final"</span>,</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"build"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"tools"</span>: &#123;</span><br><span class="line">    <span class="string">"Microsoft.AspNetCore.Razor.Tools"</span>: <span class="string">"1.0.0-preview2-final"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can add a view component class to the project. I created a simple example view component called <code>SimpleViewComponent</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ViewComponent(Name = <span class="string">"ViewComponentLibrary.Simple"</span>)]</span><br><span class="line">public class SimpleViewComponent : ViewComponent</span><br><span class="line">&#123;</span><br><span class="line">    public IViewComponentResult Invoke(int number)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> View(number + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By convention, MVC would have assigned the name <code>Simple</code> to this view component. This view component is implemented in a class library with the intention of using it across multiple web apps which opens up the possibility of naming conflicts with other view components. To avoid naming conflicts, I overrode the name using the <code>[ViewComponent]</code> attribute and prefixed the name with the name of my class library.</p><p>Next, I added a <code>Default.cshtml</code> view to the <code>ViewComponentLibrary</code> in the <code>Views\Shared\Components\Simple</code> folder.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@model Int32</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    Hello <span class="keyword">from</span> an external View Component!</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;Your number <span class="keyword">is</span> @Model&lt;/h3&gt;</span><br></pre></td></tr></table></figure> <p>For this view to be recognized by the web application, we need to include the <code>cshtml</code> files as embedded resources in the class library. Currently, this is done by adding the following setting to the <code>project.json</code> file.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"buildOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"embed"</span>: <span class="string">"Views/**/*.cshtml"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <h2>Referencing external view components</h2><p>The first step in using the external view components in our web application project is to add a reference to the class library. Once the reference is added, we need tell the Razor view engine that views are stored as resources in the external view library. We can do this by adding some additional configuration code to the <code>ConfigureServices</code> method in <code>Startup.cs</code>. The additional code creates a new <code>EmbeddedFileProvider</code> for the class library then adds that file provider to the <code>RazorViewEngineOptions</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Add framework services.</span></span><br><span class="line">    services.AddApplicationInsightsTelemetry(Configuration);</span><br><span class="line"></span><br><span class="line">    services.AddMvc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Get a reference to the assembly that contains the view components</span></span><br><span class="line">    <span class="keyword">var</span> assembly = <span class="keyword">typeof</span>(ViewComponentLibrary.ViewComponents.SimpleViewComponent).GetTypeInfo().Assembly;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Create an EmbeddedFileProvider for that assembly</span></span><br><span class="line">    <span class="keyword">var</span> embeddedFileProvider = <span class="keyword">new</span> EmbeddedFileProvider(</span><br><span class="line">        assembly,</span><br><span class="line">        <span class="string">"ViewComponentLibrary"</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Add the file provider to the Razor view engine</span></span><br><span class="line">    services.Configure&lt;RazorViewEngineOptions&gt;(options =&gt;</span><br><span class="line">    &#123;                </span><br><span class="line">        options.FileProviders.Add(embeddedFileProvider);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now everything is wired up and we can invoke the view component just like we would for any other view component in our ASP.NET Core MVC application.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"row"</span>&gt;</span><br><span class="line">    @<span class="keyword">await</span> Component.InvokeAsync(<span class="string">"ViewComponentLibrary.Simple"</span>, <span class="keyword">new</span> &#123; number = <span class="number">5</span> &#125;)</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2>Wrapping it up</h2><p>Storing view components in a separate assembly allows them to be shared across multiple projects. It also opens up the possibility of creating a simple plugin architecture for your application. We will explore the plugin idea in more detail in a future post.</p><p>You can take a look at the full source code on <a href="https://github.com/AspNetMonsters/ExternalViewComponents" target="_blank" rel="noopener">GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      In today&#39;s post we take a look at how view components can be implemented in a separate class library and shared across multiple web applications.
    
    </summary>
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/categories/ASP-NET-Core/"/>
    
      <category term="View Components" scheme="http://www.westerndevs.com/categories/ASP-NET-Core/View-Components/"/>
    
    
      <category term="View Components" scheme="http://www.westerndevs.com/tags/View-Components/"/>
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/tags/ASP-NET-Core/"/>
    
      <category term="MVC" scheme="http://www.westerndevs.com/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title type="html">ASP.NET Core Distributed Cache Tag Helper</title>
    <link href="http://www.westerndevs.com/ASP-NET-Core/Tag-Helpers/ASP-NET-Core-Distributed-Cache-Tag-Helper/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/ASP-NET-Core/Tag-Helpers/ASP-NET-Core-Distributed-Cache-Tag-Helper/</id>
    <published>2016-05-22T16:11:17.000Z</published>
    <updated>2018-04-12T23:57:35.274Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>The anxiously awaited ASP.NET Core RC2 has finally landed and with it we have a shiny new tag helper to explorer.</p><p>We previously talked about the <a href="http://www.davepaquette.com/archive/2015/06/03/mvc-6-cache-tag-helper.aspx" target="_blank" rel="noopener">Cache Tag Helper</a> and how it allows you to cache the output from any section of a Razor page. While the Cache Tag Helper is powerful and very useful, it is limited in that it uses an instance of <code>IMemoryCache</code> which stores cache entries in memory in the local process. If the server process restarts for some reason, the contents of the cache will be post. Also, if your deployment consists of multiple servers, each server would have its own cache, each potentially containing different contents.</p><h1>Distributed Cache Tag Helper</h1><p>The cache tag helper left people wanting more. Specifically they wanted to store the cached HTML in a distributed cache like Redis. Instead of complicating the existing Cache Tag Helper, the ASP.NET team enabled this use-case by adding a new <a href="https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.TagHelpers/DistributedCacheTagHelper.cs" target="_blank" rel="noopener">Distributed Cache Tag Helper</a>.</p><p>Using the Distributed Cache Tag Helper is very similar to using the Cache Tag Helper:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributed-cache</span> <span class="attr">name</span>=<span class="string">"MyCache"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Something that will be cached<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    @DateTime.Now.ToString()</span><br><span class="line"><span class="tag">&lt;/<span class="name">distributed-cache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The name property is required and the value should be unique. It is used as a prefix for the cache key. This differs from the Cache Tag Helper which uses an automatically generated unique id based on the location of the cache tag helper in your Razor page. The auto generated approach cannot be used with a distributed cache because Razor would generate different unique ids for each server. You will need to make sure that you use a unique <code>name</code> each time you use the <code>distributed-cache</code> tag helper. If you unintentionally use the same name in multiple places, you might get the same results in 2 places.</p><p>For example, see what happens when 2 <code>distributed-cache</code> tag helpers with the same <code>name</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributed-cache</span> <span class="attr">name</span>=<span class="string">"MyCache"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Something that will be cached<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    @DateTime.Now.ToString()</span><br><span class="line"><span class="tag">&lt;/<span class="name">distributed-cache</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">distributed-cache</span> <span class="attr">name</span>=<span class="string">"MyCache"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This should be different<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    @DateTime.Now.ToString()</span><br><span class="line"><span class="tag">&lt;/<span class="name">distributed-cache</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://www.davepaquette.com/images/distributed-cache-key-collision.png" alt="Accidental Cache Key Collision"></p><p><em>If you are really curious about the how cache keys are generated for both tag helpers, take a look at the <a href="https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.TagHelpers/Cache/CacheTagKey.cs" target="_blank" rel="noopener">CacheTagKey Class</a>.</em></p><p>The <code>vary-by-*</code> and <code>expires-*</code> attributes all work the same as the Cache Tag Helper. You can review those in my <a href="http://www.davepaquette.com/archive/2015/06/03/mvc-6-cache-tag-helper.aspx" target="_blank" rel="noopener">previous post</a>.</p><h2>Configuring the Distributed Cache</h2><p>Unless you specify some additional configuration, the distributed cache tag helper actually uses a local process in memory cache. This might seem a little strange but it does help with the developer workflow. As a developer, I don't need to worry about standing up a distributed cache like Redis just to run the app locally. The intention of course is that a true distributed cache would be used in a staging/production environments.</p><p>The simplest approach to configuring the distributed cache tag helper is to configure a <code>IDistributedCache</code> service in the Startup class. ASP.NET Core ships with 2 distributed cache implementations out of the box: <a href="https://github.com/aspnet/Caching/blob/dev/src/Microsoft.Extensions.Caching.SqlServer/SqlServerCache.cs" target="_blank" rel="noopener">SqlServer</a> and <a href="https://github.com/aspnet/Caching/blob/dev/src/Microsoft.Extensions.Caching.Redis/RedisCache.cs" target="_blank" rel="noopener">Redis</a>.</p><p>As a simple test, let's try specifying a <code>SqlServerCache</code> in the <code>Startup.ConfigureServices</code> method:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton&lt;IDistributedCache&gt;(serviceProvider =&gt;</span><br><span class="line">    <span class="keyword">new</span> SqlServerCache(<span class="keyword">new</span> SqlServerCacheOptions()</span><br><span class="line">    &#123;</span><br><span class="line">        ConnectionString = <span class="string">@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=DistributedCacheTest;Integrated Security=True;"</span>,</span><br><span class="line">        SchemaName = <span class="string">"dbo"</span>,</span><br><span class="line">        TableName = <span class="string">"MyAppCache"</span></span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure><p>Of course, the ConnectionString should be stored in a configuration file but for demonstration purposes I have in-lined it here.</p><p>You will need to create the database and table manually. Here is a script for creating the table, which I extracted from <a href="https://github.com/aspnet/Caching/blob/dev/src/Microsoft.Extensions.Caching.SqlServer/SqlQueries.cs" target="_blank" rel="noopener">here</a>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> MyAppCache(            </span><br><span class="line"><span class="keyword">Id</span> <span class="keyword">nvarchar</span>(<span class="number">449</span>) <span class="keyword">COLLATE</span> SQL_Latin1_General_CP1_CS_AS <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="keyword">Value</span> varbinary(<span class="keyword">MAX</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">ExpiresAtTime datetimeoffset <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">SlidingExpirationInSeconds <span class="built_in">bigint</span> <span class="literal">NULL</span>,</span><br><span class="line">AbsoluteExpiration datetimeoffset <span class="literal">NULL</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> pk_Id PRIMARY <span class="keyword">KEY</span> (<span class="keyword">Id</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> NONCLUSTERED <span class="keyword">INDEX</span> Index_ExpiresAtTime <span class="keyword">ON</span> MyAppCache(ExpiresAtTime)</span><br></pre></td></tr></table></figure><p>Now when I visit the page that contains the <code>distributed-cache</code> tag helper, I get the following error:</p><p><code>InvalidOperationException: Either absolute or sliding expiration needs to be provided.</code></p><p>The SQL Server implementation requires us to specify some form of expiry. No problem, let's just add the those attributes to the tag helper:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributed-cache</span> <span class="attr">name</span>=<span class="string">"MyCacheItem1"</span> <span class="attr">expires-after</span>=<span class="string">"TimeSpan.FromHours(1)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Something that will be cached<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    @DateTime.Now.ToString()</span><br><span class="line"><span class="tag">&lt;/<span class="name">distributed-cache</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">distributed-cache</span> <span class="attr">name</span>=<span class="string">"MyCacheItem2"</span> <span class="attr">expires-sliding</span>=<span class="string">"TimeSpan.FromMinutes(30)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This should be different<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    @DateTime.Now.ToString()</span><br><span class="line"><span class="tag">&lt;/<span class="name">distributed-cache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now the page renders properly and we can see the contents in SQL Server:</p><p><img src="http://www.davepaquette.com/images/sql-server-cache-contents.png" alt="SQL Server Cache Contents"></p><p>Note that since the key is hashed and the value is stored in binary, the contents of the table in SQL server are not human readable.</p><p>For more details on working with a SQL Server or Redis distrubted cache, see the <a href="https://docs.asp.net/en/latest/performance/caching/distributed.html" target="_blank" rel="noopener">official ASP.NET Docs</a>;</p><h2>Even more configuration</h2><p>In some cases, you might want more control over how values are serialized or even how the distributed cache is used by the tag helper. In those cases, you could implement your own <a href="https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.TagHelpers/Cache/IDistributedCacheTagHelperFormatter.cs" target="_blank" rel="noopener">IDistributedCacheTagHelperFormatter</a> and/or <a href="https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.TagHelpers/Cache/IDistributedCacheTagHelperStorage.cs" target="_blank" rel="noopener">IDistributedCacheTagHelperStorage</a>.</p><p>In cases where you need complete control, you could implement your own <a href="https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.TagHelpers/Cache/IDistributedCacheTagHelperService.cs" target="_blank" rel="noopener">IDistributedCacheTagHelperService</a>.</p><p>I suspect that this added level of customization won't be needed by most people.</p><h1>Conclusion</h1><p>The Distributed Cache Tag Helper provides an easy path to caching HTML fragments in a distributed cache. Out of the box, Redis and SQL Server are supported. Over time, I expect that a number of alternative distributed cache implementations will be provided by the community.</p>]]></content>
    
    <summary type="html">
    
      The anxiously awaited ASP.NET Core RC2 has finally landed and with it we have a shiny new tag helper to explorer. In this post we will explore the new Distributed Cache tag helper and how it differs from the already existing Cache tag helper.
    
    </summary>
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/categories/ASP-NET-Core/"/>
    
      <category term="Tag Helpers" scheme="http://www.westerndevs.com/categories/ASP-NET-Core/Tag-Helpers/"/>
    
    
      <category term="Tag Helpers" scheme="http://www.westerndevs.com/tags/Tag-Helpers/"/>
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/tags/ASP-NET-Core/"/>
    
      <category term="MVC" scheme="http://www.westerndevs.com/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title type="html">Submitting Your First Pull Request</title>
    <link href="http://www.westerndevs.com/GitHub/Submitting-Your-First-Pull-request/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/GitHub/Submitting-Your-First-Pull-request/</id>
    <published>2016-01-24T14:32:21.000Z</published>
    <updated>2018-04-12T23:57:35.274Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Originally posted to <a href="http://blogs.msdn.com/b/cdndevs/archive/2016/01/06/submitting-your-first-pull-request.aspx" title="Submitting your first Pull Request - Canadian Developer Connection" target="_blank" rel="noopener">http://blogs.msdn.com/b/cdndevs/archive/2016/01/06/submitting-your-first-pull-request.aspx</a></p><p>Over the last few years, we have seen a big shift in the .NET community towards open source. In addition to a huge number of open source community led projects, we have also seen Microsoft move major portions of the .NET framework over to GitHub.</p><p>With all these packages out in the wild, the opportunities to contribute are endless. The process however can be a little daunting for first timers, especially if you are not using git in your day-to-day work. In this post I will guide you through the process of submitting your first pull request. I will show examples from my experience contributing to the <a href="http://www.htbox.org/" target="_blank" rel="noopener">Humanitarian Toolbox</a>'s <a href="https://github.com/HTBox/allReady" target="_blank" rel="noopener">allReady project</a>. As with all things git related, there is more than one way to do everything. This post will outline the workflow I have been using and should serve as a good starting point for most .NET developers who are interested in getting started with open source projects hosted on GitHub.</p><h2>Installing GitHub for Windows</h2><p>The first step is to install <a href="https://desktop.github.com/" target="_blank" rel="noopener">GitHub for Windows</a>. GitHub's Windows desktop app is great, but the installer also installs the excellent posh-git command line tools. We will be using a combination of the desktop app and the command line tools.</p><h2>Forking a Repo</h2><p>The next step is to fork the repository (<em>repo</em> for short) to which you are hoping to contribute. It is very unlikely that you will have permissions to check in code directly to the actual repo. Those permissions are reserved for project owners. The process instead is to fork the repo. A fork is a copy of the repo that you own and can do whatever you want with. Create a fork by clicking the Fork button on the repo.</p><p><img src="http://www.davepaquette.com/images/firstpr/fork.png" alt="Forking a repo" title="Forking a repo"></p><p>This will create the fork for you. This is where you will be making changes and then submitting a pull request to get your changes merged in to the original repo.</p><p><img src="http://www.davepaquette.com/images/firstpr/yourfork.png" alt="Your forked repo" title="Your fored repo"></p><p>Notice on my fork's master branch where it says <em>This branch is even with HTBox:master</em>. The branch <em>HTBox:master</em> is the master branch from the original repo and is the upstream for my master branch. When GitHub tells me my branch is even with master that means no changes have happened to HTBox:master and no changes have happened to my master branch. Both branches are identical at this point.</p><h2>Cloning your fork to your local machine</h2><p>Next up, you will want to clone the repo to your local machine. Launch GitHub for Windows and sign in with your GitHub account if you have not already done so. Click on the + icon in the top right, select Clone and select the repo that you just forked. Click the big checkmark button at the bottom and select a location to clone the repo on your local disk.</p><p><img src="http://www.davepaquette.com/images/firstpr/cloningyourfork.png" alt="Cloning your fork" title="Cloning your fork"></p><h2>Create a local branch to do your work in</h2><p>You could do all your work in your master branch, but this might be a problem if you intend to submit more than one pull request to the project. You will have trouble working on your second pull request until after your first pull request has been accepted. Instead it is best practice to create a new branch for each pull request you intend to submit.</p><p><em>As a side note, it is also considered best practice to submit pull requests that solve 1 issue at a time. Don't fix 10 separate issues and submit a single pull request that contains all those fixes. That makes it difficult for the project owners to review your submission.</em></p><p>We could use GitHub for Windows to create the branch, but we're going to drop down to the command line here instead. Using the command line to do git operations will give you a better appreciation for what is happening.</p><p>To launch the git command line, select your fork in GitHub for Windows, click on the Settings menu in the top right and select Open in Git Shell.</p><p><img src="http://www.davepaquette.com/images/firstpr/opengitshell.png" alt="Open Git shell" title="Open Git Shell"></p><p>This will open a posh-git shell. From here, type the command <code>git checkout -b MyNewBranch</code>, where MyNewBranch is a descriptive name for your new branch.</p><p><img src="http://www.davepaquette.com/images/firstpr/createnewbranch.png" alt="Create new branch" title="Create new branch"></p><p>This command will create a new branch with the specified name and switch you to that branch. Notice how posh-git gives you a nice indication of what branch you are currently working on.</p><p><em>Advanced Learning</em>: Learn more about git branching with this interactive tutorial <a href="http://pcottle.github.io/learnGitBranching/" target="_blank" rel="noopener">http://pcottle.github.io/learnGitBranching/</a></p><p><em>Pro tip:</em> posh-git has auto complete. Type <code>git ch</code> + <code>tab</code> will autocomplete to <code>git checkout</code>. Press tab multiple times to cycle through available options. This is a great learning tool!</p><h2>Committing and publishing your changes</h2><p>The next step is to commit and publish your changes to GitHub. Make your changes just like you normally would (Enjoy…this is the part where you actually get to write code!). When you are done making your changes, you can view a list of your changes by typing the <code>git status</code> command.</p><p><img src="http://www.davepaquette.com/images/firstpr/gitstatus.png" alt="git status" title="git status"></p><p>To commit your changes, you first need to add them to your current set of changes. To add all your changes, enter the <code>git add –A</code> command. Note that the git add command doesn't actually do anything other than get those changes ready to commit. Once your changes have been added, you can commit your changes using the <code>git commit –m &quot;Your commit message&quot;</code> command.</p><p><img src="http://www.davepaquette.com/images/firstpr/gitcommit.png" alt="git commit" title="git commit"></p><p>If you wanted to commit only some of the files you changed, you would need to add each of the files individually before doing the commit. This can be a little tedious. In this case, you might want to use the GitHub for Windows app. Simply select the files that you want to include, enter your commit message and click the Commit to <em>YourBranch</em> button. This will do both the add and commit operations as a single operation. The GitHub for Windows app also shows you a diff for each file which makes it a great tool for reviewing your changes.</p><p><img src="http://www.davepaquette.com/images/firstpr/reviewchanges.png" alt="Review changes" title="Review changes"></p><p>Now your changes have been committed locally, but they have not been published to GitHub yet. To do this, you need to push your branch to a copy on GitHub. You can do this from the command line by using the <code>git push</code> command.</p><p><img src="http://www.davepaquette.com/images/firstpr/gitpush.png" alt="git push" title="git push"></p><p>Notice that git detected this branch does not exist on GitHub yet and very kindly tells me the command I need to use to create the upstream branch. Alternatively, you could simply use the Publish button in GitHub for Windows.</p><p><img src="http://www.davepaquette.com/images/firstpr/publish.png" alt="Publish from GitHub for Windows" title="Publish from GitHub for Windows"></p><p>Now the branch containing your changes should show up in your fork on the GitHub website.</p><p><img src="http://www.davepaquette.com/images/firstpr/publishedbranch.png" alt="Published branch" title="Published branch"></p><p>GitHub says my branch is 1 commit ahead of HTBox:master. That's what I want to see. I made 1 commit in my branch and no one has made any commits to HTBox:master since I created my fork. That should make my pull request clean and easy to merge. In some cases, HTBox:master will have changed since the time you started working on your branch. We'll take a look at how to handle that situation later. For now let's proceed with creating this pull request.</p><h2>Creating your pull request</h2><p>The next step is to create a pull request so your code can (hopefully) be merged into the original repo.</p><p>To create your pull request, click on the Compare &amp; pull request button that is displayed when viewing your branch on the GitHub website. If for some reason that button is not visible, click the Pull Request link on your branch.</p><p><img src="http://www.davepaquette.com/images/firstpr/createpullrequest.png" alt="Create pull request" title="Create pull request"></p><p>On the Pull Request page, you can scroll down to review the changes you are submitting. For some projects, you will also see a link to guidelines for contributing. Be descriptive in your pull request. Provide information on the change you made so the project owners know exactly what you were trying to accomplish. If there is an issues you are addressing with this pull request you should reference it by number (e.g. #124) in the description of your pull request. If everything looks good, click the Create Pull Request button.</p><p><img src="http://www.davepaquette.com/images/firstpr/enterpullrequestdetails.png" alt="Enter pull request details" title="Enter pull request details"></p><p>Your pull request has now been created and is ready for the project owners to review (and hopefully accept). Some projects will have automated checks that happen for each pull request. allReady has an AppVeyor build that compiles the application and runs unit tests. You should monitor this and ensure that all the checks pass.</p><p><img src="http://www.davepaquette.com/images/firstpr/pullrequestchecks.png" alt="Automated checks on pull requests" title="Automated checks on pull requests"></p><p>If all goes as planned, your pull request will be accepted and you will feel a great sense of accomplishment. Of course, things don't always go as planned. Let's explore how to handle a few common scenarios.</p><h2>Making changes to an existing pull request</h2><p>Often, the project owners will make comments on your pull request and ask you to make some changes. Don't feel bad if this happens…my first pull request to a large project had <a href="https://github.com/aspnet/Mvc/pull/2516" target="_blank" rel="noopener">59 comments</a> and required a fair bit of rework before it was finally merged in to the master branch. When this happens, <strong>don't close the pull request</strong>. Simply make your changes locally, commit them to your local branch, then push those changes to GitHub.</p><p><img src="http://www.davepaquette.com/images/firstpr/pushchangestopullrequest.png" alt="Push changes to an existing pull request" title="Push changes to an existing pull request"></p><p>The push can be done using the GitHub for Windows app by clicking the <em>Sync</em> button.</p><p><img src="http://www.davepaquette.com/images/firstpr/sync.png" alt="Push changes to an existing pull request" title="Push changes to an existing pull request using GitHub for Windows"></p><p>As soon as your changes have been pushed to GitHub the new commit will appear in the pull request. Any required checks will be re-run and the conversation with the project owners can continue. Really that's what a pull request is: An ongoing conversation about a set of proposed changes to the code base.</p><p><img src="http://www.davepaquette.com/images/firstpr/conversation.png" alt="Pull request with multiple changes" title="Pull request with multiple changes"></p><h2>Keeping your fork up to date</h2><p>Another common scenario is that your fork (and branches) become out of date. This happens any time changes are made to the original repo. You can see in this example that 4 commits have been made to HTBox:master since I created my pull request.</p><p><img src="http://www.davepaquette.com/images/firstpr/behindmaster.png" alt="Branch out of date" title="Branch out of date"></p><p>It is a good idea to make sure that your branch is not behind the branch that your pull request will be merged into (in this case HTBox:master). When you branch gets behind, you increase the chances of having merge conflicts in your pull request. Keeping your branch up to date is actually fairly simple but not entirely obvious. A common approach is to click the Update from <em>upstream</em> button in GitHub for Windows. Clicking this button will merge the commits from master into your local branch.</p><p><img src="http://www.davepaquette.com/images/firstpr/merging.png" alt="Merging changes from master" title="Merging changes from master"></p><p>This works, but it's not a very clean. When using this approach, you get these strange &quot;merge remote tracking branch&quot; commits in your branch. I find this can get confusing and messy pretty quick as these additional commits make it difficult to read through your commit history to understand the changes you made in this branch. It is also strange to see a commit with your name on it that doesn't actually relate to any real changes you made to the code.</p><p><img src="http://www.davepaquette.com/images/firstpr/mergecommit.png" alt="Merge commit message" title="Merge commit message"></p><p><strong>I find a better approach is to do a git rebase</strong>. Don't be scared by the new terminology. A rebase is the process of rewinding the changes you made, updating the branch to include the missing commits from another branch, then replaying your commits after those. In my mind this more logically mirrors what you actually want for your pull request. This should also make your changes much easier to review.</p><p>Before you can rebase, you first need to fetch the changes from the upstream (in this case HTBox). Run <code>git fetch HTBox</code>. The fetch itself won't change your branch. It simply ensures that your local git repo has a copy of the changes from HTBox/master. Next, execute <code>git rebase HTBox/master</code>. This will rewind all your changes and then replay them after the changes that happened to HTBox/master.</p><p><img src="http://www.davepaquette.com/images/firstpr/gitrebase.png" alt="git rebase" title="git rebase"></p><p>Luckily, we had no merge conflicts to deal with here so we can proceed with pushing our changes up to GitHub with the <code>git push –f</code> command.</p><p><img src="http://www.davepaquette.com/images/firstpr/forcepush.png" alt="Force push" title="Force push"></p><p>Now when we look at this branch on GitHub, we can see that it is no longer behind the HTBox/master branch.</p><p><img src="http://www.davepaquette.com/images/firstpr/uptodatebranch.png" alt="Updated branch" title="Updated branch"></p><p>Over time, you will also want to keep your master branch up to date. The process here is the same but you usually don't need to use the force flag to push. The force flag is only necessary when you have made changes in that branch.</p><p><img src="http://www.davepaquette.com/images/firstpr/updatingfork.png" alt="Updating fork" title="image"></p><p>_<strong>Caution</strong>: _When you rebase, then <code>push –f</code>, you are rewriting the history for your branch. This normally isn't a problem if you are the only person working on your branch. It can however be a big problem if you are collaborating with another developer on your branch. If you are collaborating with others, the merge approach mentioned earlier (using the <em>Update from</em> button in GitHub for Windows) is a safer option than the rebase option.</p><h2>Dealing with Merge Conflicts</h2><p>Dealing with conflicts is the worst part of any source control system, including git. When I run into this problem I use a combination of the command line and the git tooling built-in to Visual Studio. I like to use Visual Studio for this because the visualization used for resolving conflicts is familiar to me.</p><p>If a merge conflict occurs during a rebase, git will spew out some info for you.</p><p><img src="http://www.davepaquette.com/images/firstpr/mergeconflict.png" alt="Merge conflict" title="image"></p><p>Don't panic. What happens here is the rebase stops at the commit where the merge conflict happened. It is now up to you to decide how you want to handle this merge conflict. Once you have completed the merge, you can then continue the rebase by running the <code>git rebase –continue</code> command. Alternatively, you can cancel everything by running the <code>git rebase –abort</code> command.</p><p>As I said earlier, I like to jump over to Visual Studio to handle the merge conflicts. In Visual Studio, with the solution file for the project open, open the file that has a conflict.</p><p><img src="http://www.davepaquette.com/images/firstpr/conflictedfile.png" alt="File with conflict" title="File with conflict"></p><p>Here, we can see the conflicted area. You could merge it manually here, but there is a much better way. In Visual Studio, open the Team Explorer and select <em>Changes</em>.</p><p><img src="http://www.davepaquette.com/images/firstpr/teamexplorer.png" alt="Visual Studio Team Explorer" title="Visual Studio Team Explorer"></p><p>Visual Studio knows that you are in the middle of a rebase and that you have conflicts.</p><p><img src="http://www.davepaquette.com/images/firstpr/showconflicts.png" alt="Visual Studio Show Conflicts" title="Visual Studio Show Conflicts"></p><p>Click the <em>Conflicts</em> warning and then click the Merge button to resolve merge conflicts for the conflicted file.</p><p><img src="http://www.davepaquette.com/images/firstpr/openmergetool.png" alt="Open merge tool" title="Open merge tool"></p><p>This will open the Merge window where I can select the changes I want to keep and then click the Accept Merge button.</p><p><img src="http://www.davepaquette.com/images/firstpr/threewaymerge.png" alt="Three way merge tool in Visual Studio" title="Three way merge tool in Visual Studio"></p><p>Now, we can continue the rebase operation with <code>git rebase --continue</code>:</p><p><img src="http://www.davepaquette.com/images/firstpr/rebasecontinue.png" alt="git rebase --continue" title="git rebase --continue"></p><p>Finally, a <code>git push –f</code> to push the changes to GitHub and our merge is complete! See…that wasn't so bad was it?</p><h2>Squashing Commits</h2><p>Some project owners will ask you to squash your commits before they will accept your changes. Squashing is the process of combining all your commits into a single commit. Some project owners like this because it keeps the commit log on the master branch nice and clean with a single commit per pull request. Squashing is the subject of much debate but I won't get into that here. If you got through the merging you can handle this too.</p><p>To squash your commits, start by rebasing as described above. Squashing only works if all your commits are replayed AFTER all the changes in the branch that the pull request will be merged into. Next, rebase again with the <code>interactive (-i)</code> flag, specifying the number of changes you will be squashing using HEAD~x. In my case, that is 2 commits. This will open Notepad with a list of the last <em>x</em> commits and some instructions on how to specify the commits you will be squashing.</p><p><img src="http://www.davepaquette.com/images/firstpr/squash.png" alt="Squashing commits" title="Squashing commits"></p><p>Edit the file, save it and close it. Git will continue the rebase process and open a second file in Notepad. This file will allow you to modify the commit messages.</p><p><img src="http://www.davepaquette.com/images/firstpr/modifycommitmessages.png" alt="Modify commit messages" title="Modify commit messages"></p><p>I usually leave this file alone and close it. This completes the squashing.</p><p><img src="http://www.davepaquette.com/images/firstpr/squashcomplete.png" alt="Squash complete" title="Squash complete!"></p><p>Finally, run the <code>git push –f</code> command to push these changes to GitHub. Your branch (and associated pull request) should now show a single commit with all your changes.</p><p><img src="http://www.davepaquette.com/images/firstpr/squashresults.png" alt="Results of squashing" title="Results of squashing"></p><h2>Pull request successfully merged and closed!</h2><p><img src="http://www.davepaquette.com/images/firstpr/accepted.png" alt="Mission Accomplished" title="Mission Accomplished"></p><p>Congrats! You know have the tools you need to handle most scenarios you might encounter when contributing to an open source project on GitHub. It's time to impress your friends with your new found knowledge of rebasing, merging and squashing! Get out there and start contributing. If you're looking for a project to get started on, check out the list at <a href="http://up-for-grabs.net" target="_blank" rel="noopener">http://up-for-grabs.net</a>.</p>]]></content>
    
    <summary type="html">
    
      Over the last few years, we have seen a big shift in the .NET community towards open source. In addition to a huge number of open source community led projects, we have also seen Microsoft move major portions of the .NET framework over to GitHub. With all these packages out in the wild, the opportunities to contribute are endless. In this post I will guide you through the process of submitting your first pull request.
    
    </summary>
    
      <category term="GitHub" scheme="http://www.westerndevs.com/categories/GitHub/"/>
    
    
      <category term="GitHub" scheme="http://www.westerndevs.com/tags/GitHub/"/>
    
      <category term="Open Source" scheme="http://www.westerndevs.com/tags/Open-Source/"/>
    
      <category term="Git" scheme="http://www.westerndevs.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title type="html">Goodbye Child Actions, Hello View Components</title>
    <link href="http://www.westerndevs.com/MVC-6/View-Components/goodbye-child-actions-hello-view-components/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/MVC-6/View-Components/goodbye-child-actions-hello-view-components/</id>
    <published>2016-01-02T15:42:41.000Z</published>
    <updated>2018-04-12T23:57:35.274Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>In previous versions of MVC, we used <a href="http://haacked.com/archive/2009/11/18/aspnetmvc2-render-action.aspx/" target="_blank" rel="noopener">Child Actions</a> to build reusable components / widgets that consisted of both Razor markup and some backend logic. The backend logic was implemented as a controller action and typically marked with a <code>[ChildActionOnly]</code> attribute. Child actions are extremely useful but as some have pointed out, it is easy to <a href="http://www.khalidabuhakmeh.com/obscure-bugs-asp-net-mvc-child-actions" target="_blank" rel="noopener">shoot yourself in the foot</a>.</p><p><strong>Child Actions do not exist in MVC 6</strong>. Instead, we are encouraged to use the new View Component feature to support this use case. Conceptually, view components are a lot like child actions but they are a lighter weight and no longer involve the lifecycle and pipeline related to a controller. Before we get into the differences, let's take a look at a simple example.</p><h1>A simple View Component</h1><p>View components are made up of 2 parts: A view component class and a razor view.</p><p>To implement the view component class, inherit from the base <code>ViewComponent</code> and implement an <code>Invoke</code> or <code>InvokeAsync</code> method. This class can be anywhere in your project. A common convention is to place them in a ViewComponents folder. Here is an example of a simple view component that retrieves a list of articles to display in a <em>What's New</em> section.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyWebApplication.ViewComponents</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WhatsNewViewComponent</span> : <span class="title">ViewComponent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IArticleService _articleService;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WhatsNewViewComponent</span>(<span class="params">IArticleService articleService</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            _articleService = articleService;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IViewComponentResult <span class="title">Invoke</span>(<span class="params"><span class="keyword">int</span> numberOfItems</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> articles = _articleService.GetNewArticles(numberOfItems);</span><br><span class="line">            <span class="keyword">return</span> View(articles);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Much like a controller action, the Invoke method of a view component simply returns a view. If no view name is explicitly specified, the default <code>Views\Shared\Components\ViewComponentName\Default.cshtml</code> is used. In this case, <code>Views\Shared\Components\WhatsNew\Default.cshtml</code>. Note there are a ton of conventions used in view components. I will be covering these in a future blog post.</p><figure class="highlight html"><figcaption><span>Views\Shared\Components\WhatsNew\Default.cshtml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@model IEnumerable<span class="tag">&lt;<span class="name">Article</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>What's New<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">@foreach (var article in Model)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">asp-controller</span>=<span class="string">"Article"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">asp-action</span>=<span class="string">"View"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">asp-route-id</span>=<span class="string">"@article.Id"</span>&gt;</span>@article.Title<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>To use this view component, simply call <code>@Component.Invoke</code> from any view in your application. For example, I added this to the Home/Index view:</p><figure class="highlight html"><figcaption><span>Views\Home\Index.cshtml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span></span><br><span class="line">    @Component.Invoke("WhatsNew", 5)</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The first parameter to <code>@Component.Invoke</code> is the name of the view component. Any additional parameters will be passed to the <code>Invoke</code> method that has a matching signature. In this case, we specified a single <code>int</code>, which matches the <code>Invoke(int numberOfItems)</code> method of the <code>WhatsNewViewComponent</code> class.</p><p><img src="http://www.davepaquette.com/images/whats-new-view-component.png" alt="What's New View Component"></p><h2>How is this different?</h2><p>So far this doesn't really look any different from what we had with Child Actions. There are however some major differences here.</p><h3>No Model Binding</h3><p>With view components, parameters are passed directly to your view component when you call <code>@Component.Invoke()</code> or <code>@Component.InvokeAsync()</code> in your view. There is no model binding needed here since the parameters are not coming from the HTTP request. You are calling the view component directly using C#. No model binding means you can have overloaded <code>Invoke</code> methods with different parameter types. This is something you can't do in controllers.</p><h3>No Action Filters</h3><p>View components don't take part in the controller lifecycle. This means you can't add action filters to a view component. While this might sound like a limitation, it is actually an area that caused problems for a lot of people. Adding an action filter to a child action would sometimes have unintended consequences when the child action was called from certain locations.</p><h3>Not reachable from HTTP</h3><p>A view component never directly handles an HTTP request so you can't call directly to a view component from the client side. You will need to wrap the view component with a controller if your application requires this behaviour.</p><h2>What is available?</h2><h3>Common Properties</h3><p>When you inherit from the base <code>ViewComponent</code> class, you get access to a few properties that are very similar to controllers:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ViewComponent</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ViewComponent</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ViewComponent</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> HttpContext HttpContext &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> ModelStateDictionary ModelState &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> HttpRequest Request &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> RouteData RouteData &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> IUrlHelper Url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> IPrincipal User &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">Dynamic</span>]    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">dynamic</span> ViewBag &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    [<span class="meta">ViewComponentContext</span>]</span><br><span class="line">    <span class="keyword">public</span> ViewComponentContext ViewComponentContext &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> ViewContext ViewContext &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> ViewDataDictionary ViewData &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> ICompositeViewEngine ViewEngine &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Most notably, you can access information about the current user from the <code>User</code> property and information about the current request from the <code>Request</code> property. Also, route information can be accessed from the <code>RouteData</code> property. You also have the <code>ViewBag</code> and <code>ViewData</code>. Note that the ViewBag / ViewData are shared with the controller. If you set ViewBag property in your controller action, that property will be available in any ViewComponent that is invoked by that controller action's view.</p><h3>Dependency Injection</h3><p>Like controllers, view components also take part in dependency injection so any other information you need can simply be injected to the view component. In the example above, we injected the <code>IArticleService</code> that allowed us to access articles form some remote source. Anything that you could inject into a controller can also be injected into a view component.</p><h1>Wrapping it up</h1><p>View components are a powerful new feature for creating reusable widgets in MVC 6. Consider using View Components any time you have complex rendering logic that also requires some backend logic.</p>]]></content>
    
    <summary type="html">
    
      In previous versions of MVC, we used Child Actions to build reusable components. Child Actions do not exist in MVC 6. Instead, we are encouraged to use the new View Component feature to support this use case.
    
    </summary>
    
      <category term="MVC 6" scheme="http://www.westerndevs.com/categories/MVC-6/"/>
    
      <category term="View Components" scheme="http://www.westerndevs.com/categories/MVC-6/View-Components/"/>
    
    
      <category term="ASP.NET 5" scheme="http://www.westerndevs.com/tags/ASP-NET-5/"/>
    
      <category term="MVC 6" scheme="http://www.westerndevs.com/tags/MVC-6/"/>
    
      <category term="View Components" scheme="http://www.westerndevs.com/tags/View-Components/"/>
    
  </entry>
  
  <entry>
    <title type="html">Complex Custom Tag Helpers in MVC 6</title>
    <link href="http://www.westerndevs.com/MVC-6/Tag-Helpers/complex-custom-tag-helpers-in-mvc-6/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/MVC-6/Tag-Helpers/complex-custom-tag-helpers-in-mvc-6/</id>
    <published>2015-12-28T23:00:00.000Z</published>
    <updated>2018-04-12T23:57:35.270Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>In a previous blog post we talked about how to create <a href="http://www.davepaquette.com/archive/2015/06/22/creating-custom-mvc-6-tag-helpers.aspx" target="_blank" rel="noopener">a simple tag helper</a> in MVC 6. In today's post we take this one step further and create a more complex tag helper that is made up of multiple parts.</p><h2>A Tag Helper for Bootstrap Modal Dialogs</h2><p>Creating a <a href="http://getbootstrap.com/javascript/#static-example" target="_blank" rel="noopener">modal dialog</a> in bootstrap requires some verbose html.</p><figure class="highlight html"><figcaption><span>Bootstrap Modal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span>&gt;</span>Modal title<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>One fine body&amp;hellip;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-dialog --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></span><br></pre></td></tr></table></figure><p>Using a tag helper here would help simplify the markup but this is a little more complicated than the Progress Bag example. In this case, we have HTML content that we want to add in 2 different places: the <code>&lt;div class=&quot;modal-body&quot;&gt;&lt;/div&gt;</code> element and the <code>&lt;div class=&quot;modal-footer&quot;&gt;&lt;/div&gt;</code> element.</p><p>The solution here wasn't immediately obvious. I had a chance to talk to <a href="https://twitter.com/ntaylormullen" target="_blank" rel="noopener">Taylor Mullen</a> at the MVP Summit ASP.NET Hackathon in November and he pointed me in the right direction. The solution is to use 3 different tag helpers that can communicate with each other through the <code>TagHelperContext</code>.</p><p>Ultimately, we want our tag helper markup to look like this:</p><figure class="highlight html"><figcaption><span>Bootstrap Modal using a Tag Helper</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modal</span> <span class="attr">title</span>=<span class="string">"Modal title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modal-body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>One fine body&amp;hellip;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modal-body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modal-footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modal-footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This solution uses 3 tag helpers: <code>modal</code>, <code>modal-body</code> and <code>modal-footer</code>. The contents of the <code>modal-body</code> tag will be placed inside the <code>&lt;div class=&quot;modal-body&quot;&gt;&lt;/div&gt;</code> while the contents of the <code>&lt;modal-footer&gt;</code> tag will be placed inside the <code>&lt;div class=&quot;modal-footer&quot;&gt;&lt;/div&gt;</code> element. The <code>modal</code> tag helper is the one that will coordinate all this.</p><h2>Restricting Parents and Children</h2><p>First things first, we want to make sure that <code>&lt;modal-body&gt;</code> and <code>&lt;modal-footer&gt;</code> can only be placed inside the <code>&lt;modal&gt;</code> tag and that the <code>&lt;modal&gt;</code> tag can only contain those 2 tags. To do this, we set the <code>RestrictChildren</code> attribute on the modal tag helper and the <code>ParentTag</code> property of the <code>HtmlTargetElement</code> attribute on the modal body and modal footer tag helpers:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">RestrictChildren(<span class="meta-string">"modal-body"</span>, <span class="meta-string">"modal-footer"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ModalTagHelper</span> : <span class="title">TagHelper</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">HtmlTargetElement(<span class="meta-string">"modal-body"</span>, ParentTag = <span class="meta-string">"modal"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ModalBodyTagHelper</span> : <span class="title">TagHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">HtmlTargetElement(<span class="meta-string">"modal-footer"</span>, ParentTag = <span class="meta-string">"modal"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ModalFooterTagHelper</span> : <span class="title">TagHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now if we try to put any other tag in the <code>&lt;modal&gt;</code> tag, Razor will give me a helpful error message.</p><p><img src="http://www.davepaquette.com/images/restrict-children-razor-error.png" alt="Restrict children" title="Restricting child elements in tag helpers"></p><h2>Getting contents from the children</h2><p>The next step is to create a context class that will be used to keep track of the contents of the 2 child tag helpers.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ModalContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> IHtmlContent Body &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> IHtmlContent Footer &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At the beginning of the ProcessAsync method of the Modal tag helper, create a new instance of <code>ModalContext</code> and add it to the current <code>TagHelperContext</code>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ProcessAsync</span>(<span class="params">TagHelperContext context, TagHelperOutput output</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> modalContext = <span class="keyword">new</span> ModalContext();</span><br><span class="line">    context.Items.Add(<span class="keyword">typeof</span>(ModalTagHelper), modalContext);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, in the modal body and modal footer tag helpers we will get the instance of that <code>ModalContext</code> via the <code>TagHelperContext</code>. Instead of rendering the output, these child tag helpers will set the the <code>Body</code> and <code>Footer</code> properties of the <code>ModalContext</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HtmlTargetElement(<span class="meta-string">"modal-body"</span>, ParentTag = <span class="meta-string">"modal"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ModalBodyTagHelper</span> : <span class="title">TagHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ProcessAsync</span>(<span class="params">TagHelperContext context, TagHelperOutput output</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> childContent = <span class="keyword">await</span> output.GetChildContentAsync();</span><br><span class="line">        <span class="keyword">var</span> modalContext = (ModalContext)context.Items[<span class="keyword">typeof</span>(ModalTagHelper)];</span><br><span class="line">        modalContext.Body = childContent;</span><br><span class="line">        output.SuppressOutput();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Back in the modal tag helper, we call <code>output.GetChildContentAsync()</code> which will cause the child tag helpers to execute and set the properties on the <code>ModalContext</code>. After that, we just set the output as we normally would in a tag helper, placing the <code>Body</code> and <code>Footer</code> in the appropriate elements.</p><figure class="highlight html"><figcaption><span>Modal tag helper</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output)</span><br><span class="line">&#123;</span><br><span class="line">    var modalContext = new ModalContext();</span><br><span class="line">    context.Items.Add(typeof(ModalTagHelper), modalContext);</span><br><span class="line"></span><br><span class="line">    await output.GetChildContentAsync();</span><br><span class="line"></span><br><span class="line">    var template =</span><br><span class="line">$@"<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'modal-dialog'</span> <span class="attr">role</span>=<span class="string">'document'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'modal-content'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'modal-header'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span> = <span class="string">'button'</span> <span class="attr">class</span>=<span class="string">'close'</span> <span class="attr">data-dismiss</span>=<span class="string">'modal'</span> <span class="attr">aria-label</span>=<span class="string">'Close'</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">'true'</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">'modal-title'</span> <span class="attr">id</span>=<span class="string">'&#123;context.UniqueId&#125;Label'</span>&gt;</span>&#123;Title&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'modal-body'</span>&gt;</span>";</span><br><span class="line"></span><br><span class="line">    output.TagName = "div";</span><br><span class="line">    output.Attributes["role"] = "dialog";</span><br><span class="line">    output.Attributes["id"] = Id;</span><br><span class="line">    output.Attributes["aria-labelledby"] = $"&#123;context.UniqueId&#125;Label";</span><br><span class="line">    output.Attributes["tabindex"] = "-1";</span><br><span class="line">    var classNames = "modal fade";</span><br><span class="line">    if (output.Attributes.ContainsName("class"))</span><br><span class="line">    &#123;</span><br><span class="line">        classNames = string.Format("&#123;0&#125; &#123;1&#125;", output.Attributes["class"].Value, classNames);</span><br><span class="line">    &#125;</span><br><span class="line">    output.Attributes["class"] = classNames;</span><br><span class="line">    output.Content.AppendHtml(template);</span><br><span class="line">    if (modalContext.Body != null)</span><br><span class="line">    &#123;</span><br><span class="line">        output.Content.Append(modalContext.Body); //Setting the body contents</span><br><span class="line">    &#125;</span><br><span class="line">    output.Content.AppendHtml("<span class="tag">&lt;/<span class="name">div</span>&gt;</span>");</span><br><span class="line">    if (modalContext.Footer != null)</span><br><span class="line">    &#123;</span><br><span class="line">        output.Content.AppendHtml("<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'modal-footer'</span>&gt;</span>");</span><br><span class="line">        output.Content.Append(modalContext.Footer); //Setting the footer contents</span><br><span class="line">        output.Content.AppendHtml("<span class="tag">&lt;/<span class="name">div</span>&gt;</span>");</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    output.Content.AppendHtml("<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>");</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>Conclusion</h2><p>Composing complex tag helpers with parent / child relationships is fairly straight forward. In my opinion, the approach here is much easier to understand than the &quot;multiple transclusion&quot; approach used to solve the same problem in Angular 1. It would be easy to unit test and as always, Visual Studio provides error messages directly in the HTML editor to guide anyone who is using your tag helper.</p><p>You can check out the full source code on the <a href="https://github.com/dpaquette/TagHelperSamples" target="_blank" rel="noopener">Tag Helper Samples repo</a>.</p>]]></content>
    
    <summary type="html">
    
      How to build complex tag helper that are made up of multiple parts in MVC 6
    
    </summary>
    
      <category term="MVC 6" scheme="http://www.westerndevs.com/categories/MVC-6/"/>
    
      <category term="Tag Helpers" scheme="http://www.westerndevs.com/categories/MVC-6/Tag-Helpers/"/>
    
    
      <category term="ASP.NET MVC" scheme="http://www.westerndevs.com/tags/ASP-NET-MVC/"/>
    
      <category term="ASP.NET 5" scheme="http://www.westerndevs.com/tags/ASP-NET-5/"/>
    
      <category term="MVC 6" scheme="http://www.westerndevs.com/tags/MVC-6/"/>
    
      <category term="VS 2015" scheme="http://www.westerndevs.com/tags/VS-2015/"/>
    
      <category term="Tag Helpers" scheme="http://www.westerndevs.com/tags/Tag-Helpers/"/>
    
  </entry>
  
  <entry>
    <title type="html">My Hasty Move to Hexo</title>
    <link href="http://www.westerndevs.com/hexo/my-hasty-move-to-hexo/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/hexo/my-hasty-move-to-hexo/</id>
    <published>2015-12-28T22:00:00.000Z</published>
    <updated>2018-04-12T23:57:35.274Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>As I mentioned in my last post, I had some downtime on my blog after <a href="http://davepaquette.com/archive/2015/12/03/the-case-of-the-disappearing-database.aspx" target="_blank" rel="noopener">my database mysteriously disappeared</a>.</p><p>I have meant for some time now to move my blog to something a little more stable. Wordpress is a fine platform but really overkill for what I need. After moving all my comments to <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> earlier this year I really had no need at all for a database backend. More importantly, I found it difficult to fine-tune things in Wordpress. Not because it is necessarily difficult to do these things in Wordpress but because have absolutely no interest in learning php.</p><h2>A Quick Survey</h2><p>I wanted to move to a statically generated site. I like writing my posts in Markdown and I like the simplicity of a statically generated site. I had a quick look at <a href="https://www.staticgen.com/" target="_blank" rel="noopener">this site</a> that provides a list of the most popular static site generators.</p><p>Jekyll is definitely a great option and seems to be the most popular. At the time, we were using it over at <a href="http://www.westerndevs.com">Western Devs</a>. The main problem I have with Jekyll is that it is a bit of a pain to get working on Windows.</p><p>I noticed a handy Language filter on the site and picked .NET. There are a few options there but nothing that seems to have any great traction.</p><p>Next I picked JavaScript/Node. I am reasonably proficient at JavaScript and I use Node for <a href="http://www.davepaquette.com/categories/Web-Dev/" target="_blank" rel="noopener">front-end web dev</a> tasks every day. In that list, Hexo seemed to be the most popular. After polling the group at Western Devs I found out that <a href="http://www.westerndevs.com/bios/david_wesst/">David Wesst</a> was also using Hexo. This is great for me because Wessty is our resident Node / JavaScript expert. With an expert to fall back on in an emergency situation, I forged ahead in my move to Hexo.</p><h2>Moving from Wordpress</h2><p>Hexo provides a plugin for importing from Wordpress. All I did here was followed the steps in the <a href="https://hexo.io/docs/migration.html#WordPress" target="_blank" rel="noopener">migration documentation</a>. All my posts came across as expected. The only thing that bothered me with the posts is that I lost syntax highlighting on my code blocks. Fixing this was a bit of a manual process, wrapping my code blocks as follows:</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">codeblock</span> lang:html %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endcodeblock</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p>I did this for my 40 most popular blog posts which covers about 80% of the traffic to my blog. Good enough for me.</p><p>Next, I needed to pull down my images. I serve my images on my blog site (I know...I should be hosting this somewhere else like blob storage or imgr). To fix this, I simply used FTP to copy the images from down from my old site and put them in the Hexo <code>source</code> folder. I my case that was the <code>source\wp-content\uploads</code> folder.</p><h2>Deploying to Azure</h2><p>I decided to keep my blog hosted in Azure. To deploy to Azure using Hexo, I am using the <a href="https://hexo.io/docs/deployment.html#Git" target="_blank" rel="noopener">git deploy method</a>. With this method, anytime I call <code>hexo deploy --generate</code>, Hexo will generate my site and then commit the generated site to a particular branch in my git repository. I then use the <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-publish-source-control/" target="_blank" rel="noopener">Web App continuous deployment hooks</a> in Azure to automatically update the site whenever a change is pushed to that branch.</p><h2>Some Issues with Hexo</h2><p>Since I moved my blog over, WesternDevs has also <a href="http://www.westerndevs.com/jekyll/hexo/Migrating-from-Jekyll-to-Hexo/">moved to Hexo</a> as part of a big site redesign. <a href="http://www.westerndevs.com/bios/kyle_baley/">Kyle Baley</a> has done a good job of documenting some of the <a href="http://www.westerndevs.com/jekyll/hexo/Migrating-from-Jekyll-to-Hexo-Part-2/">issues we encountered</a> along the way.</p><p>I ran into a few more specific issues. First of all, I didn't want to break all my old links so I kept the same permalinks as my old blog. The challenge with that is that each url ends in .aspx. Weird right...my old blog was Wordpress (php) but before Wordpress I was on geekswithblogs which was using some ASP.NET based blogging engine. So here I am in 2015 with a statically generated blog that is created using Node and is hosted in Azure that for some reason has <code>.aspx</code> file endings. The problem with this was that Aure uses IIS and tries to process the <code>aspx</code> files using the ASP.NET page handlers. Initially everything looked okay. The pages were still being served but some of the characters were not encoded properly. The solution here was to add a <code>web.config</code> to my Hexo <code>source</code> folder. In the <code>web.config</code> I was able to turn off the ASP.NET page handlers and tell IIS that <code>.aspx</code> pages should be treated as static content:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">handlers</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">remove</span> <span class="attr">name</span>=<span class="string">"PageHandlerFactory-ISAPI-2.0-64"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">remove</span> <span class="attr">name</span>=<span class="string">"PageHandlerFactory-ISAPI-2.0"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">remove</span> <span class="attr">name</span>=<span class="string">"PageHandlerFactory-Integrated"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">remove</span> <span class="attr">name</span>=<span class="string">"PageHandlerFactory-ISAPI-4.0_32bit"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">remove</span> <span class="attr">name</span>=<span class="string">"PageHandlerFactory-Integrated-4.0"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">remove</span> <span class="attr">name</span>=<span class="string">"PageHandlerFactory-ISAPI-4.0_64bit"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">handlers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">staticContent</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">clientCache</span> <span class="attr">cacheControlCustom</span>=<span class="string">"public"</span> <span class="attr">cacheControlMode</span>=<span class="string">"UseMaxAge"</span> <span class="attr">cacheControlMaxAge</span>=<span class="string">"7.00:00:00"</span> /&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">".aspx"</span> <span class="attr">mimeType</span>=<span class="string">"text/html"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">".eot"</span> <span class="attr">mimeType</span>=<span class="string">"application/vnd.ms-fontobject"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">".ttf"</span> <span class="attr">mimeType</span>=<span class="string">"application/octet-stream"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">".svg"</span> <span class="attr">mimeType</span>=<span class="string">"image/svg+xml"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">".woff"</span> <span class="attr">mimeType</span>=<span class="string">"application/font-woff"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">".woff2"</span> <span class="attr">mimeType</span>=<span class="string">"application/font-woff2"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rewrite</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">"RSSRewrite"</span> <span class="attr">patternSyntax</span>=<span class="string">"ExactMatch"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">"feed"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">"Rewrite"</span> <span class="attr">url</span>=<span class="string">"atom.xml"</span> <span class="attr">appendQueryString</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">"RssFeedwithslash"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">"feed/"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">"Rewrite"</span> <span class="attr">url</span>=<span class="string">"atom.xml"</span> <span class="attr">appendQueryString</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rewrite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In the <code>web.config</code> I also added a rewrite rule to preserve the old RSS feed link.</p><h2>Triggering a mass migration</h2><p>While not perfect, I have been happy with my experience migrating to Hexo. Overall, I was able to complete my initial migration within a few hours. Converting older posts to use syntax highlighting took a litte longer but I was able to do that in phases.</p><p>I talked about my experience over at Western Devs and this seems to have triggered a few of us to also move our blogs over to Hexo. Hopefully that decision does come back to bite me later...so far it is working out well.</p>]]></content>
    
    <summary type="html">
    
      I have meant for some time now to move my blog to something a little more stable. Wordpress is a fine platform but really overkill for what I need.
    
    </summary>
    
      <category term="hexo" scheme="http://www.westerndevs.com/categories/hexo/"/>
    
    
      <category term="blogging" scheme="http://www.westerndevs.com/tags/blogging/"/>
    
      <category term="azure" scheme="http://www.westerndevs.com/tags/azure/"/>
    
      <category term="hexo" scheme="http://www.westerndevs.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title type="html">The Case of the Disappearing Database</title>
    <link href="http://www.westerndevs.com//case-of-the-disappearing-database/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//case-of-the-disappearing-database/</id>
    <published>2015-12-03T21:29:09.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Something scary happened last week. The database backing my blog disappeared from my Azure account.</p><a id="more"></a><p><strong>Some background</strong>: At the time, my blog was a Wordpress site hosted as an Azure Web Site with a MySQL database hosted by Azure Marketplace provider ClearDB.</p><h2>Series of events</h2><p>At approximately 12:01 PM I received an alert from Azure that my blog was returning HTTP 500 errors. I quickly checked the site to see what was happening and I was seeing the dreaded &quot;Error establishing a connection to the database&quot; message. I had seen this in the past because I was hosting on a very small MySQL instance. It was not entirely uncommon to exceed the maximum number of connections to my database. The thing is that I had recently upgraded to a larger database instance specifically to avoid this problem.</p><p>So...I logged in to the Azure Portal to investigate. To my horror, the MySql database for my blog was nowhere to be found!!! It was gone from the Azure Portal entirely and I couldn't find it on the ClearDB website either. I am the only person who has access to this Azure account and I know that I didn't delete it.</p><p>I quickly opened an Azure support ticket and contacted ClearDB to see if either company could tell me what happened to my database.</p><p>ClearDB actually responded quickly:</p><blockquote><p>Our records indicate that a remote call from Azure at Wed, 25 Nov 2015 12:00:34 -0600 was issued to us to deprovision the database</p></blockquote><p>Ummm WTF! I know I didn't delete the database. It seems that there is some kind of bug in the integration between Azure and ClearDB. In the mean time, Azure Support eventually replied with the following:</p><blockquote><p>I have reviewed your case and have adjusted the severity to match the request. Sev A is reserved for situations that involve a system, network, server, or critical program down that severely affects production or profitability. This case is set to severity B with updates every 24 hours or sooner.</p></blockquote><p>After nearly a week, I received another update from Azure support:</p><blockquote><p>I have engaged our Engineering Team already to investigate on this issue and currently waiting for an update from them. Our Engineering Team would require 5 to 7 business days to investigate the issue, I will keep you posted as soon as I hear from them.</p></blockquote><p>I am curious to see what the Engineering Team comes back with. I will update this post if / when I hear more.</p><h2>Restoring from backup</h2><p>With my database gone, my only choice was to restore from backup. This should have been an easy task. Unfortunately, my automated backup wasn't actually running as expected and my most recent backup was 7 months old. I had all my individual posts in Live Writer <code>wpost</code> files but republishing those manually would have taken me over a week.</p><!--more--><p>In the end, ClearDB was very helpful and was able to restore my database from their internal backups. As a result, my blog was down for a little under 24 hours.</p><h2>Lessons learned</h2><p>These were hard lessons for me to learn because I already knew these things. Problem was that I wasn't treating my blog like the production system that it is.</p><ul><li><p>Don't trust the cloud-based backups. ClearDB has automated periodic backups but I lost access to those when my database was mysteriously deleted. Have a backup held offsite. That's what my Wordpress backups were supposed to do for me, which brings me to my second point.</p></li><li><p>Test your backups periodically. I had no idea my backups weren't working until it was too late.</p></li><li><p>Complexity kills. I have a simple blog and my comments are managed by Disqus. There is really no reason I should need a relational database for this. The MySQL database here has been a constant source of failure on my blog.</p></li></ul><h2>Moving on</h2><p>Once my blog was restored I quickly started a migration over to Hexo. I will blog more about this process shortly.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Something scary happened last week. The database backing my blog disappeared from my Azure account.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Realistic Sample Data With GenFu</title>
    <link href="http://www.westerndevs.com//realistic-sample-data-with-genfu/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//realistic-sample-data-with-genfu/</id>
    <published>2015-11-16T18:47:02.000Z</published>
    <updated>2018-04-12T23:57:35.290Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Last week, I had the opportunity to spend some time hacking with my good friend <a href="http://jameschambers.com/" target="_blank" rel="noopener">James Chambers</a>. One of the projects we worked on is his brainchild: <a href="https://github.com/MisterJames/GenFu" target="_blank" rel="noopener">GenFu</a></p><a id="more"></a><blockquote><p>GenFu is a test and prototype data generation library for .NET apps. It understands different topics – such as &quot;contact details&quot; or &quot;blog posts&quot; and uses that understanding to populate commonly named properties using reflection and an internal database of values or randomly created data.</p></blockquote><p>As a quick sample, I attempted to replace the Sample Data Generator in the ASP.NET5 Music Store app with GenFu. With the right GenFu configuration, it worked like magic and I was able to remove over 700 lines of code!</p><p>As part of that process, it became clear that our documentation related to configuring more complex scenarios was slightly lacking. We are working on creating official project documentation. In the mean time, this post can serve as the unofficial documentation for GenFu.</p><h2>Installing GenFu</h2><p>GenFu is available via <a href="http://nuget.org/packages/GenFu" target="_blank" rel="noopener">NuGet</a> and can be added to any .NET 4.5, 4.6, or aspnet5 project.</p><blockquote><p>Install-Package GenFu</p></blockquote><h2>Basic Usage</h2><p>Let's say you have a simple Contact class as follows:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Contact</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> EmailAdress &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> PhoneNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$"<span class="subst">&#123;Id&#125;</span>: <span class="subst">&#123;FirstName&#125;</span> <span class="subst">&#123;LastName&#125;</span> - <span class="subst">&#123;EmailAdress&#125;</span> - <span class="subst">&#123;PhoneNumber&#125;</span>"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To generate a list of random people using the GenFu defaults, simply call the <code>A.ListOf</code> method:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = A.ListOf&lt;Contact&gt;();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> person <span class="keyword">in</span> people)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(person.ToString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This simple console app will output the following:</p><p><img src="http://www.davepaquette.com/wp-content/uploads/2015/11/image_thumb.png" alt="image" title="image"></p><p>That was easy, and the data generally looks pretty realistic. The default is to generate 25 objects. If you want more (or less), you can use an overload of the <code>ListOf</code> method to specify the number of objects you want. Okay, but what if the defaults aren't exactly what you wanted? That's where GenFu property filler configuration comes in.</p><h2>Configuring Property Fillers</h2><p>GenFu has a fluent API that lets you configure exactly how your object's properties should be filled.</p><h3>Manually Overriding Property Fillers</h3><p>Let's start with a very simple example. In the example above, the Id is populated with random values. That behaviour might be fine for you, but if you are using GenFu to generate random data to seed a database this will probably cause problems. In this case we would want the Id property to be always set to 0 so the database can automatically generate unique ids.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A.Configure&lt;Contact&gt;()</span><br><span class="line">            .Fill(c =&gt; c.Id, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> people = A.ListOf&lt;Contact&gt;();</span><br></pre></td></tr></table></figure><p>Now all the Ids are 0 and the objects would be safe to save to a database:</p><p><img src="http://www.davepaquette.com/wp-content/uploads/2015/11/image_thumb1.png" alt="image" title="image"></p><p>Another option is to use a method to fill a property. This can be a delegate or any other method that returns the correct type for the property you are configuring:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">A.Configure&lt;Contact&gt;()</span><br><span class="line">            .Fill(c =&gt;; c.Id, () =&gt; &#123; <span class="keyword">return</span> i++; &#125;);</span><br></pre></td></tr></table></figure><p>With that simple change, we now have sequential ids. Magic!</p><p><img src="http://www.davepaquette.com/wp-content/uploads/2015/11/image_thumb2.png" alt="image" title="image"></p><p>There is also an option that allows you to configure a property based on other properties of the object. For example, if you wanted to create an email address that matched the first name/last name you could do the following. <em>Also, notice how you can chain together multiple property configurations</em>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A.Configure&lt;Contact&gt;()</span><br><span class="line">            .Fill(c =&gt; c.Id, <span class="number">0</span>)</span><br><span class="line">            .Fill(c =&gt; c.EmailAdress,</span><br><span class="line">                c =&gt; &#123; <span class="keyword">return</span> <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;.&#123;1&#125;@zombo.com"</span>, c.FirstName, c.LastName); &#125;);</span><br></pre></td></tr></table></figure><p>This can be simplified greatly by using string interpolation in C#6.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A.Configure&lt;Contact&gt;()</span><br><span class="line">            .Fill(c =&gt; c.Id, <span class="number">0</span>)</span><br><span class="line">            .Fill(c =&gt; c.EmailAdress,</span><br><span class="line">                  c =&gt; <span class="string">$"<span class="subst">&#123;c.FirstName&#125;</span>.<span class="subst">&#123;c.LastName&#125;</span>@zombo.com"</span>);</span><br></pre></td></tr></table></figure><p><img src="http://www.davepaquette.com/wp-content/uploads/2015/11/image_thumb3.png" alt="image" title="image"></p><h3>Property Filler Extension Methods</h3><p>In some cases, you might want to give GenFu hints about how to fill a property. For this there is a set of <em>With*</em> and <em>As*</em> extension methods available. For example, if you wanted an integer property to be filled with values within a particular range:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A.Configure&lt;Contact&gt;()</span><br><span class="line">            .Fill(c =&gt; c.Age).WithinRange(<span class="number">18</span>, <span class="number">67</span>);</span><br></pre></td></tr></table></figure><p>IntelliSense will show you the list of available extensions based on the type of the property you are configuring.</p><p><img src="http://www.davepaquette.com/wp-content/uploads/2015/11/image_thumb4.png" alt="image" title="image"><em>IntelliSense showing extensions for a String property</em></p><p>Extensions are available for String, DateTime, Integer, Short, Decimal, Float and Double types.</p><h3>WithRandom</h3><p>In some situations, you might want to fill a property with a random value from a given list of values. A simple example of this might be a boolean value where you want approximately 2/3rds of the values to be true and 1/3 to be false. You could accomplish this using the WithRandom extension as follows:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A.Configure&lt;Contact&gt;()</span><br><span class="line">            .Fill(c =&gt; c.IsRegistered)</span><br><span class="line">            .WithRandom(<span class="keyword">new</span> <span class="keyword">bool</span>[] &#123; <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure><p>The <code>WithRandom</code> method is also useful for wiring up object graphs. Imagine the following model classes:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IncidentReport</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Description &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime ReportedOn &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Contact ReportedBy &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Contact</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> EmailAdress &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> PhoneNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could use GenFu to generate 1,000 IncidentReports that were reported by 100 different Contacts as follows:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> contacts = A.ListOf&lt;Contact&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">A.Configure&lt;IncidentReport&gt;()</span><br><span class="line">            .Fill(r =&gt; r.ReportedBy)</span><br><span class="line">            .WithRandom(contacts);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> incidentReports = A.ListOf&lt;IncidentReport&gt;(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2>Wrapping it up</h2><p>That covers the basics and you are now on your way to becoming a GenFu master. In a future post we will cover how to extend GenFu by writing your own re-usable property fillers. In the mean time, give GenFu a try and let us know what you think.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Last week, I had the opportunity to spend some time hacking with my good friend &lt;a href=&quot;http://jameschambers.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;James Chambers&lt;/a&gt;. One of the projects we worked on is his brainchild: &lt;a href=&quot;https://github.com/MisterJames/GenFu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GenFu&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Markdown in Your MVC 6 Razor Pages</title>
    <link href="http://www.westerndevs.com//markdown-in-your-mvc-6-razor-pages/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//markdown-in-your-mvc-6-razor-pages/</id>
    <published>2015-11-03T03:02:42.000Z</published>
    <updated>2018-04-12T23:57:35.286Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>What? Markdown in your Razor code? Yeah...and it was totally easy to build too.</p><p><a href="https://twitter.com/ntaylormullen" target="_blank" rel="noopener">Taylor Mullen</a> demoed the idea of a <a href="https://www.youtube.com/watch?v=jD4H-CBab9o" target="_blank" rel="noopener">Markdown Tag Helper</a> idea at Orchard Harvest and I thought it would be nice to include this in my <a href="https://github.com/dpaquette/TagHelperSamples" target="_blank" rel="noopener">Tag Helper Samples project</a>.</p><a id="more"></a><h2>How to use it</h2><p>This tag helper allows you to write Markdown directly in Razor and have that automatically converted to HTML at runtime. There are 2 options for how to use this tag helper. The first option is to use a <code>&lt;markdown&gt;</code> element.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;code&gt;<span class="xml"><span class="tag">&lt;<span class="name">markdown</span>&gt;</span>This is some _simple_ **markdown**.<span class="tag">&lt;/<span class="name">markdown</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>The tag helper will take this and convert it to the following HTML:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is some <span class="tag">&lt;<span class="name">em</span>&gt;</span>simple<span class="tag">&lt;/<span class="name">em</span>&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span>markdown<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The other option is to use a &lt;p&gt; element that has the <em>markdown</em> attribute:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">markdown</span>=<span class="string">""</span>&gt;</span>This is some _simple_ **markdown** in a _p_ element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The tag helper uses <a href="https://code.google.com/p/markdownsharp/" target="_blank" rel="noopener">MarkdownSharp</a>, which supports most of the <a href="http://stackoverflow.com/editing-help" target="_blank" rel="noopener">markdown syntax supported by Stack Overflow</a>.</p><h2>How it works</h2><p>The implementation of this tag helper is surprisingly simple. All we do is grab the contents of the tag and use MarkdownSharp to convert that to HTML.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HtmlTargetElement(<span class="meta-string">"p"</span>, Attributes = <span class="meta-string">"markdown"</span>)</span>]</span><br><span class="line">[<span class="meta">HtmlTargetElement(<span class="meta-string">"markdown"</span>)</span>]</span><br><span class="line">[<span class="meta">OutputElementHint(<span class="meta-string">"p"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MarkdownTagHelper</span> : <span class="title">TagHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">override</span> Task <span class="title">ProcessAsync</span>(<span class="params">TagHelperContext context, TagHelperOutput output</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (output.TagName == <span class="string">"markdown"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        output.TagName = <span class="string">"p"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> childContent = <span class="keyword">await</span> context.GetChildContentAsync();</span><br><span class="line">        <span class="keyword">var</span> markdownContent = childContent.GetContent();</span><br><span class="line">        <span class="keyword">var</span> markdown = <span class="keyword">new</span> MarkdownSharp.Markdown();</span><br><span class="line">        <span class="keyword">var</span> htmlContent = markdown.Transform(markdownContent);</span><br><span class="line">        output.Content.SetContentEncoded(htmlContent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can grab the code from <a href="https://github.com/dpaquette/TagHelperSamples" target="_blank" rel="noopener">GitHub</a> or install the package using <a href="https://www.nuget.org/packages/TagHelperSamples.Markdown" target="_blank" rel="noopener">Nuget</a>.</p><blockquote><p>Install-Package TagHelperSamples.Markdown</p></blockquote><p>Give it a try and let me know what you think.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What? Markdown in your Razor code? Yeah...and it was totally easy to build too.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/ntaylormullen&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Taylor Mullen&lt;/a&gt; demoed the idea of a &lt;a href=&quot;https://www.youtube.com/watch?v=jD4H-CBab9o&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markdown Tag Helper&lt;/a&gt; idea at Orchard Harvest and I thought it would be nice to include this in my &lt;a href=&quot;https://github.com/dpaquette/TagHelperSamples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tag Helper Samples project&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Custom MVC6 Tag Helper Samples</title>
    <link href="http://www.westerndevs.com//custom-mvc-6-tag-helper-samples/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//custom-mvc-6-tag-helper-samples/</id>
    <published>2015-09-21T01:20:00.000Z</published>
    <updated>2018-04-12T23:57:35.286Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>A group of us who have been exploring MVC 6 Tag Helpers have created a repository of <a href="https://github.com/dpaquette/TagHelperSamples" target="_blank" rel="noopener">Tag Helper Samples</a>. The repository contains a set of real world samples that can help you understand how to build your own custom tag helpers.</p><a id="more"></a><p>So far, we have been focusing on Tag Helpers that make it easier to use various Bootstrap components. We chose Bootstrap because Bootstrap components are often verbose and it can be easy to miss a particular class or a specific attribute. I find that this is especially when you consider all the accessibility <em>aria-*</em> attributes. So far, we have implemented tag helpers for Bootstrap <a href="http://getbootstrap.com/components/#alerts" target="_blank" rel="noopener">Alerts</a>, <a href="http://getbootstrap.com/components/#progress" target="_blank" rel="noopener">Progress Bars</a> and most recently <a href="http://getbootstrap.com/javascript/#modals" target="_blank" rel="noopener">Modals</a>.</p><h2>Alert</h2><p>The <a href="https://github.com/dpaquette/TagHelperSamples/blob/master/TagHelperSamples/src/TagHelperSamples.Bootstrap/AlertTagHelper.cs" target="_blank" rel="noopener">alert tag helper</a>, contributed by Rick Strahl, makes it easy to display Bootstrap alerts containing Font-Awesome icons.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alert</span> <span class="attr">message</span>=<span class="string">"Payment has been processed."</span> <span class="attr">icon</span>=<span class="string">"success"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">alert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Will output the following HTML:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"alert alert-success"</span> role=<span class="string">"alert"</span>&gt;</span><br><span class="line">  &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-check"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> Payment has been processed.</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h2>Progress Bar</h2><p>Displaying a progress bar in Bootstrap is a rather verbose set of elements and attributes:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"progress"</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"progress-bar"</span> role=<span class="string">"progressbar"</span> aria-valuenow=<span class="string">"60"</span> aria-valuemin=<span class="string">"0"</span> aria-valuemax=<span class="string">"100"</span> style=<span class="string">"width: 60%;"</span>&gt;</span><br><span class="line">    &lt;span <span class="built_in">class</span>=<span class="string">"sr-only"</span>&gt;<span class="number">60</span>% Complete&lt;/span&gt;</span><br><span class="line">  &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>The <a href="https://github.com/dpaquette/TagHelperSamples/blob/master/TagHelperSamples/src/TagHelperSamples.Bootstrap/ProgressBarTagHelper.cs" target="_blank" rel="noopener">progress bar tag helper</a> provides a much cleaner syntax:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> bs-progress-<span class="built_in">value</span>=<span class="string">"66"</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><h2>Modal</h2><p>Bootstrap modals are also rather convoluted items. The simplest possible modal consists of too many nested divs and in my opinion is hard to read:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal fade"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-dialog"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-content"</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-header"</span>&gt;</span><br><span class="line">        &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"close"</span> data-dismiss=<span class="string">"modal"</span> aria-label=<span class="string">"Close"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &lt;h4 <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-title"</span>&gt;Modal title&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-body"</span>&gt;</span><br><span class="line">        &lt;p&gt;One fine body&amp;hellip;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div class="modal-footer"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button type="button" class="btn btn-default" data-dismiss="modal"&gt;Close&lt;/</span>button&gt;</span><br><span class="line">        &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary"</span>&gt;Save changes&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;&lt;!-- /</span>.modal-content --&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;&lt;!-- /</span>.modal-dialog --&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;&lt;!-- /</span>.modal --&gt;</span><br></pre></td></tr></table></figure><p>The same modal using the <a href="https://github.com/dpaquette/TagHelperSamples/blob/master/TagHelperSamples/src/TagHelperSamples.Bootstrap/ModalTagHelper.cs" target="_blank" rel="noopener">modal tag helper</a> is much easier to read and will produce the same output:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modal</span> <span class="attr">id</span>=<span class="string">"simpleModal"</span> <span class="attr">title</span>=<span class="string">"Modal Title"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modal-body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>One fine body&amp;hellip;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modal-body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modal-footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modal-footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>Wrapping it up</h2><p>Feel free to browse the <a href="https://github.com/dpaquette/TagHelperSamples/tree/master/TagHelperSamples/src" target="_blank" rel="noopener">sample code</a> or <a href="http://taghelpersamples.azurewebsites.net/" target="_blank" rel="noopener">view them in action on Azure</a>. If you have ideas for other Tag Helpers, feel free to <a href="https://github.com/dpaquette/TagHelperSamples/issues" target="_blank" rel="noopener">log an issue</a> in the repo. Better yet, you could also submit a pull request.</p><p>A big thank you to <a href="https://twitter.com/RickAndMSFT" target="_blank" rel="noopener">Rick Anderson</a> for suggesting this and getting us started and to <a href="http://weblog.west-wind.com/" target="_blank" rel="noopener">Rick Strahl</a> for contributing.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A group of us who have been exploring MVC 6 Tag Helpers have created a repository of &lt;a href=&quot;https://github.com/dpaquette/TagHelperSamples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tag Helper Samples&lt;/a&gt;. The repository contains a set of real world samples that can help you understand how to build your own custom tag helpers.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Adding Prefixes to Tag Helpers in MVC 6</title>
    <link href="http://www.westerndevs.com//adding-prefixes-to-tag-helpers-in-mvc-6/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//adding-prefixes-to-tag-helpers-in-mvc-6/</id>
    <published>2015-09-04T01:24:56.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Some people have said that they would prefer all Tag Helper elements in MVC 6 to be prefixed. I honestly don't see myself doing this but it is easy to turn on if you prefer tag helper elements to be prefixed with some special text.</p><a id="more"></a><p>Simply add the @tagHelperPrefix directive to the _ViewImports.cshtml file in your project:</p><pre><code>@tagHelperPrefix &quot;th:&quot;</code></pre><p>Now, Razor will only recognize elements as Tag Helpers if the elements are prefixed with &quot;th:&quot;.</p><p><img src="http://www.davepaquette.com/wp-content/uploads/2015/09/image_thumb.png" alt="image" title="image"></p><p>You can choose whatever prefix you want for your project. As I said, I probably won't be using this myself but at least there is an easy way to turn on tag helper prefixes for those who want to be very explicit about tag helpers.</p><p>One nice thing with prefixes is that it enables is a quick way to identify what tag helpers exist in a project. When you type in the prefix, IntelliSense will show you a list of elements that can be processed by tag helpers:</p><p><img src="http://www.davepaquette.com/wp-content/uploads/2015/09/image_thumb1.png" alt="image" title="image"></p><p>What do you think? Prefix or not prefix?</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Some people have said that they would prefer all Tag Helper elements in MVC 6 to be prefixed. I honestly don&#39;t see myself doing this but it is easy to turn on if you prefer tag helper elements to be prefixed with some special text.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Why Gulp?</title>
    <link href="http://www.westerndevs.com//why-gulp/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//why-gulp/</id>
    <published>2015-09-03T02:41:57.000Z</published>
    <updated>2018-04-12T23:57:35.290Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I recently made some updates to my blog post on <a href="http://www.davepaquette.com/archive/2014/10/08/how-to-use-gulp-in-visual-studio.aspx" target="_blank" rel="noopener">How to Use Gulp in Visual Studio</a>. I don't usually go back and update old blog posts, but this one receives a fair amount of daily traffic. There was a minor mistake in the way I had setup my gulp watch and I wanted to fix that to avoid confusion. I also get a lot of questions about why using a task runner like Gulp is a 'better approach' than the way things are done in ASP.NET 4.x. I have addressed some of those questions in the original post but I will go into more detail here.</p><a id="more"></a><p>Let's start with a quick example using the 2 approaches.</p><h3>System.Web.Optimization</h3><p>In previous versions of ASP.NET, optimizations such as bundling and minification are done using the System.Web.Optimization package. In this approach, we configure our bundles in C#:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BundleConfig</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// For more information on bundling, visit http://go.microsoft.com/fwlink/?LinkId=301862</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterBundles</span>(<span class="params">BundleCollection bundles</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"> </span><br><span class="line">        bundles.Add(<span class="keyword">new</span> ScriptBundle(<span class="string">"~/bundles/js"</span>).Include(</span><br><span class="line">                    <span class="string">"~/app/Script1.js"</span>,</span><br><span class="line">                    <span class="string">"~/app/Script2.js"</span>));</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Those bundles are referenced in our Razor views as follows:</p><pre><code>@Scripts.Render(&quot;~/bundles/js&quot;)</code></pre><p>When running in Release mode, the server combines the files in a bundle into a single minified file and renders a single &lt;link&gt; or &lt;script&gt; tag for the bundle. When running in Debug mode, the server renders individual &lt;link&gt; or &lt;script&gt; tags for each file in the bundle. The file optimization step is done at runtime. A version hash is added to the bundle URL to support aggressively caching the asset on the client side.</p><h4>Task Runners</h4><p>When using a Task Runner like Gulp (or Grunt), optimizations like bundling and minification are done at build/compile time. The bundles and any step related to bundling are configured in a JavaScript file that is executed by the task runner. Here is a simple example of a gulp file that does the same optimizations as the example above:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include plug-ins</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    <span class="comment">//Include all js files but exclude any min.js files</span></span><br><span class="line">    src: [<span class="string">'app/**/*.js'</span>, <span class="string">'!app/**/*.min.js'</span>]</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> gulp.src(config.src)</span><br><span class="line">      .pipe(uglify())</span><br><span class="line">      .pipe(concat(<span class="string">'all.min.js'</span>))</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'app/'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Set a default tasks</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'scripts'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;);</span><br></pre></td></tr></table></figure><p><em>Note that this is a simplified example. For a more complete example see my <a href="http://www.davepaquette.com/archive/2014/10/08/how-to-use-gulp-in-visual-studio.aspx" target="_blank" rel="noopener">original post</a>.</em></p><p>By running the scripts task, all the JS files in my app folder are combined and minified into a single all.min.js file. In ASP.NET 5, we can decided based on our current environment if we should include references to the individual files or the single combined and minified file.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">names</span>=<span class="string">"Development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">asp-src-include</span>=<span class="string">"~/app/**/*.js"</span> <span class="attr">asp-src-exclude</span>=<span class="string">"~/app/**/*.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">names</span>=<span class="string">"Staging,Production"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"~/app/all.min.js"</span> <span class="attr">asp-append-version</span>=<span class="string">"true"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In this case, the files are combined and minified at build/compile time. The minified version of the file is published to the server. At runtime, Razor tag helpers are responsible for <a href="http://www.davepaquette.com/archive/2015/05/05/web-optimization-development-and-production-in-asp-net-mvc6.aspx" target="_blank" rel="noopener">deciding which script tags</a> to include. The tag helpers also <a href="http://www.davepaquette.com/archive/2015/05/06/link-and-script-tag-helpers-in-mvc6.aspx" target="_blank" rel="noopener">append the file version hash</a> to support aggressively caching the files on the client side. As was covered in my original post, we can use the Task Runner Explorer to link the Scripts task to the build event in Visual Studio. Using a watch, I can automatically run the Scripts task anytime a JS file changes.</p><h2>Why I prefer the Task Runner approach</h2><p>Now let's get into the details of why I prefer using a task runner like Gulp over the runtime optimization approach taken by System.Web.Optimization.</p><h3>Runtime vs. Compile-Time Optimizations</h3><p>System.Web.Optimization takes the approach of bundling/minifying your assets at runtime. The first time a request comes in for a bundle, it will combine and minify all the files in that bundle and cache the results for the next request. While the cost of this is minimal, it has always seemed to me that it is a strange to use server resources to do this task. At the time of publishing our application to the server, we already know what the code is. To me it makes more sense to do this step on the build server or on the developer machine BEFORE publishing the application. Task runners like Gulp take the approach of doing these asset optimization steps at compile/build time.</p><p>This becomes a bigger advantage when we start doing more than just bundling and minification. My typical <em>scripts</em> task takes all theTypeScript files from my app, compiles them to JavaScript, combines the output of that to a single minified JS file and writes out source maps. Gulp allows me to easily automate all of this with a single task. Compiling TypeScript and generating source maps is just not possible with System.Web.Optimization and I don't think anyone would argue that doing all those steps on the web server at runtime would make sense anyway. Yes, some of these steps could be handled using Visual Studio plugins…more on that later.</p><p>For the vast majority of applications, I think the task runner approach is more logical. You are shipping known, pre-optimized assets to your production server. Don't make your server do more than it needs to.</p><p><em>Note that there are some specific use cases such as CMS tools that require runtime optimizations because the assets might not be known at compile time.</em></p><h3>Extensibility and Consistency</h3><p>There is no question that the runtime bundling in MVC 5 provides a better 'out-of-the-box' experience. When you create a new project, bundling and minification is setup and working. It is easy to add new files. People generally understand the concepts and don't need to spend a lot of time fiddling with the bundle configuration. As I have eluded to in the TypeScript example, System.Web.Optimization starts to fall apart for me is when you want to take things 1 step further.</p><p>Let's consider another example. What if I want to start using a CSS pre-processor like LESS or SASS? There is no way built-in way to tie CSS pre-processors into System.Web.Optimization. Now you need to start looking for VS plugins to do this task. If we're lucky, these will work well. In my experience they have some problems, are often out-of-date or are just not available. One big problem with using VS plugins is that I can't make use of those on the build server which means I now need to check my generated CSS files in source control. I much prefer to only check in my LESS or SASS source files and have the build server generate the CSS files. (Checking in generated files pollutes the commit logs and makes code reviews a lot less effective).</p><p>Another problem is trying to make sure that everyone on the team has the right plugins installed. There are ways to enforce this, but it is not very easy.</p><p>With Gulp, all we need to do is include a gulp plugin (eg, gulp-less) and add the less compilation step to my stylesheet task. It is a 1 or 2 line change to my gulp file. The node package manager is able to ensure that everyone on the team has the right gulp plugins installed. Since everything is command line based, it is also very easy to <a href="http://www.davepaquette.com/archive/2015/04/08/integrating-gulp-and-bower-with-visual-studio-online-hosted-builds.aspx" target="_blank" rel="noopener">call the same tasks from the build server</a>.</p><p>So the big advantages that I see are extensibility and consistency. System.Web.Optimization is very good at doing a couple things, but it is also limited to doing those couple of things. When we want to take things a little further, we start to run into some pain points with ensuring a consistent development environment. Gulp on the other hand is extremely flexible and extensible in a way that makes it easy to provide consistency environment and consistent builds across your entire team.</p><h2>Wrapping it up</h2><p>In small and simple MVC 5 projects, I still use System.Web.Optimization for it's simplicity. For more complex projects where I want to use some newer web dev tooling, I use Gulp. Gulp gives me a lot more options and the opportunity to design a better workflow for my team.</p><p>The File-New Project experience in current beta version of MVC 6 uses Gulp. I'm excited about this, but the default gulp file is in need of some work. It is difficult to extend and contains some errors that will cause problems for those who are new to Gulp. Of course, this is a beta version and the team is still working on this. I am hopeful that the experience will improve before the official release of MVC 6. In the meantime, don't be afraid to learn about Gulp and all the amazing things it can do. I find the <a href="https://github.com/gulpjs/gulp/tree/master/docs/recipes" target="_blank" rel="noopener">Gulp Recipes</a> to be a very valuable learning tool.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I recently made some updates to my blog post on &lt;a href=&quot;http://www.davepaquette.com/archive/2014/10/08/how-to-use-gulp-in-visual-studio.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How to Use Gulp in Visual Studio&lt;/a&gt;. I don&#39;t usually go back and update old blog posts, but this one receives a fair amount of daily traffic. There was a minor mistake in the way I had setup my gulp watch and I wanted to fix that to avoid confusion. I also get a lot of questions about why using a task runner like Gulp is a &#39;better approach&#39; than the way things are done in ASP.NET 4.x. I have addressed some of those questions in the original post but I will go into more detail here.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
