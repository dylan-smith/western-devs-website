<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Western Devs</title>
  
  <link href="/feeds/david_wesst" rel="self" type="application/atom+xml"/>
  <link href="http://www.westerndevs.com" rel="alternate" type="application/atom+xml"/>
  
  <updated>2018-04-12T23:57:35.282Z</updated>
  <id>http://www.westerndevs.com/</id>
  
  <author>
    <name>Western Devs</name>
	<uri>http://www.westerndevs.com</uri>
    <email>info@westerndevs.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title type="html">F12 Chooser is a Dev Tool Thing</title>
    <link href="http://www.westerndevs.com/Development/f12-chooser-is-dev-tool-thing/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Development/f12-chooser-is-dev-tool-thing/</id>
    <published>2018-03-28T17:10:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>The F12 Chooser is a development tool thing that I like and you should know about if you want your web application or web extension to support Microsoft Edge.</p><a id="more"></a><p><img src="https://i.imgur.com/wt4L09z.png" alt="1"></p><p>The <a href="https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide" target="_blank" rel="noopener">F12 Developer Tools</a> are pretty great. They are the original in-browser developer tools (included in Internet Explorer 7), and have evolved into something more modern for all us &quot;modern&quot; developers.</p><p>With all in-browser developer tools, I've found that every once and I come across an application I'm trying to debug that is so unstable that F12 can't seem to attache properly. Whether that's because of the application locking up the browser or whatever, without being able to attach a debugger I can't really get into the code and start sorting out the issue.</p><p>That's where the F12 Chooser comes into play.</p><h2>What is F12 Chooser?</h2><p>F12 Chooser is a utility built into Windows that allows you choose the target application for the F12 Developer Tools without having to open Microsoft Edge itself.</p><h2>How do I run it?</h2><p>On Windows 10, you run <code>\\Windows\System32\F12\F12Chooser.exe</code>. The window that comes up will display a list of targets for which you can attach the F12 tools. You can find the 64-bit version in <code>C:\Windows\SysWOW64\F12\F12Chooser.exe</code>.</p><p><img src="https://i.imgur.com/ch1TjEr.gif" alt="2"></p><h2>Why does this matter?</h2><p>Because it gives you another option when it seems like the F12 tools are failing. If your browser locks up when you try and debug your application code, you should try the F12 Chooser once the application has loaded in the browser.</p><p>It also allows you to target applications that aren't necessarily web applications that you view in a browser. For example, maybe you're looking to debug an <a href="https://docs.microsoft.com/en-us/office/dev/add-ins/testing/debug-add-ins-using-f12-developer-tools-on-windows-10" target="_blank" rel="noopener">Office Add-In</a>.</p><h2>Conclusion</h2><p>In conclusion, you have the F12 Chooser as another way to load up and attach the F12 developer tools in Windows 10 to help you with debugging web applications, web extensions, and even other things like Office Add-Ins.</p><p>And now you know it exists. You're welcome.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The F12 Chooser is a development tool thing that I like and you should know about if you want your web application or web extension to support Microsoft Edge.&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://www.westerndevs.com/categories/Development/"/>
    
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="http://www.westerndevs.com/tags/TypeScript/"/>
    
      <category term="Web Extensions" scheme="http://www.westerndevs.com/tags/Web-Extensions/"/>
    
      <category term="Office Add-In" scheme="http://www.westerndevs.com/tags/Office-Add-In/"/>
    
  </entry>
  
  <entry>
    <title type="html">Picking between TypeScript and JavaScript</title>
    <link href="http://www.westerndevs.com/Development/typescript-or-javascript/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Development/typescript-or-javascript/</id>
    <published>2018-03-15T15:40:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Which one should you pick: TypeScript or JavaScript? They are both great languages, people always ask me when you should use one or the other. This post puts that to rest.</p><a id="more"></a><p>Whether it's a work project or a personal one, the question &quot;TypeScript or JavaScript&quot; always seems to come up in my mind. Utlimately, they provide a very similiar function considering that TypeScript is a superset of JavaScript, and compiles down to JavaScript itself.</p><p>I'm not the only person that has this question either. Over the past year, I've asked a number of JavaScript/TypeScript developers about how they pick between the two and I wanted to sum up my thoughts here after being influenced by my private panel of experts.</p><h2>It Depends on the Project</h2><p>Of course it does.</p><p>There is never one answer for everything, and this is no different. That being said, there are a few criteria or &quot;flags&quot; that help me select when I want to use one over the other.</p><h3>JavaScript Knowledge is Assumed</h3><p>Before we get into it, let me clarify that I'm assuming that the developer(s) working on the project already know JavaScript. They don't need to be experts, but they are familiar with writing vanilla JavaScript for applications, whether that be client or server side code.</p><p>That being said, I'm also assuming that a TypeScript-focued developer can get their way around JavaScript code.</p><h2>When to TypeScript</h2><p><img src="https://i.imgur.com/IAPRGfv.png" alt=""></p><p>I fall to TypeScript when I am writing more than one or two code files or if I'm writing code that I expect someone else to have to run. Although I use TypeScript, the it's not necessarily the language itself that I want, but the TypeScript compiler as it helps the other developers running my code, and removes the ambiguity of types between functions or classes that need to work togther.</p><p>It does a lot of stuff for me:</p><ul><li>Catches errors, especially typing ones, at compile time rather than run time</li><li>Sets standards around what JS-like conventions I want to use</li><li>Better legacy browser support</li><li>Supports multiple module practices</li></ul><p>Ultimately, that compiler is powerful and I put a lot of trust into it considering I expect that the compiled code to be optimal.</p><h3>But doesn't the compiler work on JavaScript too?</h3><p>Yes. Yes it does.</p><p>The catch is that the compiler is not as thurough as it is with TypeScript. When you add the <code>//@ts-check</code> <a href="https://code.visualstudio.com/docs/languages/javascript#_type-checking-and-quick-fixes-for-javascript-files" target="_blank" rel="noopener">reference</a> at the top of your JavaScript file in Visual Studio Code, that really helps with the development story of any JavaScript code, but it's still not as deep as using TypeScript itself.</p><p>Using TypeScript with the TypeScript compiler gives you that little bit of extra help in development, and that is really where the value comes in for me.</p><h2>When to JavaScript</h2><p><img src="https://i.imgur.com/yCn8NUQ.png" alt=""></p><p>I tend to use JavaScript when I'm only writing a little bit of code and don't want to deal with the overhead of setting up the compiler for the project. For examples, when I'm writing a little Node script, or experimenting with REST API and want a simple GUI, I'll quickly put together some vanilla JS code and get something working quickly.</p><p>That being said, I write the majority of my JavaScript in <a href="https://code.visualstudio.com" target="_blank" rel="noopener">Visual Studio Code</a> which provides a lot of JavaScript tooling support using the TypeScript compiler underneath the hood.</p><h2>Conclusion</h2><p>In conclusion, when I have to pick between JavaScript or TypeScript I lean towards TypeScript. It provides the better development story between the two, and that's a really important factor when I'm writing and sharing code.</p><p>When I'm lazy and don't want to setup a TypeScript project, I fall back on JavaScript but still rely on the built-in TypeScript tooling in Visual Studio Code.</p><p>TypeScript provides the tooling and needed bit of abstraction from the implementation with its compiler. Even though JavaScript has come a long way with <a href="https://github.com/tc39/ecma262" target="_blank" rel="noopener">ECMA-262</a> getting plenty of updates, there is still the challenge of browser vendors supporting the spec and so on. In the end, the overhead of setting up your project to using the TypeScript compiler outweighs the complexity that large JavaScript projects bring to the table.</p><p>Even when JavaScript is &quot;feature complete&quot;, I'm guessing that TypeScript will still provide a stronger developer story for larger software projects, while JavaScript will continue to provide the foundation for the web platform, and TypeScript itself.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Which one should you pick: TypeScript or JavaScript? They are both great languages, people always ask me when you should use one or the other. This post puts that to rest.&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://www.westerndevs.com/categories/Development/"/>
    
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="http://www.westerndevs.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title type="html">Crowdsourcing Documentation is Cool</title>
    <link href="http://www.westerndevs.com/Development/crowdsourcing-docs-is-cool/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Development/crowdsourcing-docs-is-cool/</id>
    <published>2018-03-13T13:40:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>The idea of these large enterprises crowdsourcing their technical documentation is pretty cool. More cool than I had originally realized, and I want to take a moment to explain why I like it and why you should get involved yourself.</p><a id="more"></a><p>I updated the Microsoft Edge documentation on web extensions. As of this writing, you can see it <a href="https://docs.microsoft.com/en-us/microsoft-edge/extensions/extensions-for-enterprise" target="_blank" rel="noopener">here</a>, but just in case you can't I've included an image.</p><p><img src="https://i.imgur.com/5ptKftE.png" alt=""></p><p>The idea of these large enterprises crowdsourcing their technical documentation is pretty cool. More cool than I had originally realized and, for that reason, I want to take a moment to explain why I like it and why you should get involved yourself.</p><h2>What do you mean by &quot;Crowdsourcing&quot;?</h2><p>When it comes to web platforms, many of the platform owners (<a href="https://github.com/awsdocs" target="_blank" rel="noopener">Amazon</a>, <a href="https://github.com/MicrosoftDocs" target="_blank" rel="noopener">Microsoft</a>, <a href="https://github.com/mdn" target="_blank" rel="noopener">Mozilla</a>) have started crowdsourcing their technical documentation. When I say <em>crowdsourcing</em> I mean that the organization opens up the conversation about what the documentation should say to the community at large.</p><p>The community, being the consumers of the product (and the documentation) can have input into adding, editing, or removing sections of official product or platform documentation. Assuming the vendor agrees with the changes being suggested, then the change is accepted and the official documentation is updated.</p><p>This whole process if facilitated generally by GitHub, where documentation is published as source code and pull requests act as the avenue submitting changes. This way, the conversation about the changes is tracked, shared, and kept in the open for people to review and understand.</p><p>Plus, using things like contributors guides and automated build tools can be integrated with GitHub to validate the change, to make sure that the change to the documentation doesn't break anything and follows any rules the vendor has in place.</p><h2>Where is the coolness?</h2><p>There are a couple of cool points I'd like to highlight.</p><h3>Consumers are More Qualified than Vendors</h3><p>The developers of the platform itself are somewhat qualified considering they know the inner workings of the product, but they aren't the ones using it. The people using the product don't need to know how the guts work, they need to how to use it.</p><p>There is nobody more qualified to update product documentation than the consumers of the documentation and technology. The people that are neck deep and actually <em>using</em> in tech to make things happen. Those are the people that are best suited to critique and ultimately improve the documentation.</p><h3>Transparent Conversations</h3><p>When you crowdsource your documentation, you need to make it open and accessible, which tends to make conversation around the documentation transparent. In our case, GitHub provides the facilty to make this happen with public repositories filled with documentation and through the issue and pull request interface.</p><p>People can submit pull requests and issues and have a conversation with the vendor about their documentation and ultimately their product.</p><p>Something that starts out like a minor update, could result in an entire section. In my case, I was confident that I'd be adding new pages of content, but once I got into the thick of it, I realized all the parts were already present in the docs. I just needed to add some context and minor updates to what was already there.</p><h2>Conclusion</h2><p>In conclusion, anyone reviewing the documentation for a tool or technology should check to see if:</p><ol><li>It's open to improvement through crowdsourcing</li><li>They can think they can make it better.</li></ol><p>It's a great way to get involved in your technology community, all while improving the developer experience for the next person that comes along.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The idea of these large enterprises crowdsourcing their technical documentation is pretty cool. More cool than I had originally realized, and I want to take a moment to explain why I like it and why you should get involved yourself.&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://www.westerndevs.com/categories/Development/"/>
    
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/tags/JavaScript/"/>
    
      <category term="Documentation" scheme="http://www.westerndevs.com/tags/Documentation/"/>
    
  </entry>
  
  <entry>
    <title type="html">Windows Subsystem for Linux is Cool. No really, it is.</title>
    <link href="http://www.westerndevs.com/web/websummit-wsl/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/web/websummit-wsl/</id>
    <published>2017-09-20T22:35:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><em>This is part of a series of posts capturing the highlights from my experience at the <a href="https://summit.microsoftedge.com/" target="_blank" rel="noopener">Microsoft Edge Web Summit 2017</a></em></p><p><img src="https://davidwesst.blob.core.windows.net/blog/websummit-wsl/ubuntu-install.gif" alt="Installing Ubuntu on Windows 10 from the Windows Store"></p><p>With the Fall Creators Update for Windows 10, you can go to the Windows Store and install Linux.</p><p>Yeah, that's a thing now and it's pretty cool.</p><h2>What is the Windows Subsystem for Linux (WSL)?</h2><p>It's a new Windows feature that allows Linux distributions like Ubuntu and OpenSUSE to run inside of Windows. Essentially, this let's you run Linux-based command line applications against your files stored in Windows.</p><h2>Why is that cool?</h2><p>It's cool because a lot of the web runs on Linux, but many of us develop on Windows because the business runs on the Windows platform. This means that the dev tools you have installed to run your build and test your application are the Windows versions.</p><p>It might not seem like a big deal, but it's definitely a discrepancy. How are you expected to catch Linux issues before you deploy if you're running Windows? The WSL, that's how.</p><h2>Isn't this just CygWin?</h2><p>No, it's different.</p><p>According to the <a href="https://www.cygwin.com/" target="_blank" rel="noopener">CygWin homepage</a></p><blockquote><p>Cygwin is:</p><ul><li>a large collection of GNU and Open Source tools which provide functionality similar to a Linux distribution on Windows.</li><li>a DLL (cygwin1.dll) which provides substantial POSIX API functionality.</li></ul></blockquote><p>WSL, is a layer inside of Windows that allows actual Linux distributions to run against. Microsoft is providing the foundation for Linux distributions to build upon, and keeping their hands out of the tooling itself.</p><p>When you're using CygWin, you're not using a Linux distribution. You're using CygWin. With WSL, you're not using any Linux distributions unless you install them on top of the WSL. Once you do, you're using the tooling provided and build <em>for that Linux distribution</em>.</p><h2>Isn't this just Bash for Windows 10?</h2><p>No, it's also different.</p><p>Although I won't get into the weeds with it, Bash for Windows 10 was something of a precursor to the Ubuntu distribution that is in the Windows Store. Think of it as an Ubuntu for Windows preview.</p><p>Now, we're not limited to just Bash on Ubuntu. We can install OpenSUSE and run bash on that, and eventually Fedora, and probably other flavours of Linux as time goes on. So you can run two different or three different versions of Linux against the Windows filesystem at the same time, without needing a bunch of VMs running.</p><h2>Why don't I just run Linux?</h2><p>You totally can, this doesn't change that.</p><p>This is a dev tool, first and foremost. It's meant to (IMHO) provide developers a easier way to run Linux tools on Windows, with the resource boundaries and extra resource consumption of a virutal machine.</p><p>For example, if you're running Apache on your Linux-based web server, you no longer have to run Windows-based Apache. Rather, you can install the Linux version of Apache on Ubunut or whatever, adn directly against your Windows filesystem. No VM to prep, or system boundaries to cross. Just install and run it.</p><h2>How do I start?</h2><p>You can start by <a href="https://msdn.microsoft.com/en-us/commandline/wsl/install_guide" target="_blank" rel="noopener">installing the WSL on your Windows 10 machine</a>.</p><p>The Windows Store animation I showed at the beginning of this post is using an <a href="https://insider.windows.com/en-us/" target="_blank" rel="noopener">Insiders Build</a> of Fall Creators update for Windows 10. You can join the insiders program yourself learn about that <a href="https://insider.windows.com/en-us/" target="_blank" rel="noopener">here</a>.</p><p>Until the Fall Creators update, you can still start tinkering with Bash on Ubuntu for Windows 10 by following the <a href="https://msdn.microsoft.com/en-us/commandline/wsl/install_guide" target="_blank" rel="noopener">install instructions</a> provided earlier.</p><h2>Anything else?</h2><p>Yeah.</p><p>They are finally fixing the console window in Windows, so that's a thing too. Read about it on <a href="https://blogs.msdn.microsoft.com/commandline/" target="_blank" rel="noopener">the team's blog</a>.</p><hr><h2>Resources</h2><ul><li><a href="https://blogs.msdn.microsoft.com/commandline/" target="_blank" rel="noopener">Windows Command Line Tools Blog</a></li><li><a href="https://msdn.microsoft.com/en-us/commandline/wsl/install_guide" target="_blank" rel="noopener">Installing WSL Instructions</a></li></ul>]]></content>
    
    <summary type="html">
    
      With the Fall Creators update of Windows 10, you can go to the Windows Store and install Linux. Yeah, that&#39;s a thing now and it&#39;s pretty cool.
    
    </summary>
    
      <category term="web" scheme="http://www.westerndevs.com/categories/web/"/>
    
    
      <category term="microsoft-edge" scheme="http://www.westerndevs.com/tags/microsoft-edge/"/>
    
      <category term="f12" scheme="http://www.westerndevs.com/tags/f12/"/>
    
      <category term="linux" scheme="http://www.westerndevs.com/tags/linux/"/>
    
      <category term="windows subsystem for linux" scheme="http://www.westerndevs.com/tags/windows-subsystem-for-linux/"/>
    
      <category term="wsl" scheme="http://www.westerndevs.com/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title type="html">Sonar, the Linter I Never Knew I Wanted</title>
    <link href="http://www.westerndevs.com/web/websummit-sonar/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/web/websummit-sonar/</id>
    <published>2017-09-19T22:35:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><em>This is part of a series of posts capturing the highlights from my experience at the <a href="https://summit.microsoftedge.com/" target="_blank" rel="noopener">Microsoft Edge Web Summit 2017</a></em></p><p><img src="https://davidwesst.blob.core.windows.net/blog/websummit-sonar/sonar-bttf.png" alt="Nellie the Narwhal in the Back to the Future DeLorean"></p><p>Meet Nellie the Narwhal. Nellie is the official mascot for <a href="https://sonarwhal.com/" target="_blank" rel="noopener">Sonar</a>, the linting tool for the web. Nellie represents a tool that is long-overdue. It provides any web application the ability to verify they are meeting a high level of quality when it comes to their web applications, and catch any improvements to implement or common pitfalls to fix.</p><h2>What is Sonar?</h2><p>Sonar is a linting tool for the web. Plain and simple.</p><p>It provides command line linting tool, along with some rules, that prevent developers from making some common mistakes or pitfalls with their web applications. It covers things like security, accessbility, and progressive web applications, to name a few.</p><p>You can also create your own rules for the linter, allowing you to extend the tool to check your solutions for business specific requirements.</p><p>Oh, and it's been <a href="https://js.foundation/announcements/2017/06/22/sonar-js-foundation-welcomes-newest-project" target="_blank" rel="noopener">donated to the JS Foundation</a>, where Microsoft continues to contribute to it.</p><h2>Why do you want this?</h2><p>Because of devops, that's why.</p><p>This is a command line tool that can break a build if your site doesn't meet specific requirements. Personally, I'm happy about the security and accessiblity rules they provide, but being that <a href="http://www.westerndevs.com/web/websummit-pwa/">I'm pretty focused on PWAs</a>, I'm sure that Sonar is going to help me write better PWAs than I would have done learning on my own.</p><p>Personally, I'm looking forward to breaking a build because I forgot to implement some accessibility rules. It will help me and my team learn some of these optimizations to make our web projects work best for everyone on any device.</p><h2>How can I start using it?</h2><p><img src="https://davidwesst.blob.core.windows.net/blog/websummit-sonar/sonar-in-action.gif" alt="Sonar running against WesternDevs.com showing lots of issues"></p><p>It's pretty easy: just install, initialize, and run it.</p><p>As you can see, there is work for us to do if we want to bring our blog up to the recommended specification provided by Sonar.</p><p>If you're looking to set a bar of quality, whether it be the recommended standard or just your own set of standards, Sonar is the tool that can make that happen.</p><hr><h2>Resources</h2><ul><li><a href="https://sonarwhal.com/" target="_blank" rel="noopener">Sonar</a></li><li><a href="https://js.foundation/" target="_blank" rel="noopener">JS Foundation</a></li></ul><h2>Image Credit</h2><ul><li><a href="https://github.com/sonarwhal/nellie" target="_blank" rel="noopener">Nellie's Photo Album | Back to the Future</a></li></ul>]]></content>
    
    <summary type="html">
    
      Meet Nellie the Narwhal, the official mascot for Sonar, the linting tool for the web. Nellie represents a tool that is long-overdue. It provides any web application the ability to verify they are meeting a high level of quality when it comes to their web applications, and not miss any common mistakes.
    
    </summary>
    
      <category term="web" scheme="http://www.westerndevs.com/categories/web/"/>
    
    
      <category term="devops" scheme="http://www.westerndevs.com/tags/devops/"/>
    
      <category term="microsoft-edge" scheme="http://www.westerndevs.com/tags/microsoft-edge/"/>
    
      <category term="sonar" scheme="http://www.westerndevs.com/tags/sonar/"/>
    
      <category term="accessibility" scheme="http://www.westerndevs.com/tags/accessibility/"/>
    
  </entry>
  
  <entry>
    <title type="html">Service Workers and PWAs are Super Cool</title>
    <link href="http://www.westerndevs.com/web/websummit-pwa/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/web/websummit-pwa/</id>
    <published>2017-09-18T23:35:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><em>This is part of a series of posts capturing the highlights from my experience at the <a href="https://summit.microsoftedge.com/" target="_blank" rel="noopener">Microsoft Edge Web Summit 2017</a></em></p><p>One of the core items highlighted by the Microsoft Edge team, along with many others who were just web professionals, was the importance of Progressive Web Apps (PWAs). I started out thinking they were something that <em>could</em> be interesting one day, but left the conference convinced that this will change the way we think of the web.</p><h2>What is a PWA?</h2><p><img src="https://davidwesst.blob.core.windows.net/blog/websummit-pwa/pwa-logo.svg" alt="PWA Logo from diekus.net/logo-pwinter"></p><p><a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">Google has been talking about PWAs</a> for a while now, but in my words they are web applications that use a progressive enhancement design strategy to add device native features, when available.</p><p>So, it's just a web app with some fancy bells and whistles, like offline loading once the site has been downloaded once and native device API access, like camera access or push notifications straight to the device.</p><p>If it sounds like regular installed application rather than a web application, then you're understanding this correctly.</p><p>PWAs <em>could</em> be the next wave of &quot;apps&quot; for our devices, but they won't need a store front. Rather, the user can just navigate to the site and &quot;install&quot; the site, which can be cached for offline usage amongst other things.</p><h2>What makes them super cool?</h2><p>Outside of the coolness of extending the reach of the web into offline world, it's also built on a set of open web standards.</p><p>Standards give developers APIs to use across platforms, but they also give the platform holders something common to build against. Both Windows and Android have big plans for PWAs, giving web developers a whole new opportunity to use our existing skills to deliver great software.</p><p>Just to be clear, software that can be offline and installed natively, using web development tools and skills.</p><p>That <em>is</em> super cool.</p><h2>So, where do I start?</h2><p>With the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener">Service Worker API</a>.</p><p>This is the first step in building a great PWA, as it allows you to &quot;install&quot; the web application on the device. Once you have it installed, then you can worry about the rest of the functionality and how it should work.</p><p>On top of that, start looking at some of the new APIs that have been coming out of the W3C like the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Push_API" target="_blank" rel="noopener">Push API</a>, the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API" target="_blank" rel="noopener">Payment Request API</a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener">IndexedDB</a>.</p><p>This should give you a good idea of what can do with a PWA rather than a regular old web application.</p>]]></content>
    
    <summary type="html">
    
      One of the core items highlighted by the Microsoft Edge team, along with many others who were just web professionals, was the importance of Progressive Web Apps (PWAs). I started out thinking they were something that could be interesting one day, but left the conference convinced that this will change the way we think of the web.
    
    </summary>
    
      <category term="web" scheme="http://www.westerndevs.com/categories/web/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="microsoft-edge" scheme="http://www.westerndevs.com/tags/microsoft-edge/"/>
    
      <category term="service-workers" scheme="http://www.westerndevs.com/tags/service-workers/"/>
    
      <category term="progressive-web-apps" scheme="http://www.westerndevs.com/tags/progressive-web-apps/"/>
    
  </entry>
  
  <entry>
    <title type="html">Posh-GVM, the Groovy Version Manager for Powershell</title>
    <link href="http://www.westerndevs.com/java/posh-gvm/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/java/posh-gvm/</id>
    <published>2017-08-17T14:00:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Here's another dev thing I use: <a href="https://github.com/flofreud/posh-gvm" target="_blank" rel="noopener">Posh-GVM</a>, a Groovy version manager that works for Windows.</p><p>You remember Groovy right? The language that was all the rage at some point with Groovy on Grails?</p><p>All kidding aside, in my adventures as an enterprise JDK developer, I've come across a number of Groovy on Grails applications. These projects tend to span multiple versions of Grails, ranging from 2.3.x which works on older versions of Tomcat, upto 3.2.x for of of our newer solutions. Instead of manually configuring my system for each project, I just use Posh-GVM as recommended by the folks who brought you <a href="http://sdkman.io/" target="_blank" rel="noopener">SDKMan for Unix systems</a>.</p><p><img src="https://davidwesst.blob.core.windows.net/blog/posh-gvm/poshgvm-example.gif" alt="Posh-GVM in action" title="Posh-GVM in action in a Powershell terminal"></p><h2>What does it do?</h2><p>It handles switching between versions of Groovy, Grails, and a bunch more technologies without having to fuss with configuring your system. It switch between versions of Grails, Groovy, Gradle, Koitlin, and more with <code>gvm use &lt;candidate&gt; &lt;version&gt;</code> where candidate is the technology and version is...well, the version.</p><h2>Using Posh-GVM</h2><p>Posh-GVM is a Windows port to <a href="http://sdkman.io/" target="_blank" rel="noopener">SDKMan</a> formerly known as the GVM, or Groovy eVironment Manager. Instead of requiring a Unix system to run, it requires Powershell.</p><p>To install it, I followed the README instructions to install it via <a href="https://github.com/flofreud/posh-gvm#via-short-script" target="_blank" rel="noopener">a short script</a>. I tried using the PsGet method described, but didn't have any luck finding the module. More on that later.</p><p>Once installed (and added to your profile) you can run <code>gvm help</code> in the Powershell terminal and you should see a lovely help menu with all the goodies you can install and switch your fingertips.</p><h3>Won't these conflict with the versions I already have installed?</h3><p>No. It installs the tools in a different directory, so you should be good.</p><p>That being said, you probably don't need to have a local version of Grails or whatever tool installed anymore because Posh-GVM will handle that for you.</p><h2>What makes it cool?</h2><p>It's cool because it works on Windows, without the need for Bash or Cygwin.</p><p>The fact that it covers a number of tools, including Grails, Groovy, and Gradle (and many more) is a pretty nifty too.</p><h2>What are the drawbacks?</h2><p>There are two that stand out to me, but nothing that has made me abandon the tool for something else.</p><h3>Java not included</h3><p>The first being that it doesn't support Java like it's Unix couterpart. My guess is that Java is something special when it comes to Unix VS Windows and was eliminated for that reason. We have <a href="http://www.westerndevs.com/java/jabba/" title="My post on Jabba, the Java version manager for everyone">Jabba</a> for that on Windows, but it would be nice to have all the pieces in to the puzzle in a single tool.</p><h3>Lack of Project Activity</h3><p>The second is the lack of updates.</p><p>As of this writing, it hasn't been updated since <a href="https://github.com/flofreud/posh-gvm/commit/2145f8a65c5bf317e96664ebb03bf84c569ba770" target="_blank" rel="noopener">December 2015</a> while SDKMan has continued to be actively developed.</p><p>This isn't necessarily a bad thing, as there haven't been any pull requests in quite some time either. It's just something I note as a risk when I adopt an open source tool.</p><hr><p>Ultimately, I think this tool is a great solution for people that need to use any of these tools, but don't want to couple themselves to Cygwin or Bash for Windows. It has solved my Grails, Groovy, and Gradle versioning issues on Windows, and that is more than enough to make it a win in my books.</p>]]></content>
    
    <summary type="html">
    
      Here&#39;s another dev thing I use: Posh-GVM, a Groovy version manager that works for Windows.
    
    </summary>
    
      <category term="java" scheme="http://www.westerndevs.com/categories/java/"/>
    
    
      <category term="powershell" scheme="http://www.westerndevs.com/tags/powershell/"/>
    
      <category term="version manager" scheme="http://www.westerndevs.com/tags/version-manager/"/>
    
      <category term="grails" scheme="http://www.westerndevs.com/tags/grails/"/>
    
      <category term="groovy" scheme="http://www.westerndevs.com/tags/groovy/"/>
    
      <category term="gradle" scheme="http://www.westerndevs.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title type="html">Jabba, the Java Version Manager for Everyone</title>
    <link href="http://www.westerndevs.com/java/jabba/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/java/jabba/</id>
    <published>2017-08-16T13:35:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Here's another dev thing I use: <a href="https://github.com/shyiko/jabba" target="_blank" rel="noopener">Jabba</a>, a cross-platform Java version manager that works for Windows.</p><p>Over the the past few years, I've been doing JDK-based development in an enterprise Windows environment. In that time, I've continually struggled with being able to easily switch between versions of Java on my machine, depending on the project. We have legacy application that run old Java, and modern applications that run newer versions of Java. Being able to switch versions, without having to manually change my environment variables or handle mula</p><p>Now, that is no longer a problem thanks to my good friend, Jabba.</p><p><img src="https://davidwesst.blob.core.windows.net/blog/jabba/jabba-example.gif" alt="Jabba in Action" title="Jabba in Action in a Powershell terminal"></p><h2>What does it do?</h2><p>Exactly what you think: it changes the version of Java you're running on the fly. No need to install anything or worry about conflicting versions, or searching out and installing the specific Java version you need for your project.</p><h2>Using Jabba</h2><p>First thing is installing Jabba, which is a breeze thanks to the following the <a href="https://github.com/shyiko/jabba#windows-10" target="_blank" rel="noopener">instructions provided</a> in the repository README. After that, I included it in my Powershell profile so it initializes it when I start Powershell.</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Jabba</span><br><span class="line">if (Test-Path "H:<span class="symbol">\U</span>sers<span class="symbol">\d</span>w<span class="symbol">\.</span>jabba<span class="symbol">\j</span>abba.ps1") </span><br><span class="line">&#123; </span><br><span class="line">   . "$&#123;HOME&#125;<span class="symbol">\.</span>jabba<span class="symbol">\j</span>abba.ps1" </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To test it out, I run a <code>refreshenv</code> command in the Powershell window, and run <code>jabba -h</code> to see if I get the help file.The commands are pretty straightforward. You can list all the available versions, using <code>jabba ls-remote</code>, install the one(s) you need need with <code>jabba install my-version</code> and you're good to go to run that version of Java.</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">H</span>:\src</span><br><span class="line">&gt; jabba</span><br><span class="line">Java <span class="keyword">Version</span> Manager (https:<span class="comment">//github.com/shyiko/jabba).</span></span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jabba [flags]</span><br><span class="line">  jabba [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  install     Download and install JDK</span><br><span class="line">  uninstall   Uninstall JDK</span><br><span class="line">  link        Resolve or <span class="keyword">update</span> a link</span><br><span class="line">  unlink      Delete a link</span><br><span class="line">  <span class="keyword">use</span>         Modify PATH &amp; JAVA_HOME to <span class="keyword">use</span> specific JDK</span><br><span class="line">  current     <span class="keyword">Display</span> currently '<span class="keyword">use</span>'<span class="keyword">ed</span> <span class="keyword">version</span></span><br><span class="line">  <span class="keyword">ls</span>          <span class="keyword">List</span> installed versions</span><br><span class="line">  <span class="keyword">ls</span>-remote   <span class="keyword">List</span> remote versions available <span class="keyword">for</span> install</span><br><span class="line">  deactivate  Undo effects of `jabba` <span class="keyword">on</span> current <span class="keyword">shell</span></span><br><span class="line">  alias       Resolve or <span class="keyword">update</span> <span class="keyword">an</span> alias</span><br><span class="line">  unalias     Delete <span class="keyword">an</span> alias</span><br><span class="line">  <span class="keyword">which</span>       <span class="keyword">Display</span> path to installed JDK</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --<span class="keyword">version</span>   <span class="keyword">version</span> of jabba</span><br><span class="line"></span><br><span class="line"><span class="keyword">Use</span> <span class="string">"jabba [command] --help"</span> <span class="keyword">for</span> <span class="keyword">more</span> information <span class="keyword">about</span> a command.</span><br></pre></td></tr></table></figure><p>And now you're good to go with whatever version of Java your current command line needs.</p><h3>Won't this conflict with my installed version of Java?</h3><p>Nope. The <a href="https://github.com/shyiko/jabba#faq" target="_blank" rel="noopener">FAQ</a> section of the README covers that.</p><p>In my case, I uninstalled all the different JDK's I had installed to ensure there were no conflicts, and I like to remove tools I'm no longer needing on my machine.</p><h3>But what about my really old legacy JDK on my machine?</h3><p>If you check the <a href="https://github.com/shyiko/jabba#usage" target="_blank" rel="noopener">usage</a> section of the README, you can use Jabba to install JDKs that are hosted in a custom spot.</p><p>In the case of the depracated versions of Java that are difficult to come by, I use the Zulu or OpenJDK versions that are available through Jabba. You can see them when you run <code>jabba ls-remote</code>. It's not an exact replica of the Oracle JDK, but I haven't hit any issues in my legacy enterprise applications.</p><h2>What makes it cool?</h2><p>My prefernce for any dev tool is to have it available through the command line.</p><p>When it comes to Java and Windows, the command line tools out there for Java are a bit limited. The standard answer seems to be to use Powershell to update your environment variables, but that doesn't solve the need to find and install the version I need.</p><p>Jabba solves that for me.</p><p>Plus, since it's written in Go, it works on OSX and Linux, so anyone can use the tool.</p><p>And just to put some more icing on the cake, the solo developer building Jabba was kind enough to implement <a href="https://github.com/shyiko/jabba/issues/67#issuecomment-300869749" target="_blank" rel="noopener">a feature I supported</a> on over a weekend which made the tool work even better for me at work and at home. So, thank you <a href="https://github.com/shyiko" target="_blank" rel="noopener">Stanley Shyiko</a>.</p><h2>What are the drawbacks?</h2><p>I haven't hit any so far, which is pretty impressive considering I use this tools almost every day.</p><hr><p>If you're an enterprise Java developer that needs to support legacy applications, I would strongly suggest taking a look at Jabba. With <a href="https://support.microsoft.com/en-ca/help/13853/windows-lifecycle-fact-sheet" target="_blank" rel="noopener">Windows 7 extended support ending</a> in the next few years, your enterprise will be looking to move you to a new OS, Windows 10 or otherwise.</p><p>With Jabba, you'll at least have a tool that works regardless of how your development machine changes.</p>]]></content>
    
    <summary type="html">
    
      Here&#39;s another dev thing I use: Jabba, a cross-platform Java version manager that works for Windows.
    
    </summary>
    
      <category term="java" scheme="http://www.westerndevs.com/categories/java/"/>
    
    
      <category term="powershell" scheme="http://www.westerndevs.com/tags/powershell/"/>
    
      <category term="version manager" scheme="http://www.westerndevs.com/tags/version-manager/"/>
    
      <category term="java" scheme="http://www.westerndevs.com/tags/java/"/>
    
      <category term="jabba" scheme="http://www.westerndevs.com/tags/jabba/"/>
    
  </entry>
  
  <entry>
    <title type="html">NVS, the Node Version Manger for Everyone</title>
    <link href="http://www.westerndevs.com/javascript/nvs/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/javascript/nvs/</id>
    <published>2017-08-15T16:35:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Here's another dev thing I use: <a href="https://github.com/jasongin/nvs" target="_blank" rel="noopener">NVS</a>, a cross-platform Node version manager that works for Windows.</p><p>It's no secret that I like JavaScript, which includes <a href="nodejs.org/">Node</a>. The history of Node releases has been fast, furious, and <a href="https://stackoverflow.com/questions/27309412/what-is-the-difference-between-node-js-and-io-js" target="_blank" rel="noopener">somewhat turbulent</a> which led to a lot of different versions of Node being released. Manually managing the version of Node in you development enviornment is painful, just like it is for Java. For the Linux and Unix people, there was <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> and <a href="https://github.com/tj/n" target="_blank" rel="noopener">n</a>, but nothing really comparable for Windows.</p><p>Until NVS that is.</p><h2>What does it do?</h2><p>The Node Version Switcher switches versions of Node in environment. So, if you need to jump from 4.8.4 to 6.11.1, no problem. Just a quick <code>nvs add 6.11.1</code> and <code>nvs use 6.11.1</code> and you're ready to go.</p><p>No downloading binaries. No changing environment variables.</p><h2>Using NVS</h2><p>Although supported on <a href="https://github.com/jasongin/nvs#mac-linux" target="_blank" rel="noopener">OSX and Linux</a>, I'm going to focus on Windows as that is the environment where I use it the most.</p><p>You have two different installtion options on Windows, the first being a traditional installer file that you can download from <a href="https://github.com/jasongin/nvs/releases" target="_blank" rel="noopener">the release page</a> for the project.</p><p>The second is using <a href="https://github.com/jasongin/nvs/blob/master/doc/SETUP.md#manual-setup---powershell" target="_blank" rel="noopener">Powershell</a> or the good old fashioned <a href="https://github.com/jasongin/nvs/blob/master/doc/SETUP.md#manual-setup---command-prompt" target="_blank" rel="noopener">command line</a>, both of which are described on the <a href="https://github.com/jasongin/nvs/blob/master/doc/SETUP.md" target="_blank" rel="noopener">setup page</a> for the project.</p><p>NVS even supported Bash for Windows, which is pretty great for those Linux-y Windows people, although it requires a few manual configuration steps.</p><p>Once you get things installed, you can run <code>nvs</code> and go through the interactive menu goodness to get your favourite flavour of Node installed.</p><p><img src="https://davidwesst.blob.core.windows.net/blog/nvs/nvs-menu.gif" alt="NVS Interactive Console Menu" title="NVS Consle Menu in Action"></p><p>I really dig this interactive command line menu, which was created by the NVS author for NVS, and eventually turned into it's own library called <a href="https://github.com/jasongin/console-menu" target="_blank" rel="noopener">console-menu</a>. But that is post for another time.</p><h3>Won't this conflict with my installed version of Node?</h3><p>Not from my experience.</p><p>When I started with NVS, I had a version of Node installed, but I ended up uninstalling just to simplify my development environment. I kept forgetting that I had a base installation of Node installed. This confusion would result in me running <code>node --version</code> only to get a conflicting version number than the one I would see in my Windows Application list, and get me triaging an issue that didn't exist.</p><p>Plus, NVS provides a feature to set a default version of using the <code>nvs link</code> command.</p><h3>What about the global packages I've installed?</h3><p>In the case where you install a package globally using a certain version of Node, when you switch to a different version, you could face some problems. More specifically, around code features available in Node based on what version of Node you've installed, or around the nested dependencies that get installed as part of a package your project needs.</p><p>Not an issue, as NVS provides the <code>migrate</code> command to move packages, global or otherwise from one version of Node to another.</p><h3>But what about my weird, custom Node versions?</h3><p>No issue, because you can point to whatever directory you want as source for Node binaries using the <a href="https://github.com/jasongin/nvs/blob/master/doc/ALIAS.md#aliasing-directories" target="_blank" rel="noopener">aliasing capabilities</a>.</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="tag">\<span class="name">Users</span></span><span class="tag">\<span class="name">dw</span></span><span class="tag">\<span class="name">src</span></span><span class="tag">\<span class="name">_</span></span>scratch</span><br><span class="line">&gt; node --version</span><br><span class="line">v8.1.4</span><br><span class="line"></span><br><span class="line">C:<span class="tag">\<span class="name">Users</span></span><span class="tag">\<span class="name">dw</span></span><span class="tag">\<span class="name">src</span></span><span class="tag">\<span class="name">_</span></span>scratch</span><br><span class="line">&gt; nvs use chakracore/8.1.2</span><br><span class="line">PATH -= <span class="formula">$env:LOCALAPPDATA<span class="tag">\<span class="name">nvs</span></span><span class="tag">\<span class="name">chakracore</span></span><span class="tag">\</span>8.1.4<span class="tag">\<span class="name">x</span></span>64</span></span><br><span class="line"><span class="formula">PATH += $</span>env:LOCALAPPDATA<span class="tag">\<span class="name">nvs</span></span><span class="tag">\<span class="name">chakracore</span></span><span class="tag">\</span>8.1.2<span class="tag">\<span class="name">x</span></span>64</span><br><span class="line"></span><br><span class="line">C:<span class="tag">\<span class="name">Users</span></span><span class="tag">\<span class="name">dw</span></span><span class="tag">\<span class="name">src</span></span><span class="tag">\<span class="name">_</span></span>scratch</span><br><span class="line">&gt; node --version</span><br><span class="line">v8.1.2</span><br></pre></td></tr></table></figure><h2>What makes it cool?</h2><p>It's cross-platform, so that's pretty awesome. But, there's more stuff that I haven't touched on in this post.</p><p>For example, there is bundled integration with <a href="https://github.com/jasongin/nvs#vs-code-support" target="_blank" rel="noopener">Visual Studio Code</a> which is a huge cross-platform bonus for me. VS Code is my editor of choice, and considering that it too is cross-platform, this is pretty great.</p><p>Other coolness to note would be things like <a href="https://github.com/jasongin/nvs#aliases" target="_blank" rel="noopener">aliasing</a> and <a href="">automatic directory swtiching</a>(https://github.com/jasongin/nvs#automatic-switching-per-directory). Not to mention that it supports <a href="https://github.com/nodejs/node-chakracore" target="_blank" rel="noopener">ChrakraCore</a>, making it easy to turn it on for all your <a href="https://github.com/nodejs/node-chakracore#time-travel-debugging" target="_blank" rel="noopener">Time Travel Debugging</a> needs.</p><p>All of that is icing on a delicious dev tool cake.</p><h2>What are the drawbacks?</h2><p>Honestly, I'm not sure. I haven't found any so far, so that counts for something.</p><hr><p>At the end of the day NVS does the job, and it does the job well. Plus, it comes with a bunch of cool extras that can make your Node development experience even more smooth.</p>]]></content>
    
    <summary type="html">
    
      Here&#39;s another dev thing I use: NVS, or the Node Version Switcher. It works on Windows and it&#39;s great.
    
    </summary>
    
      <category term="javascript" scheme="http://www.westerndevs.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="node" scheme="http://www.westerndevs.com/tags/node/"/>
    
      <category term="powershell" scheme="http://www.westerndevs.com/tags/powershell/"/>
    
      <category term="nvs" scheme="http://www.westerndevs.com/tags/nvs/"/>
    
      <category term="version manager" scheme="http://www.westerndevs.com/tags/version-manager/"/>
    
  </entry>
  
  <entry>
    <title type="html">IstanbulJS Code Coverage Reports in VSTS</title>
    <link href="http://www.westerndevs.com/development/istanbuljs-in-vsts/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/development/istanbuljs-in-vsts/</id>
    <published>2017-08-03T16:10:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Here's another dev thing I use: <a href="https://istanbul.js.org/" target="_blank" rel="noopener">IstanbulJS</a> in <a href="https://www.visualstudio.com/team-services/continuous-integration/" target="_blank" rel="noopener">Visual Studio Team Services</a> (VSTS) builds and display the test reports as part of the build reports. When a build completes, I get a report like this one.</p><p><img src="https://davidwesst.blob.core.windows.net/blog/istanbuljs-in-vsts/vsts-code-coverage-report.gif" alt="VSTS Build Report with an IstanbulJS code coverage report" title="VSTS Build Report with an IstanbulJS code coverage report"></p><p>I can browse the report right in the build report, and drill into the results for each file.</p><p>This is how I did it.</p><h2>Step 0: Assumptions</h2><p>I'm not going to go into the details on how to setup IstanbulJS or a test suite, but you'll need a project with tests and uses the IstanbulJS command line tool, <a href="https://github.com/istanbuljs/nyc" target="_blank" rel="noopener">NYC</a>, to run them. My suggestion is to use <a href="https://mochajs.org/" target="_blank" rel="noopener">Mocha</a> as <a href="http://www.westerndevs.com/development/mocha-in-vsts/">the test report can be integreated into VSTS as well</a>.</p><p>You'll also need a VSTS account, which is free and worth the effort.</p><h2>Step 1: Script Your Command</h2><p>The goal here is to be able to run a script command that will execute the appropriate code coverage command, complete with parameters, easily. I use <a href="https://docs.npmjs.com/misc/scripts" target="_blank" rel="noopener">npm scripts</a> for this tutorial, but you can use whatever scripting tool you'd like.</p><p>In my case, I like to run the code coverage report everytime I run my Mocha tests. So, I've updated my <code>npm test</code> command in <em>package.json</em> to use NYC. It looks like:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"./node_modules/.bin/nyc ./node_modules/.bin/mocha --recursive --reporter=mocha-multi-reporters "</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note, that I don't use globally installed packages. I only use the local ones installed in my <em>node_modules</em> folder.</p><h2>Step 2: Configuring NYC</h2><p>I've configured it in the <em>package.json</em> file with an <code>&quot;nyc&quot;</code> configuration object. Mine looks like this:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"nyc"</span>: &#123;</span><br><span class="line">  <span class="string">"check-coverage"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"per-file"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"lines"</span>: <span class="number">99</span>,</span><br><span class="line">  <span class="string">"statements"</span>: <span class="number">99</span>,</span><br><span class="line">  <span class="string">"functions"</span>: <span class="number">99</span>,</span><br><span class="line">  <span class="string">"branches"</span>: <span class="number">99</span>,</span><br><span class="line">  <span class="string">"include"</span>: [</span><br><span class="line">    <span class="string">"src/**/*.js"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"reporter"</span>: [</span><br><span class="line">    <span class="string">"text"</span>,</span><br><span class="line">    <span class="string">"cobertura"</span>,</span><br><span class="line">    <span class="string">"html"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"report-dir"</span>: <span class="string">"./.test_output/coverage"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The part of the configuration we care about for this tutorial are the <code>&quot;reporter&quot;</code> and <code>&quot;report-dir&quot;</code> properties. The rest of the configuration is out of scope for this post, but you can learn more in the <a href="https://github.com/istanbuljs/nyc#configuring-nyc" target="_blank" rel="noopener">nyc README configuration section</a>.</p><p>For <code>&quot;reporters&quot;</code>, you can see that we are using three different reporters. The <em>text</em> reporter is the one that displays in the terminal, the <em>cobertura</em> reporter generates an XML file with all of the results which we'll need, and the <em>html</em> reporter generates the HTML files you saw me browsing at the beginning of this post.</p><p>At this point, when we run <code>npm test</code> we get run our tests and generate the code coverage assets we want.</p><h2>Step 3: Post-Processing the HTML Report</h2><p>This one isn't obvious, but I'm going to save you the trouble of discovering it for yourself.</p><p>That being said, if you don't mind the plain text reports sans-CSS, you can skip this step altogether.</p><p>Our HTML report is going to get displayed in VSTS. Remember, the HTML report isn't just a single file, it's a bunch of HTML files complete with CSS for styling. VSTS doesn't natively load up the extra CSS files, which means we'll need to embed the CSS right into the files themselves to create a copy of the report that'll look good in VSTS.</p><p>Thanks to <a href="http://anthonychu.ca/post/css-styles-vsts-code-coverage/" target="_blank" rel="noopener">this post from Anthony Chu</a>, I had a headstart on figuring out how to solve this issue. The plan is to run a post-processing script on the <em>posttest</em> script command in npm. I called my script file <em>process-coverage-report.js</em> and updated the scripts section of my <em>package.json</em> to look like this:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"./node_modules/.bin/nyc ./node_modules/.bin/mocha --recursive --reporter=mocha-multi-reporters "</span>,</span><br><span class="line">  <span class="string">"posttest"</span>: <span class="string">"node ./tools/process-coverage-report.js"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>The <em>posttest</em> script will everytime we run <code>npm test</code>. You can also call it directly by running <code>npm run posttest</code> but be sure to have test results for it to process.</p><p>I'll cut to the case, and just show you my post-processing code.</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">let fs = <span class="built_in">require</span>(<span class="string">"fs"</span>),</span><br><span class="line">    path = <span class="built_in">require</span>(<span class="string">"path"</span>),</span><br><span class="line">    inline = <span class="built_in">require</span>(<span class="string">"inline-css"</span>);</span><br><span class="line"></span><br><span class="line">const TEST_RESULTS_DIRECTORY = <span class="string">"./.test_output"</span>;</span><br><span class="line">const CODE_COVERAGE_DIRECTORY = <span class="string">"./.test_output/coverage"</span>;</span><br><span class="line"></span><br><span class="line">fs.readdir(CODE_COVERAGE_DIRECTORY, <span class="function"><span class="params">(err, files)</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(err); &#125;</span><br><span class="line"></span><br><span class="line">    let reports = files.filter(<span class="function"><span class="params">(report)</span>=&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> report.endsWith(<span class="string">".html"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    reports.forEach(<span class="function"><span class="params">(report)</span>=&gt;</span> &#123;</span><br><span class="line">        let filePath = path.join(CODE_COVERAGE_DIRECTORY, report);</span><br><span class="line">        let options = &#123; </span><br><span class="line">            url: <span class="string">"file://"</span> + path.resolve(filePath),</span><br><span class="line">            extraCss: <span class="string">".pad1 &#123; padding: 0; &#125;"</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        fs.readFile(path.resolve(filePath), <span class="function"><span class="params">(err, data)</span>=&gt;</span> &#123;</span><br><span class="line">            inline(data, options)</span><br><span class="line">                .<span class="keyword">then</span>(<span class="function"><span class="params">(html)</span>=&gt;</span> &#123;</span><br><span class="line">                    let outputFile = path.join(TEST_RESULTS_DIRECTORY, report);</span><br><span class="line">                    fs.writeFile(outputFile, html, <span class="function"><span class="params">(err)</span>=&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span>(err) &#123; <span class="keyword">throw</span> err; &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="keyword">catch</span>(<span class="function"><span class="params">(err)</span>=&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(err);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>My build doesn't use a task runner like Gulp I settled on <a href="https://www.npmjs.com/package/inline-css" target="_blank" rel="noopener">inline-css</a> because I liked the API and it returned promises. If you're using Gulp or Grunt, there are some good options (<a href="https://www.npmjs.com/package/inline-css" target="_blank" rel="noopener">as suggested by Anthony</a>) for you to create a task to do this for you.</p><p>Now, when you run <code>npm test</code> you'll end up with an extra copy of the HTML report, where you have nothing but HTML files with CSS embedded in the files themselves.</p><h2>Step 4: Adding this to VSTS</h2><p>All you need to do here, is configure your build to use the new code coverage setup. We do that by adding the <em>Publish Code Coverage Results</em> task as a build step and configuring properly. Here's what my configuration looks like:</p><ul><li>Version:  1.*</li><li>Display Name: Publish Code Coverage Results | NYC</li><li>Code Coverage Tool: Cobertura</li><li>Summary File: $(System.DefaultWorkingDirectory)/.test_output/coverage/cobertura-coverage.xml</li><li>Report Directory: $(System.DefaultWorkingDirectory)/.test_output     |</li></ul><p>Your properties may vary, depending on how to configured NYC.</p><h2>Step 5: Done</h2><p>And now we code coverage reporting showing up in VSTS. Huzzah!</p><p>Happy code covering!</p>]]></content>
    
    <summary type="html">
    
      Here&#39;s another dev thing I use: IstanbulJS in Visual Studio Team Services (VSTS) builds and display the test reports as part of the build reports.
    
    </summary>
    
      <category term="development" scheme="http://www.westerndevs.com/categories/development/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="visual studio team services" scheme="http://www.westerndevs.com/tags/visual-studio-team-services/"/>
    
      <category term="testing" scheme="http://www.westerndevs.com/tags/testing/"/>
    
      <category term="istanbuljs" scheme="http://www.westerndevs.com/tags/istanbuljs/"/>
    
      <category term="nyc" scheme="http://www.westerndevs.com/tags/nyc/"/>
    
  </entry>
  
  <entry>
    <title type="html">Mocha Test Reports in VSTS</title>
    <link href="http://www.westerndevs.com/development/mocha-in-vsts/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/development/mocha-in-vsts/</id>
    <published>2017-08-01T15:19:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Here's another dev thing I use: <a href="https://mochajs.org/" target="_blank" rel="noopener">MochaJS</a> in <a href="https://www.visualstudio.com/team-services/continuous-integration/" target="_blank" rel="noopener">Visual Studio Team Services (VSTS) builds</a> and display the test reports as part of the build reports. See? Like this.</p><p><img src="https://davidwesst.blob.core.windows.net/blog/mocha-in-vsts/vsts-test-results-in-action.gif" alt="Mocha Test Report in VSTS" title="Screenshot of a MochaJS test report in VSTS"></p><p>This wasn't me trying to fit a square peg into a round hole. VSTS is exceptionally flexible and it comes bundled with all the pieces you need to do this out of the box. The key is making sure that we setup our test runner to produce the output VSTS needs.</p><h2>Step 0: Assumptions</h2><p>I'm not going to explain how to do this, but I'm going to assume you have a project with tests that use <a href="https://mochajs.org/" target="_blank" rel="noopener">MochaJS</a>. So, you can run <code>mocha</code> from the terminal and your tests run.</p><p>I'm also not going to explain that to use VSTS, you need a VSTS account. They are <a href="https://www.visualstudio.com/team-services/" target="_blank" rel="noopener">free to start</a> and you'll need one to make this work. It's worth the effort.</p><h2>Step 1: Script Your Test Command</h2><p>Personally, I use <a href="https://docs.npmjs.com/misc/scripts" target="_blank" rel="noopener">npm scripts</a> for this. I just figure out what my test command is, and then have the <code>npm test</code> script run that. In my project, I run the locally installed version of MochaJS and use the <code>recursive</code> flag.</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./node_modules/.bin/mocha</span> <span class="params">--recursive</span></span><br></pre></td></tr></table></figure><p>In my <em>package.json</em> file, I have:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"./node_modules/.bin/mocha --recursive"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can just as easily use a Bash or Powershell script for this too if you're not a fan of npm scripts. But you should be.</p><h2>Step 2: Use the mocha-junit-reporter</h2><p>Woah, wait a minute? This is JavaScript not <em>Java</em>.</p><p>I know, but JUnit reports are a standard report format that is supported by VSTS. The key is making sure that our mocha test reports are being output into a format that VSTS can understand. VSTS does not care about your test report to standard out.</p><p>Mocha doesn't come bundled with a JUnit reporter, so I used <a href="https://github.com/michaelleeallen/mocha-junit-reporter" target="_blank" rel="noopener">mocha-junit-reporter</a> which outputs a <em>test-results.xml</em> file to the root project directory by default. I don't like the default, so I have it output to a directory of my choosing.</p><p>So, first we run: <code>npm install --save-dev mocha-junit-reporter</code></p><p>Then, we update our <code>npm test</code> command in <em>package.json</em> to</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"./node_modules/.bin/mocha --recursive --reporter mocha-unit-reporter --reporter-options mochaFile=./test-output/test-results.xml"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Don't forget to add test output directory to your <em>.gitignore</em> file.</p><h3>(OPTIONAL) Step 2a: Using Mutliple Reporters</h3><p>But now I can't see my tests in the terminal output!</p><p>I didn't like that either, so I fixed it by using another Mocha extension called <a href="https://github.com/stanleyhlng/mocha-multi-reporters" target="_blank" rel="noopener">mocha-multi-reporters</a>. It lets us define mutlple reporters for MochaJS and specify reporter parameters in a <em>config.json</em> file that we save in the project root.</p><p>First, install the tool: <code>npm install --save-dev mocha-multi-reporters</code>.</p><p>Then, we update our <code>npm test</code> command to</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"./node_modules/.bin/mocha --recursive --reporter=mocha-multi-reporters"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And finally, we add a <em>config.json</em> file to the project root. I'm using the spec and mocha-junit-reporter, which result in this <em>config.json</em>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"reporterEnabled"</span>: <span class="string">"spec,mocha-junit-reporter"</span>,</span><br><span class="line">    <span class="attr">"mochaJunitReporterReporterOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"mochaFile"</span>: <span class="string">"./.test_output/test-results.xml"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It's not perfect, but it works well enough for my purposes.</p><h4>Gotcha! You should use Mocha-Multi</h4><p>I tried using <a href="https://github.com/glenjamin/mocha-multi" target="_blank" rel="noopener">mocha-multi</a> and I couldn't get it to work with the parameter for <a href="https://github.com/michaelleeallen/mocha-junit-reporter" target="_blank" rel="noopener">mocha-junit-reporter</a>.</p><h4>Gotcha! This produces an xunit.xml file in the root directory</h4><p>It's a <a href="https://github.com/stanleyhlng/mocha-multi-reporters/issues/35" title="My bug report for the XUnit issue in mocha-multi-reporters" target="_blank" rel="noopener">bug with mocha-multi-reporters</a> that I've reported. I'm hoping to get a pull request in for it soon, as it's a pretty easy fix.</p><p>The workaround is to add <em>xunit.xml</em> to your <em>.gitignore</em> file and ignore it yourself.</p><h2>Step 3: Run Test Script in your VSTS Build</h2><p>To run your test script, you need to add a build task  in VSTS. In our case, we're adding the NPM buid task, and configuring it to run our <code>npm test</code> command. The build task properties I use are:</p><ul><li>Version: 1.*</li><li>Display Name: npm test</li><li>Command: custom</li><li>Command and arguments: test</li></ul><p>Here's what it looks like:</p><p><img src="https://davidwesst.blob.core.windows.net/blog/mocha-in-vsts/vsts-npm-test-task.png" alt="Screenshot of npm build step" title="Screenshot of VSTS Build Task that runs the tests"></p><h2>Step 4: Publish the Test Results in VSTS</h2><p>For our last step, we need to publish the test results report to VSTS and tell it how to read it.</p><p>We do this with the Publish Test Results build step in VSTS and configure it with the following properties.</p><ul><li>Version: 2.*</li><li>Display name: Publish Test Results | Mocha</li><li>Test result format: JUnit</li><li>Search folder: $(System.DefaultWorkingDirectory)</li></ul><p>Which looks something like this:</p><p><img src="https://davidwesst.blob.core.windows.net/blog/mocha-in-vsts/vsts-publish-test-results.png" alt="VSTS Publish Test Results Build Step" title="Screenshot of VSTS Build Task that consumes the test report"></p><h2>Step 5: Done</h2><p>And with that, you're good to go to capture and explore your MochaJS test results from within your VSTS build report.</p><p>Happy test reporting!</p>]]></content>
    
    <summary type="html">
    
      Here&#39;s another dev thing I do: Display my MochaJS test report in the Visual Studio Team Services (VSTS) build report.
    
    </summary>
    
      <category term="development" scheme="http://www.westerndevs.com/categories/development/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="visual studio team services" scheme="http://www.westerndevs.com/tags/visual-studio-team-services/"/>
    
      <category term="mocha" scheme="http://www.westerndevs.com/tags/mocha/"/>
    
      <category term="testing" scheme="http://www.westerndevs.com/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title type="html">Conquest April 2017 Devblog</title>
    <link href="http://www.westerndevs.com/devblog/Conquest-April-2017-Devblog/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/devblog/Conquest-April-2017-Devblog/</id>
    <published>2017-05-02T12:31:41.000Z</published>
    <updated>2017-05-02T12:31:41.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This is the April 2017 update for my video game project I call &quot;Conquest&quot;.</p><a id="more"></a><p>This month, I have continued to make progress on my game project. The unexpected thing that happened was the fact that I decided to take a step back and do some research and development before continuing forward with the game idea I have in mind.</p><h2>Status Update</h2><p>Here's the thing: my game project is too big. At least for now, it's too big, and I don't have enough experience and knowledge to be cofortable taking this idea and turning it into a game.</p><p>It's my first original video game, after all, and if you watch or read game design resources like <a href="https://www.youtube.com/user/ExtraCreditz" target="_blank" rel="noopener">Extra Credits</a>, you'll often hear that you should start small and move up from there.</p><p>So that's what I did. And I made <a href="https://github.com/davidwesst/breakout" target="_blank" rel="noopener">Breakout</a> by following <a href="https://developer.mozilla.org/en-US/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript" target="_blank" rel="noopener">this MDN</a> tutorial.</p><p><img src="http://i.imgur.com/TnoJp0Gm.png" alt=""></p><p>I know that this isn't going to blow anyone's mind, but it's first game I've made with nothing but vanilla JavaScript and let me get familiar with the basics of JavaScript game development, without blindly relaying on a framework.</p><p>I intend on continuing with this breakout game for another month as I prepare for <a href="http://prairiedevcon.com/" target="_blank" rel="noopener">Prairie Dev Con</a> to add some polish, clean up the code, and maybe add a few gameplay elements that I worked on this month.</p><p>But now, onto the update.</p><h3>What I've Done</h3><p>Like last time, I'll keep it short and in bullet points:</p><ul><li>Development<ul><li>Did an automated deployment to <a href="https://itch.io/" target="_blank" rel="noopener">Itch.io</a> using Powershell and VSTS</li><li>Experimented with the <a href="http://www.inklestudios.com/ink/" target="_blank" rel="noopener">Ink</a> dialogue system and found how to integrate into build</li><li>Taken a step back on Conquest, in lieu of more R&amp;D through smaller games</li><li>Created <a href="https://github.com/davidwesst/breakout" target="_blank" rel="noopener">Breakout</a> with vanilla ES6 JavaScript, complete with a transpiler and SystemJS modules<ul><li>Thanks <a href="https://github.com/chrinkus/" target="_blank" rel="noopener">Chris</a> for the suggestion and <a href="https://love2dev.com/" target="_blank" rel="noopener">Chris Love from Love2Dev</a> for providing constructive feedback regarding framework dependent developers.</li></ul></li><li>Setup my Vim development environment to be extra cool.</li></ul></li><li>Design<ul><li>Met with an <em>actual video game writer</em> to talk about the best way to start including narrative and dialogue into a game<ul><li>Thanks <a href="http://www.rmorganslade.ca/" target="_blank" rel="noopener">R. Morgan Slade</a> for taking the time and providing some really good feedback and insight</li></ul></li><li>Started migrating some design elements from Conquest into Breakout</li></ul></li></ul><h3>What I've Faced</h3><p>This month, the big thing I faced was the realization that my project is too big for me. It's not that I don't think I would finish it eventually. It's that I don't think I have the skills to make the game fun when I'm done with it.</p><p>I also realized that I am too dependent on frameworks when it comes to game development. It's not that I don't think frameworks have a place or that I'll eventually use one or more of them in my game. It's that I don't know what the framework brings to the table other than an abstraction in development.</p><p>There are plenty of game design tools with full UI's that remove the need to code everything from the ground up, but since I've opted to go the code-focused route because that's what I know best, I should probably know a bit more about the layers code before I start abstracting them away.</p><h3>Where I'm Going</h3><p>May is going to be busy with Prarie Dev Con happening in June, but that won't stop me from working on Conquest. I should also document these discoveries I make a little more, so I'll be doing that through the blog.</p><p>That being said, my plan is to focus on polishing up Breakout by using some of the planned features for Conquest in Breakout. They might not work all that well in that game, but the goal of Breakout isn't to make it a hit, but to experiment with these systems I have planned for Conquest.</p><p>To summarize, here's the plan:</p><ul><li>Refactor Breakout to have a cleaner code base (i.e. modules, objects, etc...)</li><li>Share my VSTS game development discoveries via my blog</li><li>Add some polish to Breakout to complete it</li><li>Prepare my demos for <a href="http://prairiedevcon.com/" target="_blank" rel="noopener">Prairie Dev Con</a> using Breakout as the demo project</li></ul><h2>Conclusion</h2><p>What I've concluded this month is that I need to make games that match my skills as software developer. For that reason, I'm going to focus on learning the guts of the JavaScript by improving my vanilla JS Breakout game.</p><p>All in all, this month has been quite the shift in direction. I went from making one big game, to making one small game that has nothing to do with the original. It's been challenging, but in a good way. Now I can move forward with developing these systems in smaller pieces, refine them, and eventually recombine them into my original game design.</p><p>See you next month.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the April 2017 update for my video game project I call &amp;quot;Conquest&amp;quot;.&lt;/p&gt;
    
    </summary>
    
      <category term="devblog" scheme="http://www.westerndevs.com/categories/devblog/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="vsts" scheme="http://www.westerndevs.com/tags/vsts/"/>
    
      <category term="conquest" scheme="http://www.westerndevs.com/tags/conquest/"/>
    
      <category term="ink" scheme="http://www.westerndevs.com/tags/ink/"/>
    
      <category term="itch.io" scheme="http://www.westerndevs.com/tags/itch-io/"/>
    
  </entry>
  
  <entry>
    <title type="html">Introducing My Game Project - March 2017 Devblog</title>
    <link href="http://www.westerndevs.com/devblog/Conquest-March-2017-Devblog/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/devblog/Conquest-March-2017-Devblog/</id>
    <published>2017-04-03T10:00:00.000Z</published>
    <updated>2017-04-03T10:00:00.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I've wanted to make a video game since I was very young. It got me into programming during my university career, and is something of a passion of mine now that I'm older and more of a seasoned developer.</p><p>I've toyed and tinkered with different game ideas and technologies through the years, but never really got anything done. At the beginning of this year, I started working on something I decided would be my first &quot;real&quot; game. I'm not sure what it is yet, but it's turning into something after three month of development and design in my spare time.</p><p>Today, I'm going to share a bit about it with you, the public, for the first time.</p><h2>Introducing &quot;Conquest&quot;</h2><p>This game is something of a life long conquest for me, but that isn't where the name comes from. This game started out as one idea where conquest made a lot of sense, but has transformed in a few ways over the past month to something completely different. I've been rolling with it and I like where it's headed now, but the name is going to stay the same until I get something a little more locked down.</p><p>In the meantime, you can take a look the <a href="http://imgur.com/a/x7eGr" target="_blank" rel="noopener">first official screenshots</a>:</p><p><img src="http://i.imgur.com/dqEGoFf.png" alt=""></p><p>It's not much to look at, but this is just the beginning.</p><p>The goal is to get the gameplay loop and core systems down, based on the bit of design I have in mind. I've been doing pitch sessions with my SO (significant other), who has helped keep me and the multitude of ideas in check. Graphics and polish will come later, but for now it's all about the gameplay.</p><p>But enough of that, let's get status update.</p><h2>Status Update</h2><p>The point of these posts is to try and help me reflect on what I've done, what issues I've faced, and where I'm going from here. Think of it as a sort of sprint review. Although this is three months of effort, I have started planning month long iterations where each iteration will end with a devblog post.</p><p>For those wondering, I use Visual Studio Team Services for that planning, but I'll discuss that in future regularily scheduled blog posts.</p><h3>What I've Done</h3><p>Over the past three months, I've done quite a bit, but I'll keep it brief with bullet points.</p><ul><li>Development<ul><li>Selected <a href="http://phaser.io/" target="_blank" rel="noopener">Phaser</a> as the base game framework</li><li>Implemented signals for game events, triggered through timers and through player interaction</li><li>Implemented in-game time</li><li>Implemented map metadata layer</li><li>Setup issue and bug tracking in <a href="http://phaser.io/" target="_blank" rel="noopener">VSTS</a></li><li>Setup contiuous integration and deployment to Itch.io using VSTS</li></ul></li><li>Design<ul><li>Did a &quot;pitch&quot; to solidify game idea and core gameplay concepts</li><li>Setup a map design workflow using <a href="http://www.mapeditor.org/" target="_blank" rel="noopener">Tiled</a> map editor</li></ul></li></ul><p>The gist of it is that I've focused on figuring out what sort of game I want to make by focusing on the things I already know: the tech.</p><h3>What I've Faced</h3><p>Plenty.</p><p>I'll be more specific in future posts, but most of everything I've faced over these past three months has been around discovery and learning how to do basic game development. By using TypeScript (with it's definition files) and Phaser as my foundation, I've been moving pretty quickly and learning something new every time I sit down to work on the game.</p><p>The other challenge I've is figuring out where to draw the line between development and design. At this point, I feel like I know where the line is and actually know that there <em>is</em> a line between them. The challenge is making sure that I make sure to keep progress happening in both streams. Development work is familiar to me compared to design and ultimately more of a comfort zone for me to fall back on.</p><p>The problem is that without design, I'm just building game technology without purpose. How do I know what systems to build if I don't know what kind of game I'd like to build?</p><p>I've gotten much better at this over the course of February and March, and intend on keeping that going in future iterations by making sure that the number of dev and design issues are balanced each month.</p><h3>Where I'm Going</h3><p>For the next iteration, I'm going to try and add two more systems to the game: a dialogue system, and an objective/goal system. There are more I'd like to add, but those two are the most critical. With these two in place I think I would have all the systems I need to the first part of the game playable and in front of players.</p><p>For the design side, I have a vision in mind for the first playable part. To build it, I need to design my first &quot;real&quot; map, complete with metadata and a story that is told through interaction with the map. The other thing  will be to make sure that I use the <em>existing</em> systems I've developed to tell the story through the map, rather that defining new systems.</p><p>In summary, the goals for the sprint are:</p><ul><li>Development<ul><li>Display scripted dialogue in-game</li><li>Include objective for the player to accomplish</li></ul></li><li>Design<ul><li>Map of first playable section that tells a story through interaction</li><li>Leverage the each of the existing systems in the map to aid in story telling</li></ul></li></ul><h2>Conclusion</h2><p>This post is the first of many. They will be monthly, and have more specific content about progress.</p><p>For a first post, this is pretty light on the details. That's mainly because there aren't a lot of details to share just yet. For now, all I can say is that I plan on continuing to blog about both the technical and the design challenges that I face along the way. Hopefully, over the next few posts, I will have something for you to play.</p><p>Until next month.</p>]]></content>
    
    <summary type="html">
    
      This is the first of monthly status update posts on my video game project I call Conquest.
    
    </summary>
    
      <category term="devblog" scheme="http://www.westerndevs.com/categories/devblog/"/>
    
    
      <category term="typescript" scheme="http://www.westerndevs.com/tags/typescript/"/>
    
      <category term="vsts" scheme="http://www.westerndevs.com/tags/vsts/"/>
    
      <category term="phaser" scheme="http://www.westerndevs.com/tags/phaser/"/>
    
      <category term="conquest" scheme="http://www.westerndevs.com/tags/conquest/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Compile TypeScript into a Single File with SystemJS Modules with Gulp</title>
    <link href="http://www.westerndevs.com/javascript/How-to-Compile-TypeScript-into-a-Single-File-with-SystemJS-Modules-with-Gulp/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/javascript/How-to-Compile-TypeScript-into-a-Single-File-with-SystemJS-Modules-with-Gulp/</id>
    <published>2017-03-14T13:47:22.000Z</published>
    <updated>2018-04-12T23:57:35.278Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I've been messing around with TypeScript again for my <a href="https://blog.davidwesst.com/2017/03/Intital-Thoughts-on-Using-Phaser/" target="_blank" rel="noopener">game project</a> and wanted a module loader to consume the single file produced by the TypeScript compiler. This time around I decided to use SystemJS and figured I'd share the lessons I learned along the way.</p><h5>Sample Project</h5><p>If you're interested in playing with the code, you can checkout <a href="https://github.com/davidwesst/ts-systemjs" target="_blank" rel="noopener">this GitHub project</a> I setup just for that reason.</p><h5>Previous Post</h5><p>I also posted about doing the same sort of thing <a href="https://blog.davidwesst.com/2016/09/How-to-Compile-Typescript-into-a-Single-File-with-AMD-Modules/" target="_blank" rel="noopener">with AMD and RequireJS</a> complete with <a href="https://github.com/davidwesst/ts-project-template" target="_blank" rel="noopener">a GitHub sample project</a></p><h2>Project Breakdown</h2><p>Here's the gist of it. My project has the following requirements:</p><ol><li>Source code in TypeScript, organized in to multiple modules</li><li>Load external modules into application as dependencies</li><li>Transpile down to a single bundle file</li><li>Load the bundle in the browser</li></ol><p>It seems pretty straight forward, right? Plus, because I'm using TypeScript I figured this would be easy peezy lemon-squeezy with the <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noopener">TypeScript compiler</a> and rich documentation.</p><p>As it turns out, it wasn't that simple.</p><h3>Wait. Where's GulpJS?</h3><p>It's in the sample project handling the transpiling the TypeScript through a task.</p><p>It's actually not required, but rather a convienience for keeping all my build tasks together. I just put it in the title, because it matches the previous post.</p><h2>Problem 1: Using an External Module</h2><p>I wanted to use <a href="https://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> to help handle date objects with my code.</p><p>There were two parts to this:</p><ul><li>Getting it working in the development environment</li><li>Getting it bundled up with SystemJS.</li></ul><h3>Using it in Development</h3><p>I use <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>, which is a great TypeScript development environment.</p><p>Normally, you would use the <a href="https://www.npmjs.com/search?q=%40types" target="_blank" rel="noopener"><code>@types</code></a> collection of defintion files from the NPM which is wired up by default. For Moment, we need to break that.</p><p>The definition file for Moment is found in the library itself. Since I use NPM to handle all my dependencies, you just set this up in your <code>tsconfig.json</code> file.</p><p><img src="http://i.imgur.com/TyAgU0N.png" alt=""></p><p>Then, in code, we import it.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">"moment"</span>;</span><br></pre></td></tr></table></figure><p>Remember: if your project is already using <code>@types</code> definition files, you'll need to add that folder to the <code>typeRoots</code> collection yourself.</p><h3>Bundling it Up</h3><p>Because we're using SystemJS, we need to do is configure it as a path to understand where to find the library when it gets referenced.</p><p>In the <a href="https://github.com/davidwesst/ts-systemjs" target="_blank" rel="noopener">sample project</a>, we do it in <code>script</code> tag on the HTML page, but you can do this in wherever you end up doing your SystemJS configuration.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SystemJS.config(&#123;</span><br><span class="line">    <span class="string">"paths"</span>: &#123;</span><br><span class="line">        <span class="string">"moment"</span>: <span class="string">"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2>Problem 2: Loading the Bundle</h2><p>Making a bundle is easy. Consuming the bundle is something different.</p><h3>Making a Bundle</h3><p>If you're interested in bundling your code into a single file with the compiler, you're limited to AMD or SystemJS modules. This is configured in the <code>tsconfig.json</code> file included in <a href="https://github.com/davidwesst/ts-systemjs" target="_blank" rel="noopener">the sample project</a> with the module property. You can read more about it <a href="https://www.typescriptlang.org/docs/handbook/modules.html" target="_blank" rel="noopener">here in the TypeScript Handbook</a>.</p><p><img src="http://i.imgur.com/gUGeHfI.png" alt=""></p><h3>Consuming the Bundle</h3><p>This is where I got stuck.</p><p>Now I have this fancy bundle, but I need to figure out how to consume it in my HTML page. The solution is pretty simple, but it took some research and some tinkering, but I got there.</p><p>Take a look at the <code>&lt;body&gt;</code> take of the HTML file:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"display"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- script will display content here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.20.9/system.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        SystemJS.config(&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"paths"</span>: &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="string">"moment"</span>: <span class="string">"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        SystemJS.import(<span class="string">"game"</span>)</span></span><br><span class="line"><span class="javascript">            .then(<span class="function">(<span class="params"><span class="built_in">module</span></span>)=&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> g = <span class="keyword">new</span> <span class="built_in">module</span>.Game(<span class="string">"display"</span>);</span></span><br><span class="line"><span class="undefined">                g.start();</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="javascript">            .catch(<span class="function">(<span class="params">error</span>)=&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.error(error);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>I blame myself for getting stuck considering this sort all documented well in the <a href="https://github.com/systemjs/systemjs" target="_blank" rel="noopener">SystemJS documentation on GitHub</a>. Either way, I had issues finding solid resources about using bundles. Hopefull this can help someone else in the future.</p><h2>Conclusion</h2><p>My problems can be traced back to my lack of experience with JavaScript module loaders. And yes, I know that <a href="http://caniuse.com/#feat=es6-module" target="_blank" rel="noopener">ES6 Modules are coming</a>, but the browsers are a ways away from having a full implementation (except for Safari).</p><p>Until then, we'll be using TypeScript and <a href="http://babeljs.io/" target="_blank" rel="noopener">Babel</a> to help us get our modular JavaScript working in the browser.</p>]]></content>
    
    <summary type="html">
    
      I decided to move a TypeScript project from AMD modules (i.e. RequireJS) to SystemJS, still using Gulp. In this post, I walk you through the sample project I&#39;ve created and share the lessons I learned along the way.
    
    </summary>
    
      <category term="javascript" scheme="http://www.westerndevs.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="typescript" scheme="http://www.westerndevs.com/tags/typescript/"/>
    
      <category term="systemjs" scheme="http://www.westerndevs.com/tags/systemjs/"/>
    
      <category term="modules" scheme="http://www.westerndevs.com/tags/modules/"/>
    
      <category term="gulpjs" scheme="http://www.westerndevs.com/tags/gulpjs/"/>
    
  </entry>
  
  <entry>
    <title type="html">Initial Thoughts on Using Phaser</title>
    <link href="http://www.westerndevs.com/javascript/typescript/new-post-Initial-Thoughts-on-Phaser/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/javascript/typescript/new-post-Initial-Thoughts-on-Phaser/</id>
    <published>2017-03-07T11:00:00.000Z</published>
    <updated>2017-03-07T11:00:00.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I'm not a game dev, but have always wanted to make a video game. I've started and stopped so many project over the years, that I have seriously lost count.</p><p>With the new year and a fresh mind, I decided to take a stab at it again, this time focusing on just getting something done rather than getting something <em>done right</em> as a sort of side project.</p><p>It's been about two months since I've started, and I have something basic working (although I'm not willing to share it yet) and I thought I would share my thoughts on Phaser, the framework I decided to use to help me build my game.</p><h2>Techincal Requirements</h2><p>Before we talk about the framework, let's talk about the game itself as you'll need to know what I'm building to understand why I chose the framework.</p><p>Here's the technical rundown:</p><ul><li>2D</li><li>Top-Down Camera</li><li>Tile-based graphics</li><li>Using <a href="http://mapeditor.org" target="_blank" rel="noopener">Tiled</a> for maps</li><li>Gamepad support for player input</li><li>TypeScript support</li></ul><p>If you think back to the old NES (Nintendo Entertainment System) and SNES (Super Nintendo Entertainment System) days, games like Final Fantasy, and the Legend of Zelda are good examples of the look of the game.</p><p><img src="http://i.imgur.com/0LLlYoxb.png" alt="&amp;quot;The Legend of Zelda for the NES&amp;quot;"></p><h3>Where did you come up with these Requirements?</h3><p>I decided to make a game that I wanted to play. That's really about it.</p><p>I have plenty of ideas floating around in my head, but I went with one that had a look and feel of what I like to play.</p><h3>Why TypeScript Support?</h3><p>Although I'm a JavaScript nut, if find that TypeScript combined with the right tooling (Visual Studio Code) helps you learn an API thorugh code completion. Plus, it's compiler helps catch errors along the way without losing the versatility that comes with JavaScript. Since I'm learning a whole new domain (i.e. game development) I wanted to focus more on the learning practices and patterns, rather than worrying about the syntax.</p><p>We'll get into more of this later.</p><h3>Wait! What about the Game Design?!</h3><p>That is a whole other conversation and series of posts that I may share if I ever get this project done. For now, they don't really apply as we're sticking to the technical side of the project.</p><p>(Although if you're interested, ping me on <a href="https://twitter.com/davidwesst" target="_blank" rel="noopener">Twitter</a> to let me know)</p><h2>So, Why Phaser?</h2><p>I did quite a bit of research on this before going with Phaser. The two biggest contenders being <a href="http://babylonjs.com/" target="_blank" rel="noopener">BabylonJS</a> and the <a href="http://www.createjs.com/" target="_blank" rel="noopener">CreateJS Suite</a>.</p><p>At the end of the day, Phaser not only did everything I needed it to do, but it  has a very strong community of support through <a href="http://html5gamedevs.com/" target="_blank" rel="noopener">HTML5GameDevs</a>, and it does everything I need it to do. Plus, I had already tinkered with it a bit so that definitely gave it some extra points during the selection project.</p><h2>The Highlights</h2><p>Now that I'm beyond the &quot;tinkering&quot; phaser, and into building a full game, I think I can weigh-in on the pros and cons I've come across thus far. I'm not far enough along to talk about performance, but for my little game project it seems to be running smoothly without fail.</p><h3>Support is Amazing</h3><p>As mentioned previously, the support from <a href="http://html5gamedevs.com/" target="_blank" rel="noopener">HTML5GameDevs</a> is great. The forums are active, and there is even a live chat for people that are registered.</p><p>I've only asked one question so far, and it was answered very quickly. The rest of the time, I search the forums for my question and 99/100 times I'll find an answer.</p><p>The <a href="https://phaser.io/examples" target="_blank" rel="noopener">examples section</a> of the Phaser website gives links great code snippets that help wrap your brain around how to do things with the framework.</p><p>Lastly, as they prepare Phaser v3, the community has taken on Phaser v2 and has continued to release patches to the framework.</p><h3>Focuses on 2D</h3><p>I'm just starting to learn game development and, on top of that, I'm doing this in my spare time.</p><p>When I get stuck I don't know what I don't know, but I can generally find my way around questions and articles that discuss 2D games. Since Phaser focuses on 2D, it makes consuming the API much more familiar to me rather that navigating my way around 3D game API (i.e. BabylonJS) that bring a whole new vocabulary to the table that I have to learn.</p><h3>Phaser-CE is What You're Looking For</h3><p>It appears that they fixed it on the website, but when I was starting on this project there was no mention of <em>Phaser-CE</em> on the homepage, and so I thought version 2.6.2 was the latest and greatest.</p><p>It turns out, that was incorrect.</p><p>As you'll see <a href="https://phaser.io/download/stable" target="_blank" rel="noopener">here on the Phaser site</a>, version 2.6.2 was the last officially supported release, while v2.7.x is the community edition that is supported by those fine community members I mentioned earlier. So, when you install your dependency with <code>npm install phaser</code> you are installing an old version of the framework. You want <code>npm install phaser-ce</code>.</p><p>The change was minimal, considering it's the same framework. It just took me for a loop as I only figured this out as I tried to submit a pull request, only to find out that I was using the wrong version of Phaser.</p><h3>JavaScript First, TypeScript Second</h3><p>I wanted TypeScript support up front because I knew it would help me get into the Phaser APIs. Now that I'm becoming more familiar with everything, I feel as though I should have toughed it out and stuck with JavaScript and Babel.</p><p>The TypeScript definition files are part of the library and are not available on through <a href="https://www.npmjs.com/package/@types/npm" target="_blank" rel="noopener"><code>@types</code></a> on the NPM. From what I can gather, they are done by hand. This isn't a big deal considering they work fine, but it makes me question their accuracy, especially not being avaialble through <code>@types</code>.</p><h2>Conclusion</h2><p>I don't regret choosing Phaser as it met all my short term goals and I'm still learning a lot about game development and Phaser (and it's community) is helping me with that.</p><p>Next time around, assuming Phaser v3 isn't done yet, I would proabably go with <a href="http://babylonjs.com/" target="_blank" rel="noopener">BabylonJS</a> as it gives you everything Phaser does, but adds some pretty powerful tooling and 3D support along with it, and has the TypeScript support I expect.</p><p>All in all, Phaser has been a great place to start with game development. I highly recommend it.</p>]]></content>
    
    <summary type="html">
    
      As a side project, I started making another JavaScript-based video game and decided to go with Phaser as my framework of choice. Here are my initial thoughts about Phaser after using it on my project for the past two months.
    
    </summary>
    
      <category term="javascript" scheme="http://www.westerndevs.com/categories/javascript/"/>
    
      <category term="typescript" scheme="http://www.westerndevs.com/categories/javascript/typescript/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="typescript" scheme="http://www.westerndevs.com/tags/typescript/"/>
    
      <category term="phaser" scheme="http://www.westerndevs.com/tags/phaser/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Blog with VSTS (Part 4)</title>
    <link href="http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-4/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-4/</id>
    <published>2016-11-21T12:30:00.000Z</published>
    <updated>2016-11-21T12:30:00.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><em>This is part 4 of 5 of my <strong>How to Blog with VSTS</strong> series. Links to the other parts will be added as they are made available.</em></p><ul><li><a href="https://blog.davidwesst.com/2016/10/How-to-Blog-with-VSTS-Part-1/" target="_blank" rel="noopener">Part 1: Setup</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-2/" target="_blank" rel="noopener">Part 2: Code</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="noopener">Part 3: Work</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="noopener">Part 4: Build</a></li><li>Part 5: Release</li></ul><hr><p>I've been tinkering with Visual Studio Team Services off and on since its public release, but never did anything really productive with it. Over the past couple of weeks, I finally bit the bullet and decided to move my most prevelant personal project into VSTS: this blog.</p><p>In this post we are we going to create a build script in VSTS so we can generate our blog content consistently and get it ready to deploy somewhere.</p><h2>Creating Our Build Script</h2><p>First, we need to navigate over to the <em>Build</em> section of VSTS, which you can find in the navigation menu at the top of the page.</p><!-- image of build menu item --><p><img src="http://i.imgur.com/7S55XWDl.png" alt="Build and Releases Menu"></p><p>This is where we're going to create our build script by hitting the &quot;Create New Build&quot; button.</p><!-- image of new build button --><p><img src="http://i.imgur.com/6uCoEEFl.png" alt="New Build Button"></p><h2>Adding Build Tasks (Hexo Edition)</h2><p>VSTS provides plenty of build tasks. Statically generated sites will have different build tasks, so I'm going to walk you through the build tasks I setup for <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>.</p><p>It's pretty straight forward, but it helps to list them out in order.</p><ol><li>Install global npm dependencies</li><li>Install local npm dependencies</li><li>Other stuff that needs doing</li><li>Generate site content</li><li>Store site content as build asset OR Deploy!</li></ol><p>Let's go through these.</p><h3>npm Global Dependencies</h3><p>In this case, I only have one which is <code>hexo-cli</code> so that I can run the <code>hexo generate</code> command later on in our build.</p><p>You could add it's own npm task here, by adding a new task and setting the parameters of the task accordingly.</p><!-- npm install -g task --><p><img src="http://i.imgur.com/h1HFRAJl.png" alt="npm task"></p><p>Personally, I don't have a separate task. I use my project's <code>package.json</code> and set a <a href="https://docs.npmjs.com/misc/scripts" target="_blank" rel="noopener"><em>preinstall</em> script</a> which gets run before the <code>npm install</code> command.</p><p>Either one works really. I just like having my source code setup be as simple as <code>npm install</code> and then <code>npm start</code> to run the site.</p><h3>npm Local Dependencies</h3><p>Just like the previous, except this time we're using the default parameters. We just need the build to run <code>npm install</code> and let it do it's thing.</p><h3>Other Stuff</h3><p>Every project is a unique snowflake, and sometimes you have some extra tasks you need accomplished. In my case, I have a custom theme that I build every time. To accomplish this, I have a PowerShell script in the <code>\tools</code> directory of my source code that gets run every time.</p><!-- powershell task with parameters --><p><img src="http://i.imgur.com/aXmLKcml.png" alt="PowerShell Task with Parameters"></p><h4>CMD, Powershell, and Bash Tasks</h4><p>You're not limited to just PowerShell, but you can have CMD or even bash shell scripts executed. The only caveat of running these is making sure that the build server being used to run your build has these capabilities.</p><p>If you're using the hosted server, like I do, then PowerShell and CMD are your best bets. I did try to have both PowerShell and Bash, which resulted in getting a message saying I &quot;didn't have a host that had these capabilities&quot;.</p><p>Maybe in time we'll have hosted servers that do both, but until then you'll need to setup your own server to handle these unique dependencies or try can conform your code to use one or the other.</p><h4>Keeping it Open Source</h4><p>If you're looking to keep your source open on, you'll likely want to push it out of VSTS and into GitHub or somewhere where the public can get their hands and eyes on it.</p><p>This is the job for another script task. In my case, I followed <a href="https://nkdagility.com/open-source-vsts-tfs-github-better-devops/" target="_blank" rel="noopener">this blog post</a> that <a href="http://www.westerndevs.com/bios/dylan_smith/">Dylan Smith</a> directed me to and followed along.</p><h3>Generate Content</h3><p>Again, another script task. But this one is easier, as we're just running <code>hexo generate</code>.</p><p>You could write a whole script file for this too, but I opted to make it simple and just configure the build task itself.</p><!-- hexo generate build task --><p><img src="http://i.imgur.com/dGWjUTNl.png" alt="hexo generate build task"></p><h3>Save and Publish Site Content</h3><p>We'll discuss this further when we get to <a href="#">releases</a> but we need to save our content assets so we can publish them later. For hexo, this is usually the contents of the <code>public</code> folder.</p><p>To handle this, I use the <em>Copy and Publish Build Assets</em> task and configure it to save the contents of the <code>public</code> folder so that it persists after the build is complete.</p><!-- publish assets task --><p><img src="http://i.imgur.com/LJTk1wKl.png" alt="Copy and Publish Build Assets"></p><h4>...or Deploy!</h4><p>Another option is to just deploy it directly from the build script and skip the whole <a href="#">release management</a> component. This would allow you do a deployment everytime you build, making sure the latest source code is live.</p><p>Again, it's a matter of preference. The reason I like <a href="#">releases</a> over this model is to be able to manage the release of source code independenly of the build itself.</p><h2>Triggering the Build</h2><p>I have two build scripts that are almost identical. One that I use for development and continuous integration. The other is scheduled to prepare a for a weekly release of my blog.</p><p>VSTS accomodates both of these options, which you can see in the <em>Triggers</em> tab of the build script.</p><!-- image of the triggers tab --><p><img src="http://i.imgur.com/YHlzH7Cl.png" alt="Triggers Tab"></p><p>For my development build script, I trigger the build on pushes to the <code>master</code> branch of my repository. I have also configured this build script to run on a private build agent that I have setup.</p><p>I won't be covering private build agents in this series of posts, but I assure you it's very easy. I setup my development machine as a private build server, and had it setup in about 15 minutes after following <a href="https://www.visualstudio.com/en-us/docs/build/admin/agents/v2-windows" target="_blank" rel="noopener">these instructions</a>.</p><h2>Next Up: Releases!</h2><p>We're almost done, and technically you don't need the next step if you just want to do continual deployment and have a deployment step in your build script. That being said, I like having the release pipeline as it gives me a few other things to ensure my blogging goes out without a hitch.</p><p>More on that <a href="#">next time</a>.</p>]]></content>
    
    <summary type="html">
    
      I wanted to understand how to use Visual Studio Team Services (VSTS) for a &quot;real&quot; project. Being a noob, I decided to move my blog to VSTS to understand how _any_ project can benefit from ALM practices using VSTS. In part 4 of 5, we setup a _Build_ script.
    
    </summary>
    
      <category term="alm" scheme="http://www.westerndevs.com/categories/alm/"/>
    
    
      <category term="hexo" scheme="http://www.westerndevs.com/tags/hexo/"/>
    
      <category term="visual studio team services" scheme="http://www.westerndevs.com/tags/visual-studio-team-services/"/>
    
      <category term="vsts" scheme="http://www.westerndevs.com/tags/vsts/"/>
    
      <category term="alm" scheme="http://www.westerndevs.com/tags/alm/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Blog with VSTS (Part 3)</title>
    <link href="http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-3/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-3/</id>
    <published>2016-11-14T12:30:00.000Z</published>
    <updated>2016-11-14T12:30:00.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><em>This is part 3 of 5 of my <strong>How to Blog with VSTS</strong> series. Links to the other parts will be added as they are made available.</em></p><ul><li><a href="https://blog.davidwesst.com/2016/10/How-to-Blog-with-VSTS-Part-1/" target="_blank" rel="noopener">Part 1: Setup</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-2/" target="_blank" rel="noopener">Part 2: Code</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="noopener">Part 3: Work</a></li><li>Part 4: Build</li><li>Part 5: Release</li></ul><hr><p>I've been tinkering with Visual Studio Team Services off and on since its public release, but never did anything really productive with it. Over the past couple of weeks, I finally bit the bullet and decided to move my most prevelant personal project into VSTS: this blog.</p><p>In this post we are going start blogging in a controlled and coordinated manner by planning and using the <em>Work</em> tab in our VSTS project.</p><h2>What is there to plan?</h2><p>Plenty. Although features and bugs are obvious use for <em>Work</em> tab, my primary use case is post planning. I'll be focusing on using <em>Work</em> for blog posts, but realize that you can use these same practices for adding new enhancements or logging bugs in your blog.</p><h2>Post Ideas in the Backlog</h2><p>I tend to have a lot more ideas for posts than I write. Ideas are quick and easy, but writing them (at least writing them properly) is the time consuming part.</p><p>Rather than trying to write a post for every idea, I use the backlog to save my post ideas as they come up. In an Agile project, I create new user story for every post idea and tag it as a &quot;post&quot; so that I can easy filter them later.</p><p>The user story title is the idea for the post title, and I use the description to outline the post.</p><h5>Blogger Note</h5><p>The title and the outline are only two things I fill out on the work item, but without both I don't even bother saving the item because I won't remember the context without the outline.</p><h2>Planning my Posts</h2><p>Now that we have a post backlog, I start planning what posts I am going to write. In my case, this is just like sprint planning and VSTS makes this easy.</p><h3>Setting up Iterations</h3><p>For starters, I setup my iterations. I like planning about one month at a time, so I go with 4-week iterations and named by the month that consumes most of the iteration. This all happens in the <em>Work</em> configuation section of the site.</p><p><img src="http://i.imgur.com/E4GjQDM.png" alt="Work Configuration Menu"></p><p><img src="http://i.imgur.com/a27TBI4.png" alt="Creating a New Iteration"></p><h3>The <s>Sprint</s> Post Planning</h3><p>Now that we have iterations, I plan what posts I want to write for the month.</p><p>I do this by dragging the posts onto the iteration on the right side, and adding tasks as described by the <a href="https://www.visualstudio.com/en-us/docs/work/scrum/sprint-planning" target="_blank" rel="noopener">VSTS team</a>.</p><p><img src="http://i.imgur.com/67xoqOK.gif" alt="Adding a User Story to an Iteration"></p><h4>Tasks and Templates</h4><p>Although tasks on a blog post work item might sound excessive, my writing process has multiple steps to try and make it easy for me to blog. First I write the initial draft (text-only), followed by proof reading and filling in the images and links that I've left. Sometimes there are other tasks like updating links on old posts, like on this post which is part of a series of posts.</p><p>Since the tasks are so similar, I created a quick template that I apply to a work item that automatically puts in the tags and general tasks.</p><h3>Why do all this Planning?</h3><p>The planning takes me about 15 minutes a month, but it's still a fair question.</p><p>Because my blog is something I do on my own time, I need to stay organized so that I can go from 0 to writing in 5 minutes. Between my day job, side project, family, social committments, and supporting a local user group, my time is limited. When I have 30 minutes, I try and get something done as quickly as possible.</p><p>I found that without planning a lot of my time was spent trying to figure out what I did last time I blogged. Even if it only takes like 20 or 30 minutes to get myself sorted out and blogging, sometimes that is all the time I have to commit. If I spend all my time getting ready to blog, I won't have any time to <em>actually</em> blog.</p><h2>Writing a Post</h2><p>Now that we know what we're writing about, we can start writing posts.</p><p>Because we're using a <a href="https://www.staticgen.com/" target="_blank" rel="noopener">static site generator</a> a post is a new markdown file and possibly couple of image files. This is analagous adding a new feature to any other software project, and thus it is treated as such.</p><p>For me, I create a new <a href="">topic branch</a> for the post. Since I host my source code in VSTS, I use the web UI to create a new branch in the work item. On my local machine, I create a new local branch that is mapped to the new remote branch and start create a new draft post with <code>hexo new draft &quot;My Post Title&quot;</code>.</p><p><img src="http://i.imgur.com/3xZztPR.png" alt="Creating a new branch from the work item"></p><p>This creates a new post file in the <code>source\_drafts</code> folder of the project, and I start writing and going through the tasks. As I complete the tasks I make commits and associate them with the tasks and work items by adding the ID numbers in the messages. For example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"wrote initial draft. part of #201 closes task #212"</span></span><br></pre></td></tr></table></figure><p>The <code>#201</code> and <code>#212</code> get picked up by VSTS and associate them with the cooresponding task and user story, just like it does in GitHub. Unlike GitHub, the <code>closes</code> key word doesn't actually close the work item, which I don't mind, but should be noted for those coming from GitHub like I did.</p><p><img src="http://i.imgur.com/ZO8nzTM.png" alt="Related Work in a Work Item"></p><p>Once I complete all my tasks and push all the commits to VSTS, I create a Pull Request and move the work item on the board to the &quot;Committed&quot; column.</p><p><img src="http://i.imgur.com/xT1tfEf.png" alt="A VSTS Pull Request"></p><h3>Why a Pull Request?</h3><p>Again, another good question. You're pretty good at this.</p><p>Some might it's completely unnecessary for a solo project like a blog, I like to use them for a few reasons.</p><p>For starters, VSTS (just like GitHub) gives you a web-based interface for reviewing all the code you're about to merge into your branch. This gives me an opportunity to review my post and to make sure all the pieces are in place. I'm usually about a week ahead of each post, so doing a pull request</p><p>Second, it makes the merge a bit more noticeable in the project. When I have a Pull Request waiting, my Visual Studio Code plugin will highlight it in the status bar, and it will also show up in the web-based UI.</p><p>Lastly, and most importantly, it provides me a way to publish a post without needing to have access source code and a git command line. When I'm ready to share a post, I merge a pull request into the <code>master</code> branch which then triggers a <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="noopener">build</a> and eventually a <a href="#">release</a>, which we will cover in future posts. All of that can be done from the web UI, which means as long as I have an internet connection on a device, I can login and publish a post.</p><h4>What about Scheduling Posts?</h4><p>There are ways to do that with Hexo and plenty of other static site generators. In my case, I use the <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="noopener">Build</a> and <a href="#">Release</a> parts of VSTS to manage this for me. To be continued...</p><h2>Ready. Set. Blog!</h2><p>Now we're saving post ideas as user stories, writing posts and committing them to their own topic branches, and triggering a publish workflow through Pull Requests which gives us an opportinity to do proof read prior to publishing.</p><p>Next up, we're going to <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="noopener">Build</a> our blog.</p>]]></content>
    
    <summary type="html">
    
      I wanted to understand how to use Visual Studio Team Services (VSTS) for a &quot;real&quot; project. Being a noob, I decided to move my blog to VSTS to understand how _any_ project can benefit from ALM practices using VSTS. In part 3 of 5, we start to make plans and _Work_ on our blog.
    
    </summary>
    
      <category term="alm" scheme="http://www.westerndevs.com/categories/alm/"/>
    
    
      <category term="hexo" scheme="http://www.westerndevs.com/tags/hexo/"/>
    
      <category term="visual studio team services" scheme="http://www.westerndevs.com/tags/visual-studio-team-services/"/>
    
      <category term="vsts" scheme="http://www.westerndevs.com/tags/vsts/"/>
    
      <category term="alm" scheme="http://www.westerndevs.com/tags/alm/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Blog with VSTS (Part 2)</title>
    <link href="http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-2/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-2/</id>
    <published>2016-11-07T14:00:00.000Z</published>
    <updated>2018-04-12T23:57:35.278Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><em>This is part 2 of 5 of my <strong>How to Blog with VSTS</strong> series. Links to the other parts will be added as they are made available.</em></p><ul><li><a href="https://blog.davidwesst.com/2016/10/How-to-Blog-with-VSTS-Part-1/" target="_blank" rel="noopener">Part 1: Setup</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-2/" target="_blank" rel="noopener">Part 2: Code</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="noopener">Part 3: Work</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="noopener">Part 4: Build</a></li><li>Part 5: Release</li></ul><hr><p>I've been tinkering with Visual Studio Team Services off and on since its public release, but never did anything really productive with it. Over the past couple of weeks, I finally bit the bullet and decided to move my most prevelant personal project into VSTS: this blog.</p><p>In this post we are going to get our blog setup in source control so we can start add posts.</p><h2>You Don't Need Your Code in VSTS to Use VSTS</h2><p>This is important.</p><p>VSTS is an all-in-one solution for your software project. Source control is a part of that solution, but it should be noted that <em>you don't <strong>need</strong> to use VSTS hosted source control</em> to use VSTS. I had originally setup my project just to mess with builds, releases, and work items. All my <a href="https://github.com/davidwesst/dw-blog" target="_blank" rel="noopener">source code</a> lived exclusively on GitHub, and VSTS still worked just fine.</p><p>The only difference I've found is a few &quot;nice to have&quot; features in the Work tab, which we'll cover <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="noopener">in the next post</a>. Generally speaking, though, there isn't any significant differences or advantages with using VSTS to host your code except for convienience and those few &quot;nice to have&quot; features I mentioned.</p><h3>But I Want to Stay Open Source!</h3><p>VSTS <em>does not</em> provide you with a public view of your source code. This is my major criticism of the <em>Code</em> features, and for VSTS as a whole.</p><p>That being said, if I want people to be able to view my source code (which I do) then GitHub is a much better platform for that purpose. Consider that GitHub is ubiquitous with open source software development, so much so that even Microsoft uses it to share source code. People are more likely to find my code on GitHub than the focused platform that is VSTS.</p><p>Still, the visibility is a project. To solve this just use both. I use the private repositories of VSTS as my working repos where a have a ton of branches and use that for my builds, feature development and so on. When my work is done, I publish my branches to GitHub where people could make pull requests, review my code, and so on.</p><p>In a sense I use VSTS for internal development and GitHub for external/public development and feedback.</p><h3>But Now My Development Isn't Transparent!</h3><p>You're right, other than my git history, it's not.</p><p>But, as previously mentioned, you don't need to use VSTS to host your source code or your work items (as you'll see in <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="noopener">part 3</a>). You just need to use the parts you want, and use other tools as you see fit. If you only want to use VSTS for the builds and releases and GitHub for source control and issue tracking, then by all means go ahead and do that.</p><p>In my case, my blog is a one man show that doesn't really get a lot of people reviewing the source code. I don't need the transparency for a project this small, but I still like keeping code visible and I keep tabs on the GitHub repository by using the <a href="https://marketplace.visualstudio.com/items?itemName=YodLabs.yodlabs-githubstats" target="_blank" rel="noopener">GitHub Stats Widget from Yod Labs</a>.</p><p>If you're still interested in using the code tab, then keep calm and carry on. If not, you can jump ahead to the <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="noopener">Work</a>, <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="noopener">Builds</a>, or <a href="#">Releases</a> posts.</p><h2>The &quot;Code&quot; Tab</h2><p><img src="http://i.imgur.com/LgqbXYyl.png" alt="Code is front and center in VSTS"></p><p>When you open up your project in VSTS, you'll see the &quot;Code&quot; link in the header. This is where we'll be living for the duration of this post. I am also assuming that did as I did in <a href="https://blog.davidwesst.com/2016/10/How-to-Blog-with-VSTS-Part-1/" target="_blank" rel="noopener">part 1</a> and selected Git as the type of source control you want to use for your project.</p><h3>The Default Project Repository</h3><p>When you setup your project, you're given a default project repository with the same name of the project. In my case, I have a repository called <em>davidwesst.com</em>.</p><p>You could use this to store the source code of your blog, but I tend to use this repository as a project wiki that spans all repositories. When you click on the &quot;Welcome&quot; link on your project home page, you can see a rendered version of the README.md files in each of your repositories. This repository ends up acting as the &quot;root&quot; of all documentation on the project.</p><p>If you delete it and go back to the Welcome page you get this message:</p><p><img src="http://i.imgur.com/NaI2INbl.png" alt="When You Don't Have a Default Repository"></p><p>Since VSTS has a decicated spot for it anyway, I figure it makes sense to use it for cross-repository documentation.</p><h3>Creating Your Blog Repository</h3><p>Click on the repository dropdown menu and select <em>New Repository</em>. Name it and you're ready to push source code up to VSTS. Just follow the your static site generators instructions to setup your blog, and push the code up.</p><p>If you already have your blog published somewhere else like GitHub, you can use the <em>Import Repository</em> feature and clone the source and the history into VSTS.</p><p><img src="http://i.imgur.com/XC8Oqnpl.png" alt="Repo Dropdown Menu"></p><h4>For Those Using Hexo</h4><p>If you're using Hexo as your static site generator, you can follow <a href="https://hexo.io/docs/setup.html" target="_blank" rel="noopener">these instructions</a> to get setup.</p><p>Before you push, make sure you add a <code>.gitignore</code> file that excludes the <em>public</em> and <em>node_modules</em> as those folders contain the generated static content and generator dependencies, which we don't need to store in source control.</p><h2>Writing Blog Posts</h2><p>We will tackle this topic again in <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="noopener">part 3</a> but for now I want to describe the workflow I use to write blog posts. It should be noted that the workflow I'm about to describe works in either VSTS or GitHub. I used it in GitHub for a long time, and it continues to serve me well in VSTS.</p><p>Here's a summary of what I do:</p><ol><li>Create a new branch off of <code>master</code></li><li>Write the post and commit all files to the new branch</li><li>Create a Pull Request to pull the post branch into <code>master</code></li><li>Approve the PR when I'm ready to publish the post</li></ol><h3>Post Branches</h3><p>With a static site, or in this case a static blog, each post is a new file (or files if you're including images). I think of each post as a new feature and use a <a href="https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows#Topic-Branches" target="_blank" rel="noopener"><em>topic branch</em></a>.</p><p>My <code>master</code> branch is my most recent and stable code, and so each post is a branch off of <code>master</code>. In short, I do the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b post/my-new-post</span><br><span class="line"><span class="comment"># ...write the post...</span></span><br><span class="line">git add . --all</span><br><span class="line">git commit -m <span class="string">"wrote new post"</span></span><br><span class="line">git push -u origin post/my-new-post</span><br></pre></td></tr></table></figure><p>When I'm done, the branch contains everything I need to publish the post. All I need to do is merge, but I generally don't do that from the command line on my machine. Rather, I use Pull Requests.</p><h3>Pull Requests</h3><p>You may have noticed the Pull Requests link in the header earlier, which is a nice way to merge a post branch without needing a computer with the project setup. In my case, I tend to write my posts in advance and want to publish them on Monday mornings. I don't necessarily want to have to open up a command line and do the merge and push from my workstation.</p><p>With Pull Requests, I can do the merge from any web browser, and it forces me to give myself a code review. I look over the spelling and grammar and make sure everything looks good. When I'm done, I click &quot;Complete&quot; and it's merged into my master branch, which is what is used to generate the site content and published to my web host.</p><p><img src="http://i.imgur.com/ZXtAeaHl.png" alt="A Pull Request"></p><h2>But Wait, There's More!</h2><p>Absolultely.</p><p>More specifically <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="noopener">Work</a> for managing issue tracking, <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="noopener">Builds</a> for generating the blog content, and <a href="#">Releases</a> for publishing posts. So stay tuned!</p>]]></content>
    
    <summary type="html">
    
      I wanted to understand how to use Visual Studio Team Services (VSTS) for a &quot;real&quot; project. Being a noob, I decided to move my blog to VSTS to understand how _any_ project can benefit from ALM practices using VSTS. In part 2 of 5, we get our blog into source control.
    
    </summary>
    
      <category term="alm" scheme="http://www.westerndevs.com/categories/alm/"/>
    
    
      <category term="hexo" scheme="http://www.westerndevs.com/tags/hexo/"/>
    
      <category term="git" scheme="http://www.westerndevs.com/tags/git/"/>
    
      <category term="visual studio team services" scheme="http://www.westerndevs.com/tags/visual-studio-team-services/"/>
    
      <category term="vsts" scheme="http://www.westerndevs.com/tags/vsts/"/>
    
      <category term="alm" scheme="http://www.westerndevs.com/tags/alm/"/>
    
      <category term="github" scheme="http://www.westerndevs.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Blog with VSTS (Part 1)</title>
    <link href="http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-1/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-1/</id>
    <published>2016-10-31T12:43:31.000Z</published>
    <updated>2018-04-12T23:57:35.278Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><em>This is part 1 of 5 of my <strong>How to Blog with VSTS</strong> series. Links to the other parts will be added as they are made available.</em></p><ul><li><a href="https://blog.davidwesst.com/2016/10/How-to-Blog-with-VSTS-Part-1/" target="_blank" rel="noopener">Part 1: Setup</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-2/" target="_blank" rel="noopener">Part 2: Code</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="noopener">Part 3: Work</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="noopener">Part 4: Build</a></li><li>Part 5: Release</li></ul><hr><p>I've been tinkering with Visual Studio Team Services off and on since its public release, but never did anything really productive with it. Over the past couple of weeks, I finally bit the bullet and decided to move my most prevelant personal project into VSTS: this blog.</p><p>This post covers the setup, and more specifically what I use to produce my lovely blog. We'll get into the thick of it in <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-2/" target="_blank" rel="noopener">part 2</a>.</p><h3>Woah. VSTS <em>just</em> for a Blog?</h3><p>I know. Let me address this first before we continue.</p><p>It's definitely overkill. But, it provided me with a great learning experience for VSTS and the application lifecycle management tools is provides. It also was something that I'll actually use on a regular basis, as you'll see if you get through the whole series of posts.</p><p>So, yes it's like using a grenade launcher to kill an ant. That being said, it definitely gets the job done.</p><h2>The Parts</h2><p>Here's what I use in my blog project, and what you'll need if you're going to follow along.</p><h3>Hexo or another Static Site Generator</h3><p>If you're not familiar with static site generators, they are great for developers looking to blog or create simple sites. I won't be going into the details on how to use one, but they all seem to provide a similar sort of experience.</p><p>All you do is add files, generally in <a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">Markdown</a>, fill out the configuration file, and run the generate command. The generator then generates a series of static HTML files from your content and then you have the files you need to publish to a web server somewhere.</p><p>No server-side code, no database, just a bunch of files. Real simple.</p><p>I use <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> for my <a href="https://blog.davidwesst.com" target="_blank" rel="noopener">blog</a>, and it is used for the <a href="http://www.westerndevs.com">Western Devs</a> site. It works well, and makes scripting your build and deployment (<a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="noopener">which we'll see later</a>) much easier.</p><p>If you don't like Hexo then take a <a href="https://www.staticgen.com/" target="_blank" rel="noopener">look here</a> for a bunch of static site generators based in a variety of languages.</p><h3>Visual Studio Team Services Account</h3><p>Sign up for the free account <a href="https://www.visualstudio.com/vsts-test/" target="_blank" rel="noopener">here</a> and create a new team project. I used the <em>Agile</em> process because I found it gave me the flexibility I wanted, and <em>Git</em> for source control.</p><p>If you want more details about the project processes available, and the differences between them, take a look at <a href="https://www.visualstudio.com/en-us/docs/work/guidance/choose-process" target="_blank" rel="noopener">this link</a>.</p><p><img src="http://i.imgur.com/CYlb9sNm.png" alt="&amp;quot;Create a New Project in VSTS&amp;quot;"></p><h3>Web Host</h3><p>Just like any website, you're going to need a place to host it. Lucky for us, we're only hosting static files which makes the options pretty open.</p><p>I'm using Windows Azure, which again is overkill considering it's just static files, but I like it. If you don't want to spend money, I have also used <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> which is free and works just as well for what we'll be doing.</p><p>The important part is having a place to host the files once they are generated. No more, no less.</p><h3>Web Browser</h3><p>VSTS is browser-based, so get a your favourite modern browser, get it updated, and you're good to go.</p><h3>Code Editor</h3><p>We're not going to be doing much code, but it'll come in handy later on.</p><p>Personally, I jump between <a href="http://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a> and <a href="http://www.vim.org/" target="_blank" rel="noopener">Vim</a>. I'm sure you have your favourite, and that'll do just fine for our purposes.</p><h2>You Forgot Visual Studio</h2><p>No I didn't. I don't use Visual Studio, nor do we need it.</p><p>It's not that I don't like it, but it's too heavy for the amount of coding I actually do for my blog. VSTS provides us with a web-based user interface that does everything we need for managing the source code, builds, and so on.</p><p>In conclusion, I don't use Visual Studio here because I don't need it.</p><h2>And We're Ready</h2><p>Armed with our toolbox of goodies and our project created, we're good to go on starting to blog with VSTS. <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-2/" target="_blank" rel="noopener">Next up</a>, we'll starting with what is familiar and getting our code into VSTS.</p>]]></content>
    
    <summary type="html">
    
      I wanted to understand how to use Visual Studio Team Services (VSTS) for a &quot;real&quot; project. Being a noob, I decided to move my blog to VSTS to understand how _any_ project can benefit from ALM practices using VSTS. In part 1 of 5, we get things setup.
    
    </summary>
    
      <category term="alm" scheme="http://www.westerndevs.com/categories/alm/"/>
    
    
      <category term="hexo" scheme="http://www.westerndevs.com/tags/hexo/"/>
    
      <category term="visual studio team services" scheme="http://www.westerndevs.com/tags/visual-studio-team-services/"/>
    
      <category term="vsts" scheme="http://www.westerndevs.com/tags/vsts/"/>
    
      <category term="alm" scheme="http://www.westerndevs.com/tags/alm/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Use Global NPM Packages on a VSTS Self-Hosted Build Agent</title>
    <link href="http://www.westerndevs.com/development/How-to-Use-Global-NPM-Packages-on-a-VSTS-Self-Hosted-Build-Agent/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/development/How-to-Use-Global-NPM-Packages-on-a-VSTS-Self-Hosted-Build-Agent/</id>
    <published>2016-10-24T12:33:01.000Z</published>
    <updated>2018-04-12T23:57:35.278Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I took a couple of weeks off of blogging to focus on a building my presentation for <a href="http://www.prdcdeliver.com/" target="_blank" rel="noopener">Deliver</a>. In my spare time, I started tinkering with Visual Studio Team Services, where decided to start by automating the build and release of this blog.</p><p>My build script is pretty straight forward. Setup the global dependencies with NPM, setup the local dependencies with NPM, generate the content, and publish the generated assets. This worked in my hosted agent, but not my self-hosted agent.</p><p>I found a few solutions, but I'll go through the one I selected for my build agent.</p><h3>The Problem</h3><p>My build script would run <code>npm install --global hexo-cli</code> and execute as expected. When the next step would try and use the <code>hexo generate</code> command, I would get the following error:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##[error]hexo : The term 'hexo' is not recognized as the name of a cmdlet, function, script file, or operable program. Check </span></span><br><span class="line"><span class="keyword">the</span> spelling <span class="keyword">of</span> <span class="keyword">the</span> name, <span class="keyword">or</span> <span class="keyword">if</span> <span class="keyword">a</span> path was included, verify that <span class="keyword">the</span> path is correct <span class="keyword">and</span> <span class="keyword">try</span> again.</span><br></pre></td></tr></table></figure><p>Even though the install command was successful, the build script still couldn't use the tool installed.</p><p>Another symptom of this problem is that Team Services can't see global NPM packages as common capabilities, such as Bower, Gulp, and Grunt.</p><p><img src="http://i.imgur.com/pkLEzkEl.png" alt="&amp;quot;Gulp and Grunt as capabilities&amp;quot;"></p><p>I setup my build agent to use the NetworkService user account, but it could be setup for any user. The problem is that the NetworkService account can't see the global packages on the machine after they are installed. The solution is to configure NPM to point to a folder that is visible to the NetworkService account.</p><p>Here's how you do it.</p><h3>The Solution</h3><p>I found <a href="http://stackoverflow.com/questions/38570209/making-global-npm-packages-available-to-all-users-on-windows-2012-server" target="_blank" rel="noopener">this solution on StackOverflow</a> which lead me in the right direction, although I didn't follow all of it.</p><p>The <a href="https://docs.npmjs.com/cli/prefix" target="_blank" rel="noopener"><code>npm prefix -g</code></a> command shows us path to global prefix folder, where the global npm packages are stored. We need to point this to a directory that NetworkService can read and execute. Generally speaking, the prefix folder is usually found in the user's AppData folder.</p><p>To change the prefix, run the command <code>npm config set prefix C:\\Path\\To\\Folder\\AppData\\Roaming\\npm</code> which will change the npm prefix folder to be the one specified. Because I've set my build agent NetworkService account, I point it at the NetworkService account AppData npm folder for simplicity.</p><p>Then add the folder to the PATH variable for the machine. This will let VSTS see the npm packages as capabilities so that it knows that our build server can execute Grunt, Gulp, and Bower tasks.</p><h4>Why Didn't You Reset the Prefix?</h4><p>It makes sense to reset the prefix to the previous value after the build has complete, as described in the StackOverflow solution. In my case, I wanted to make sure that if someone were logging into the build server to add another global package, let's say something like Hexo CLI, then it would be installed in the appropriate directory.</p><p>I didn't reset the prefix because I wanted to permanently configure the build agent. It's a small build server that I'm using to experiment with continuous integration and deployment. If it's good enough for StackOverflow then it's good enough for me.</p><h2>A Few Alternative Solutions</h2><p>As an alternative solution you could setup a new directory that isn't the AppData folder, add the new folder to the PATH, and then point the prefix folder at build time. You could also leverage the <code>npm bin</code> setting and setup alias in your package.json file for the global commands you're looking to use (Thanks to <a href="http://www.aaron-powell.com/" target="_blank" rel="noopener">Aaron Powell</a> for providing me with that one), which is another good solution that I'll revisit if I use something other than VSTS for builds.</p>]]></content>
    
    <summary type="html">
    
      I setup a self-hosted build agent in Visual Studio Team Services. My build installed global NPM packages, but the tasks that used them later on in the script would fail because they were unable to use them. This post describes what I did to get them working.
    
    </summary>
    
      <category term="development" scheme="http://www.westerndevs.com/categories/development/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="visual studio team services" scheme="http://www.westerndevs.com/tags/visual-studio-team-services/"/>
    
      <category term="nodejs" scheme="http://www.westerndevs.com/tags/nodejs/"/>
    
      <category term="npm" scheme="http://www.westerndevs.com/tags/npm/"/>
    
  </entry>
  
</feed>
