<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Western Devs</title>
  
  <link href="/feeds/simon_timms" rel="self" type="application/atom+xml"/>
  <link href="http://www.westerndevs.com" rel="alternate" type="application/atom+xml"/>
  
  <updated>2018-04-12T23:57:35.282Z</updated>
  <id>http://www.westerndevs.com/</id>
  
  <author>
    <name>Western Devs</name>
	<uri>http://www.westerndevs.com</uri>
    <email>info@westerndevs.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title type="html">Environment Agnostic Packaging - Just Do It</title>
    <link href="http://www.westerndevs.com/Development/Environment-independent-packaging/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Development/Environment-independent-packaging/</id>
    <published>2018-03-28T23:38:30.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I've been noticing a bit of a trend lately around how some tools suggest you package your builds: they build differently for each environment. This is super-inconvenient if you're trying to progress a package through multiple environments. Just don't package configuration in with your build packages.</p><a id="more"></a><p>Okay, let's break this down: when we build software as part of a release process on a CI server we end up with a package at the end. In modern devops, or what I would have called 'release engineering' back in the day, we then take this package and run it through the rest of the pipeline. The rest of the pipeline may consist of deploying to a test server, running integration tests, running UI tests, and promoting to higher environments. You can think the pipeline extending all the way out to the end user. The rule of thumb is that it is cheaper to catch errors and problems earlier in the build pipeline than later. That makes a lot of sense: a unit test catching a problem has an impact only on that developer while a user discovering a problem involves all sorts of layers of technical support and issue tracking, not to mention the cost of redeploying.</p><style>@keyframes slidein {  from {    left: 0%;  }  to {    left: 620px;  }}.block{width: 50px; height: 50px;   background-color: #39d;   animation-duration: 12s;  animation-name: slidein;  animation-iteration-count: infinite;  animation-timing-function: linear;  display: inline-block;  position: absolute;}</style><div style="width: 100%; border-bottom: 3px black solid; height: 50px"><div style="animation-delay: 0s;" class="block"></div><div style="animation-delay: -8s;" class="block"></div><div style="animation-delay: -4s;" class="block"></div></div><p>One of the key features of the build pipeline is that the package which is released to production is the same package which has gone through the pipeline. If the package is different then what is the point of all the testing done in the pipeline?</p><p>That questions was rhetorical but let me answer it anyway: There is no point, it is a waste and it wrecks the quality of your software. This is why I'm so surprised to see a number of really popular software packages which suggest compiling environment information into the package. This means that it no longer possible to deploy the package to testing environments or to environments not envisioned at build time.</p><p>The two packages I've encountered recently which commit this sin are Angular 2/4/5 and the Serverless framework. Angular's build packages everything up using the <a href="https://blog.angulartraining.com/how-to-manage-different-environments-with-angular-cli-883c26e99d15" target="_blank" rel="noopener">environment</a> selected at build time and Serverless uses <a href="https://serverless.com/framework/docs/providers/aws/guide/variables/" target="_blank" rel="noopener">stages</a> which are basically the same thing.</p><p>Now some people will claim that just rebuilding the same source code for each environment isn't a big deal: it will result it the same executable. Except that there are tons of times when it won't. <code>#ifdefs</code> can exercise different code paths, optimization levels on the compiler can produce different output, any one of a hundred other things could be different. The only way to be sure the package progressing through environments is correct is to ensure that it is, indeed, the same package.</p><p>If you're a developer choosing frameworks I implore you to consider the full lifecycle of your package as it travels down the pipeline. Just pick a framework which supports sane devops practices. Just do it.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I&#39;ve been noticing a bit of a trend lately around how some tools suggest you package your builds: they build differently for each environment. This is super-inconvenient if you&#39;re trying to progress a package through multiple environments. Just don&#39;t package configuration in with your build packages.&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://www.westerndevs.com/categories/Development/"/>
    
    
      <category term="devops" scheme="http://www.westerndevs.com/tags/devops/"/>
    
      <category term="builds" scheme="http://www.westerndevs.com/tags/builds/"/>
    
  </entry>
  
  <entry>
    <title type="html">Angular Testing Patterns - Leverage Observable</title>
    <link href="http://www.westerndevs.com/Development/angular-testing-2/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Development/angular-testing-2/</id>
    <published>2018-02-21T19:38:30.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>One of the most challenging parts of testing is finding seams to reduce the scope of tests. Doing so is important because it make your tests smaller and cleaner which makes them more resilient to changes in the rest of your code base. Testing isn't helping you if every minor change breaks dozens of interconnected tests. Angular's heavy use of Observable provides us a great seam.</p><a id="more"></a><p>This post is part two of a series on angular testing. You can check out the other posts here:</p><ol><li><a href="/Development/angular-testing-1/">Keep the number of test bed tests to a minimum</a>.</li><li>Leverage <code>Observable</code> as a testing seam (this post)</li><li>Leverage monkey patching as a testing seam</li><li>No matter what anybody says e2e tests still need sleeps</li></ol><p>Reactive programming is a really nice paradigm which extend the Promise or Task patterns that have become quite popular over the last decade. Instead of returning a single value upon completion as Promises do an observable allows subscriptions which are handlers executed every time a value is returned from the observable.</p><p>I have seen a lot of people who ignore the complexity of observables by simply converting to a promise using <code>toPromise</code> but this ignores some of the really cool things you can do with promises. For instances if I have a component that requires talking to multiple HTTP endpoints I'll <a href="http://reactivex.io/documentation/operators/zip.html" target="_blank" rel="noopener">zip</a> the responses together so that the rendering doesn't happen until all the requests are complete. There are a ton of other cool patters you can use if you stick with observables.</p><p>Anyway, I'm not currently here to sell you on RxJS (it <em>is</em> awesome) but tell you how you can use observables to act as a good seam to limit the scope of your tests.</p><p>Let's look at a snippet of a component that makes use of observables and see how to shim in tests.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> vendorService: VendorService, </span></span><br><span class="line"><span class="params">            <span class="keyword">private</span> deviceViewService: DeviceViewService, </span></span><br><span class="line"><span class="params">            <span class="keyword">private</span> originsService: OriginsService</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.vendorService.get().subscribe(<span class="function">(<span class="params">v: Vendor[]</span>) =&gt;</span> <span class="keyword">this</span>.vendors = v);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.deviceViewService.getDevices().subscribe(<span class="function"><span class="params">devices</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.devices = devices;</span><br><span class="line">      activateDevices();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> originsObservable = <span class="keyword">this</span>.originsService.getOrigins();</span><br><span class="line">    <span class="keyword">let</span> destinationsObservable = <span class="keyword">this</span>.originsService.getDestinations();</span><br><span class="line">    Observable.zip(originsObservable, destinationsObservable, <span class="function">(<span class="params">origins: Origin[], destinations: Destination[]</span>)=&gt;</span>[origins,destinations])</span><br><span class="line">        .subscribe(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.setupOriginsAndDestinations(result);</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Here we have 4 observables which complete in various ways. The first, <code>vendorService.get()</code>, simply assigns vendors to an existing variable. The devices observable does the same but also calls a function and, finally, the last two observables are synchronized via a zip operator. It looks like a lot is going on here but we can isolate things to test easily.</p><p>First up we want to test to make sure that whatever is returned by the vendor service is properly assigned to the vendors collection. We can us a combination of mocks and observables to focus just on the vendor service like so(I'm using <a href="https://github.com/NagRock/ts-mockito" target="_blank" rel="noopener">ts-mockito</a>'s mocking syntax here):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Demo Component'</span>, () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    it(<span class="string">'should set vendors'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        <span class="keyword">let</span> mockVendorService = mock(VendorService);</span><br><span class="line">        <span class="keyword">let</span> vendors = [&#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Vendor ABC'</span>&#125;];</span><br><span class="line">        when(mockVendorService.get()).thenReturn(Observable.from([vendors]));</span><br><span class="line">        <span class="keyword">let</span> mockDeviceViewService = mock(DeviceViewService);</span><br><span class="line">        when(mockDeviceViewService.getDevices()).thenReturn(Observable.from([]));</span><br><span class="line">        <span class="keyword">let</span> mockOriginsService = mock(OriginsService);</span><br><span class="line">        when(mockOriginsService.getOrigins()).thenReturn(Observable.from([]));</span><br><span class="line">        when(mockOriginsService.getDestinations()).thenReturn(Observable.from([]));</span><br><span class="line">        <span class="keyword">let</span> sut = <span class="keyword">new</span> DemoComponent(instance(mockVendorService), instance(mockDeviceService), instance(mockOriginsService));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        sut.ngOnInit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//assert</span></span><br><span class="line">        expect(sut.vendors).to.equal(vendors);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>As you can see we set up the mocks to return either an <code>Observable</code> with a single result to test the code or with an empty result to never trigger the subscriptions to that observable. So even though the ngOnInit is quite complex the testing doesn't have to be.</p><p>Let's look at one more example for the zip case</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'origins and destinations being complete should trigger setup'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        <span class="keyword">let</span> mockVendorService = mock(VendorService);</span><br><span class="line">        when(mockVendorService.get()).thenReturn(Observable.from([]));</span><br><span class="line">        <span class="keyword">let</span> mockDeviceViewService = mock(DeviceViewService);</span><br><span class="line">        when(mockDeviceViewService.getDevices()).thenReturn(Observable.from([]));</span><br><span class="line">        <span class="keyword">let</span> mockOriginsService = mock(OriginsService);</span><br><span class="line">        <span class="keyword">let</span> origins = [&#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Origin ABC'</span>&#125;];</span><br><span class="line">        when(mockOriginsService.getOrigins()).thenReturn(Observable.from([origins]));</span><br><span class="line">        <span class="keyword">let</span> destinations = [&#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Destination ABC'</span>&#125;];</span><br><span class="line">        when(mockOriginsService.getDestinations()).thenReturn(Observable.from([destinations]));</span><br><span class="line">        <span class="keyword">let</span> sut = <span class="keyword">new</span> DemoComponent(instance(mockVendorService), instance(mockDeviceService), instance(mockOriginsService));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> didWork = <span class="literal">false</span>;</span><br><span class="line">        sut.setupOriginsAndDestinations = <span class="function">(<span class="params">passedOrigins, passedDestinations</span>) =&gt;</span> &#123;</span><br><span class="line">            didWork = passedOrigins === origins &amp;&amp; passedDestinations === destinations;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        sut.ngOnInit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//assert</span></span><br><span class="line">        expect(didWork).to.be.true;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>You might also have equivalent tests to ensure that just completing one or the other of <code>getOrigins</code> and <code>getDestinations</code> doesn't cause the setup to be fired.</p><p>The crux of this post is that observables provide for a nice place to hook into tests because you can use them to isolate large chunks of subscription code or exercise that code with arbitrary values. The more seams you have the easier testing becomes.</p><p>I already gave away a bit of the third post in this series when I overrode the setup method in the last example: this is called monkey patching and it is slick beans for isolating code to test.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One of the most challenging parts of testing is finding seams to reduce the scope of tests. Doing so is important because it make your tests smaller and cleaner which makes them more resilient to changes in the rest of your code base. Testing isn&#39;t helping you if every minor change breaks dozens of interconnected tests. Angular&#39;s heavy use of Observable provides us a great seam.&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://www.westerndevs.com/categories/Development/"/>
    
    
      <category term="Testing" scheme="http://www.westerndevs.com/tags/Testing/"/>
    
      <category term="Angular" scheme="http://www.westerndevs.com/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title type="html">Angular Testing Patterns - TestBed</title>
    <link href="http://www.westerndevs.com/Development/angular-testing-1/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Development/angular-testing-1/</id>
    <published>2017-12-31T19:38:30.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Spec files are automatically generated by Angular 5's CLI but most projects leave them empty. Why not actually write some tests? This post covers some useful patterns to make the whole process as painless as possible.</p><a id="more"></a><p>I've recently been working on a team which has some downright amazing leadership on the testing side. As a result I've had to raise my testing game to a level I've not been at before. During the process the team developed some testing patters which might be useful to the general populace. Here they are:</p><ol><li>Keep the number of test bed tests to a minimum.</li><li>Leverage <code>Observable</code> as a testing seam</li><li>Leverage monkey patching as a testing seam</li><li>No matter what anybody says e2e tests still need sleeps</li></ol><p>I'm going to split this post into parts to keep the posts relatively short.</p><h1>Test Bed</h1><p>Angular 2 introduced the idea of the <code>TestBed</code> which is basically a way of testing out a component with a &quot;real&quot; DOM behind it. There is support for injecting services either real or mock into your component as well as binding your component's model to the template. TestBed tests are the default type of test generated by the angular-cli when you create a new component. They are great and can be used to test a component much more thoroughly than testing with isolated tests alone.</p><p>The issue with them is that they tend to be quite slow to run. The interaction with the DOM and the setup of an entire dependency injection instance per test adds several hundred milliseconds for every TestBed test run. Just watching the test counter tick up in my command-line test reporter I can easily see when TestBed tests are encountered as the counter slows right now. The added time may not be huge in isolation but if we add 500ms (pretty conservative in my experience) per test on a collection of 1500 tests (pretty small project) then we're talking twelve and a half minutes. Angular testing is already glacial so adding this coupled with the Karma runner's inability to selectively run tests and you're really in trouble.</p><p>Testing should be lightening fast because you want the feedback loop to be as tight as possible. That's why I'm such a big fan of <a href="https://blogs.msdn.microsoft.com/visualstudio/2017/03/09/live-unit-testing-in-visual-studio-2017-enterprise/" target="_blank" rel="noopener">Live Unit Testing</a>. My mantra is that you should be able to hold your breath during a test run without feeling uncomfortable (this makes former pearl divers well adapted to being Angular developers). Most of the functionality that we test on a component doesn't need to be tested using a full featured TestBed. Any functions which mutate the state or call out to other services can be written without the need for the TestBed. Many of my components contain just two TestBed tests: one to check the component can be created and one to check it can be initted. These two test generally catch any typos in the template which is a big source of errors as the TypeScript compiler doesn't catch things in there. In the init test you can also check that appropriate bindings are in place. It is faster to have a test which tests a bunch of properties at once than one test per property.</p><p>This being said there are still plenty of time when TestBed tests do come in useful, typically any time you're building a complex user interface and want to validate that it works cross browsers. I'm certainly not saying don't use TestBed at all but rather that its use should be limited and isolation tests should be favoured.</p><p>Let's take a look at an example test which we can migrate away from the TestBed.</p><p>This component does some simple addition. Left side + right side = answer, unless the answer is less than 0 then 'Value too small':</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-math-component'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./math-component.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./math-component.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MathComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  model: MathComponentModel = &#123;</span><br><span class="line">    left: <span class="number">0</span>,</span><br><span class="line">    right: <span class="number">0</span>,</span><br><span class="line">    answer: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update() &#123;</span><br><span class="line">    <span class="keyword">this</span>.model.answer = <span class="keyword">this</span>.model.left + <span class="keyword">this</span>.model.right;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.model.answer &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.model.answer = <span class="string">'Value too small'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MathComponentModel</span> </span>&#123;</span><br><span class="line">  left: number;</span><br><span class="line">  right: number;</span><br><span class="line">  answer: number | string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The template for it is equally simple</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"model.left"</span> (<span class="attr">change</span>)=<span class="string">"update()"</span> <span class="attr">type</span>=<span class="string">"number"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"model.right"</span> (<span class="attr">change</span>)=<span class="string">"update()"</span> <span class="attr">type</span>=<span class="string">"number"</span>/&gt;</span>=</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"model.answer"</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>A fully testbed test for this might look like</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'MathComponent'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> component: MathComponent;</span><br><span class="line">  <span class="keyword">let</span> fixture: ComponentFixture&lt;MathComponent&gt;;</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="keyword">async</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      declarations: [MathComponent],</span><br><span class="line">      imports: [FormsModule]</span><br><span class="line">    &#125;)</span><br><span class="line">      .compileComponents();</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fixture = TestBed.createComponent(MathComponent);</span><br><span class="line">    component = fixture.componentInstance;</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should create'</span>, () =&gt; &#123;</span><br><span class="line">    expect(component).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should add up two numbers'</span>, fakeAsync(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> compiled = fixture.debugElement.nativeElement;</span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=left]'</span>).value = <span class="string">'2'</span>;</span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=left]'</span>).dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'input'</span>));</span><br><span class="line"></span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=right]'</span>).value = <span class="string">'3'</span>;</span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=right]'</span>).dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'input'</span>));</span><br><span class="line"></span><br><span class="line">    component.update();</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">    tick();</span><br><span class="line">    expect(compiled.querySelector(<span class="string">'[data-autom=answer]'</span>).value).toBe(<span class="string">'5'</span>);</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should set answer to "Value too small" if answer &lt; 0'</span>, fakeAsync(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> compiled = fixture.debugElement.nativeElement;</span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=left]'</span>).value = <span class="string">'2'</span>;</span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=left]'</span>).dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'input'</span>));</span><br><span class="line"></span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=right]'</span>).value = <span class="string">'-3'</span>;</span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=right]'</span>).dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'input'</span>));</span><br><span class="line"></span><br><span class="line">    component.update();</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">    tick();</span><br><span class="line"></span><br><span class="line">    expect(compiled.querySelector(<span class="string">'[data-autom=answer]'</span>).value).toBe(<span class="string">'Value too small'</span>);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>A couple of things to point out here: the first is that there is quite a bit of magic to interact with input boxes on the page. The second thing is that compiled component tests seem to be <a href="https://github.com/angular/angular/issues/12409" target="_blank" rel="noopener">quite slow</a>, doubly so if you haven't made your modules highly granular. Much of the testing here could be handled by testing the model rather than the rendering. A testbed test is still needed to check the rendering once but after that we're good with simpler tests.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'MathComponent bindings'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> component: MathComponent;</span><br><span class="line">  <span class="keyword">let</span> fixture: ComponentFixture&lt;MathComponent&gt;;</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="keyword">async</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      declarations: [MathComponent],</span><br><span class="line">      imports: [FormsModule]</span><br><span class="line">    &#125;)</span><br><span class="line">      .compileComponents();</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fixture = TestBed.createComponent(MathComponent);</span><br><span class="line">    component = fixture.componentInstance;</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should init'</span>, () =&gt; &#123;</span><br><span class="line">    expect(component).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should create'</span>, fakeAsync(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    component.model.answer = <span class="number">5</span>;</span><br><span class="line">    component.model.answer = <span class="number">5</span>;</span><br><span class="line">    component.model.left = <span class="number">3</span>;</span><br><span class="line">    component.model.right = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">    tick();</span><br><span class="line">    <span class="keyword">const</span> compiled = fixture.debugElement.nativeElement;</span><br><span class="line">    expect(compiled.querySelector(<span class="string">'[data-autom=answer]'</span>).value).toBe(component.model.answer.toString());</span><br><span class="line">    expect(compiled.querySelector(<span class="string">'[data-autom=left]'</span>).value).toBe(component.model.left.toString());</span><br><span class="line">    expect(compiled.querySelector(<span class="string">'[data-autom=right]'</span>).value).toBe(component.model.right.toString());</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;);</span><br><span class="line">describe(<span class="string">'MathComponent'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'should add up two numbers'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> component = <span class="keyword">new</span> MathComponent();</span><br><span class="line">    component.model.left = <span class="number">1</span>;</span><br><span class="line">    component.model.right = <span class="number">2</span>;</span><br><span class="line">    component.update();</span><br><span class="line">    expect(component.model.answer).toBe(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should set answer to Value too small if answer &lt; 0'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> component = <span class="keyword">new</span> MathComponent();</span><br><span class="line">    component.model.left = <span class="number">1</span>;</span><br><span class="line">    component.model.right = <span class="number">-2</span>;</span><br><span class="line">    component.update();</span><br><span class="line">    expect(component.model.answer).toBe(<span class="string">'Value too small'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The advantage here is that the tests are simpler and run faster. We also don't have to worry about fiddling with fake async or ticks.</p><p>In the next article we'll visit how we can use Observables, which are pretty popular in angular, as a seam to help write tests.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spec files are automatically generated by Angular 5&#39;s CLI but most projects leave them empty. Why not actually write some tests? This post covers some useful patterns to make the whole process as painless as possible.&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://www.westerndevs.com/categories/Development/"/>
    
    
      <category term="Testing" scheme="http://www.westerndevs.com/tags/Testing/"/>
    
      <category term="Angular" scheme="http://www.westerndevs.com/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title type="html">Creating a Custom Matcher for TS-Mokito</title>
    <link href="http://www.westerndevs.com/development/TsMokito-custom-matcher/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/development/TsMokito-custom-matcher/</id>
    <published>2017-09-29T23:36:36.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>For better or worse I've been working with a lot of Angular as of late. One of the better tools I've found for helping out with testing is a great little mocking library called <a href="https://github.com/NagRock/ts-mockito" target="_blank" rel="noopener">ts-mokito</a>. I don't want to get into why I still like to have a mocking library even with a language like JavaScript - that's another post.</p><p>Testing today I ran into an annoying problem in that I was testing an angular route like so</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verify(mockRouter.navigate([<span class="string">'/some/route'</span>])).called();</span><br></pre></td></tr></table></figure><p>This test was always failing. This is because the argument to navigate is an array and in JavaScript</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'/some/route'</span>] !== [<span class="string">'/some/route'</span>]</span><br></pre></td></tr></table></figure><p>How unfortunate. Fortunately there isn't much to a custom matcher in ts-mokito. You can already do</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verify(mockRouter.navigate(anything())).called();</span><br></pre></td></tr></table></figure><p>To simply check that something was passed in but we'd like our tests to be a bit more robust than that. Enter the ArraryMatcher</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Matcher &#125; <span class="keyword">from</span> <span class="string">'ts-mockito/lib/matcher/type/Matcher'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ArrayMatcher <span class="keyword">extends</span> Matcher &#123;</span><br><span class="line">    <span class="keyword">private</span> value: <span class="built_in">any</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> expected</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    match(value: <span class="built_in">any</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _.isEqual(<span class="keyword">this</span>.expected, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Did not match <span class="subst">$&#123;this.expected&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see it has an implementation of the <code>match</code> function which uses the <code>isEqual</code> from lodash. This class can be substituted into our verify</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verify(mockRouter.navigate(&lt;<span class="built_in">any</span>&gt;<span class="keyword">new</span> ArrayMatcher([<span class="string">'/some/route'</span>])).called();</span><br></pre></td></tr></table></figure><p>That's a bit ugly with casting in there. This can be fixed by exporting a function from the ArrayMatcher</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">arrayMatches</span>(<span class="params">expected</span>): <span class="title">any</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayMatcher(expected); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Which allows for the much more pleasant syntax</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verify(mockRouter.navigate(arrayMatches([<span class="string">`/some/route`</span>]))).called();</span><br></pre></td></tr></table></figure><p>Easily done and it should be simple to implement any other sort of matcher you like.</p>]]></content>
    
    <summary type="html">
    
      Mocking libraries can be useful, even in JavaScript testing. One of my favorites is ts-mokito a TypeScript mocking library. One minor problem with it is that it is lacking a good array matcher. In this article we&#39;ll see how to fix that.
    
    </summary>
    
      <category term="development" scheme="http://www.westerndevs.com/categories/development/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="testing" scheme="http://www.westerndevs.com/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title type="html">Running Kubernetes on Azure Container Services</title>
    <link href="http://www.westerndevs.com/development/Kubernetes_on_azure/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/development/Kubernetes_on_azure/</id>
    <published>2017-06-07T23:36:36.000Z</published>
    <updated>2018-04-12T23:57:35.278Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This blog post will walk through how to set up a small Kubernetes cluster on Azure Container Services, manage it with Kubernetes and do a rolling deployment. You may think that sounds like kind of a lot. You're not wrong. Let's dig right in.</p><p><em>Note:</em> If you're a visual or auditory learner then check out the channel 9 video version of this blog post.</p><p>We're going to avoid using the point and click portal for this entire workflow, instead we'll lean on the really fantastic Azure command line. This tool can be installed locally or you can use the version built into the portal.</p><p><img src="http://i.imgur.com/JjmmFvg.png" alt="Azure CLI in Portal"></p><p>Using the commandline is great for this sort of thing because there are quite a few moving parts and we can use variables to keep track of them. Let's start with all the variables we'll need, we'll divide them up into two sets.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RESOURCE_GROUP=kubernetes</span><br><span class="line">REGION=australiasoutheast</span><br><span class="line">DNS_PREFIX=prdc2017</span><br><span class="line">CLUSTER_NAME=prdc2017</span><br></pre></td></tr></table></figure><p>The first set of variables here are needed to stand up the resource group and Azure Container Service. The resource group is called <code>kubernetes</code> which is great for my experiments but not so good for your production system. You'll likely want a better name, or, if you're still governed by legacy IT practices you'll want a name like <code>IL004AB1</code> which encodes some obscure bits of data. Next up is the region in which everything should be created. I chose Australia South-East because it was the first region to have a bug fix I needed rolled out to it. Normally I'd save myself precious hundreds of miliseconds by using a closer region. Finally the DNS_PREFIX and CLUSTER_NAME are used to name items in the ACS deployment.</p><p>Next variables are related to the Azure container registry frequently called ACR.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">REGISTRY</span>=prdc2017registry</span><br><span class="line"></span><br><span class="line"><span class="attr">DOCKER_REGISTRY_SERVER</span>=<span class="variable">$REGISTY</span>.azurecr.io</span><br><span class="line"><span class="attr">DOCKER_USER_NAME</span>=<span class="variable">$REGISTRY</span></span><br><span class="line"><span class="attr">DOCKER_PASSWORD</span>=yAZxyNVN8yIs5uln9yNQ</span><br><span class="line"><span class="attr">DOCKER_EMAIL</span>=stimms@gmail.com</span><br></pre></td></tr></table></figure><p>Here we define the name of the registry, the URL, and some login credentials for it.</p><p>With the variables all defined we can move on to actually doing things. First off let's create a resource group to hold the twenty or so items which are generated by the default ACS ARM template.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az<span class="built_in"> group </span>create --name <span class="variable">$RESOURCE_GROUP</span> --location <span class="variable">$REGION</span></span><br></pre></td></tr></table></figure><p>This command takes only a few seconds. Next up we need to create the cluster. To create a Linux based cluster we'd run</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az acs create <span class="attribute">--orchestrator-type</span>=kubernetes --resource-group <span class="variable">$RESOURCE_GROUP</span> <span class="attribute">--name</span>=<span class="variable">$CLUSTER_NAME</span> <span class="attribute">--dns-prefix</span>=<span class="variable">$DNS_PREFIX</span> --generate-ssh-keys</span><br></pre></td></tr></table></figure><p>Whereas a Windows cluster would vary only slightly and look like:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az acs create <span class="attribute">--orchestrator-type</span>=kubernetes --resource-group <span class="variable">$RESOURCE_GROUP</span> <span class="attribute">--name</span>=<span class="variable">$CLUSTER_NAME</span> <span class="attribute">--dns-prefix</span>=<span class="variable">$DNS_PREFIX</span> --generate-ssh-keys --windows --admin-password <span class="variable">$DOCKER_PASSWORD</span></span><br></pre></td></tr></table></figure><p>For the purposes of this article we'll focus on a Windows cluster. You can mix the two in a cluster but that's a bit of an advanced topic. Running this command takes quite some time, typically on the order of 15-20 minutes. However, the command is doing quite a lot: provisioning servers, IP addresses, storage, installing kubernetes,...</p><p>With the cluster up and running we can move onto building the registry (you could actually do them both at the same time, there is no dependency between them).</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#create a registry</span></span><br><span class="line"><span class="string">az </span><span class="string">acr </span><span class="string">create </span><span class="built_in">--name</span> $<span class="string">REGISTRY </span><span class="built_in">--resource-group</span> $<span class="string">RESOURCE_GROUP </span><span class="built_in">--location</span> $<span class="string">REGION </span><span class="built_in">--sku</span> <span class="string">Basic</span></span><br><span class="line"><span class="string">#</span><span class="string">assign </span>a <span class="string">service </span><span class="string">principal</span></span><br><span class="line"><span class="string">az </span><span class="string">ad </span><span class="string">sp </span><span class="built_in">create-for-rbac</span> <span class="built_in">--scopes</span> /<span class="string">subscriptions/</span><span class="string">5c642474-9eb9-</span><span class="string">43d8-8bfa-</span><span class="string">89df25418f39/</span><span class="string">resourcegroups/</span>$<span class="string">RESOURCE_GROUP/</span><span class="string">providers/</span><span class="string">Microsoft.</span><span class="string">ContainerRegistry/</span><span class="string">registries/</span>$<span class="string">REGISTRY </span><span class="built_in">--role</span> <span class="string">Owner </span><span class="built_in">--password</span> $<span class="string">DOCKER_PASSWORD</span></span><br><span class="line"><span class="string">az </span><span class="string">acr </span><span class="string">update </span>-n $<span class="string">REGISTRY </span><span class="built_in">--admin-enabled</span> <span class="string">true</span></span><br></pre></td></tr></table></figure><p>The first line creates the registry and the second sets up some credentials for it. Finally we enable admin logins.</p><p>Of course we'd really like our Kubernetes cluster to be able to pull images from the registry so we need to give Kubernetes an idea of how to do that.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">az</span> acr credential show -n <span class="variable">$REGISTRY</span></span><br></pre></td></tr></table></figure><p>This command will dump out the credentials for the admin user. Notice that there are two passwords, either of them should work.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create<span class="built_in"> secret </span>docker-registry <span class="variable">$REGISTRY</span> <span class="attribute">--docker-server</span>=https://$DOCKER_REGISTRY_SERVER <span class="attribute">--docker-username</span>=<span class="variable">$REGISTRY</span> <span class="attribute">--docker-password</span>=<span class="string">"u+=+p==/x+E7/b=PG/D=RIVBMo=hQ/AJ"</span> <span class="attribute">--docker-email</span>=<span class="variable">$DOCKER_EMAIL</span></span><br></pre></td></tr></table></figure><p>The password is the one taken from the previous step, everything else from our variables at the start. This gives Kubernetes the credentials but we still need to instruct it to make use of them as the default. This can be done by editing one of the configuration ymls in Kubernetes.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> serviceaccounts<span class="built_in"> default </span>-o yaml &gt; ./sa.yaml</span><br></pre></td></tr></table></figure><p>Regreives the YML for service accounts. In there two changes are required: first removing the resource version by deleting <code>resourceVersion: &quot;243024&quot;</code>. Next the credentials need to be specified by adding</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">imagePullSecrets:</span></span><br><span class="line">- <span class="string">name:</span> prdc2017registry</span><br></pre></td></tr></table></figure><p>This can now be sent back to Kubernetes</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl replace serviceaccounts<span class="built_in"> default </span>-f ./sa.yaml</span><br></pre></td></tr></table></figure><p>This interaction can also be done in the Kubernetes UI which can be accessed by running</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">kubectl proxy</span></span><br></pre></td></tr></table></figure><p>We've got everything set up on the cluster now and can start using it in earnest.</p><h2>Deploying to the Cluster</h2><p>First step is to build a container to use. I'm pretty big into ASP.NET Core so my first stop was to create a new project in Visual Studio and then drop to the command line for packaging. There is probably some way to push containers from Visual Studio using a right click but I'd rather learn it the command line way.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet <span class="keyword">restore</span></span><br><span class="line"><span class="keyword">dotnet</span> publish -c <span class="keyword">Release</span> -o <span class="keyword">out</span></span><br><span class="line">docker <span class="keyword">build</span> -t dockerproject .</span><br></pre></td></tr></table></figure><p>If all goes well these commands in conjunciton with a simple Dockerfile should build a functional container. I used this docker file</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> microsoft/dotnet:<span class="number">1.1</span>.<span class="number">2</span>-runtime-nanoserver</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /dockerProject</span></span><br><span class="line"><span class="bash">COPY out .</span></span><br><span class="line"><span class="bash">EXPOSE 5000</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"dotnet"</span>, <span class="string">"dockerProject.dll"</span>]</span></span><br></pre></td></tr></table></figure><p>This container can now make its way to our registry like so</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login <span class="variable">$DOCKER_REGISTRY_SERVER</span> -u <span class="variable">$REGISTRY</span> -<span class="selector-tag">p</span> <span class="string">"u+=+p==/x+E7/b=PG/D=RIVBMo=hQ/AJ"</span></span><br><span class="line">docker tag dockerproject prdc2017registry<span class="selector-class">.azurecr</span><span class="selector-class">.io</span>/dockerproject:v1</span><br><span class="line">docker push prdc2017registry<span class="selector-class">.azurecr</span><span class="selector-class">.io</span>/dockerproject:v1</span><br></pre></td></tr></table></figure><p>This should upload all the layers to the registry. I don't know about you but I'm getting excited to see this thing in action.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl run dockerproject --image prdc2017registry<span class="selector-class">.azurecr</span><span class="selector-class">.io</span>/dockerproject:v1</span><br></pre></td></tr></table></figure><p>A bit anti-climactically this is all that is needed to trigger Kubernetes to run the container. Logging into the UI should show the container deployed to a single pod. If we'd like to scale it all that is needed is to increase the replicas in the UI or run</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale <span class="attribute">--replicas</span>=3 rc/dockerproject</span><br></pre></td></tr></table></figure><p>This will bring up two additional replicas so the total is three. Our final step is to expose the service port externally so that we can hit it from a web browser. Exposing a port of Kubernetes works differently depending on what service is being used to host your cluster. On Azure it makes use of the Azure load balancer.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployments dockerproject <span class="attribute">--port</span>=5000 <span class="attribute">--type</span>=LoadBalancer</span><br></pre></td></tr></table></figure><p>This command does take about two minutes to run and you can check on the progress by running</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> svc</span><br></pre></td></tr></table></figure><p>With that we've created a cluster and deployed a container to it.</p><p>##Bonus: Rolling Deployment</p><p>Not much point to having a cluster if you can't do a zero downtime rolling deployment, right? Let's do it!</p><p>You'll need to push a new version of your container up to the registry. Let's call it v2.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag dockerproject prdc2017registry<span class="selector-class">.azurecr</span><span class="selector-class">.io</span>/dockerproject:v2</span><br><span class="line">docker push prdc2017registry<span class="selector-class">.azurecr</span><span class="selector-class">.io</span>/dockerproject:v2</span><br></pre></td></tr></table></figure><p>Now we can ask Kubernetes to please deploy it</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">set</span> image <span class="comment">deployments</span>/dockerproject prdc2017registry.azurecr.io/<span class="comment">dockerproject:v2</span></span><br></pre></td></tr></table></figure><p>That's it! Now you can just watch in the UI as new pods are stood up, traffic rerouted and the old pods decomissioned.</p><h2>Conclusion</h2><p>It is a credit to the work of mnay thousands of people that it is so simple to set up an entire cluster and push an image to it forget that we can do zero downtime deployments. A cluster like this is a bit expensive to run so you have to be serious about getting good use out of it. Deploy early and deploy often. I'm stoked about containers and orchestration - I hope you are too!</p><p>Oh, and don't forget to tear down you're cluster when you're done playing.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az<span class="built_in"> group </span>delete --name <span class="variable">$RESOURCE_GROUP</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Docker is cool and all but shipping containers to production has a lot of added challenges. Scaling, deploying, rolling deployments, storage,... the list of challenges goes on and on. An orchestration engine, like Kubernetes, can solve many of the challenges.
    
    </summary>
    
      <category term="development" scheme="http://www.westerndevs.com/categories/development/"/>
    
    
      <category term="c#" scheme="http://www.westerndevs.com/tags/c/"/>
    
      <category term="kuberntes" scheme="http://www.westerndevs.com/tags/kuberntes/"/>
    
  </entry>
  
  <entry>
    <title type="html">The Great RS-232 Adventure</title>
    <link href="http://www.westerndevs.com/development/AndroidSerialPorts/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/development/AndroidSerialPorts/</id>
    <published>2017-05-11T23:36:36.000Z</published>
    <updated>2018-04-12T23:57:35.278Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Uh oh, where did the post go? Well turns out that my former employer believe that serial ports are in some way proprietary information. They've asked me to take this post down. I don't believe anything in this was secret or proprietary but I also don't like being sued. Sorry, I guess you'll have to figure out RS-232 yourself.</p>]]></content>
    
    <summary type="html">
    
      Talking over the RS-232 serial protocol is a bit of a blast from the past but I needed to use in on an Android tablet from within Xamarin. This is the, painfully complete, story of my journey.
    
    </summary>
    
      <category term="development" scheme="http://www.westerndevs.com/categories/development/"/>
    
    
      <category term="c#" scheme="http://www.westerndevs.com/tags/c/"/>
    
      <category term="xamarin" scheme="http://www.westerndevs.com/tags/xamarin/"/>
    
  </entry>
  
  <entry>
    <title type="html">JSON.net not just for serialization</title>
    <link href="http://www.westerndevs.com/json/Json.net-not-just-for-sereialization/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/json/Json.net-not-just-for-sereialization/</id>
    <published>2017-05-03T15:36:36.000Z</published>
    <updated>2018-04-12T23:57:35.278Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>If you happen to head over to <a href="https://www.nuget.org/packages" target="_blank" rel="noopener">https://www.nuget.org/packages</a> and look at which package has been downloaded the most there is a clear winner: JSON.net. It is in everything, every where. JSON is so wildly ubiquitous that I play a little game with myself when I start a new project: how long can I go before I need to serialize or deserialize JSON and need to pull in JSON.net. I rarely last more than a couple of hours.</p><p>But it turns out that there is a lot more that JSON.net can do.</p><a id="more"></a><p>My good buddy <a href="https://ericflemingblog.wordpress.com/" target="_blank" rel="noopener">Eric Fleming</a> found this one and I'm really just stealing it from him(although <a href="http://jameschambers.com/" target="_blank" rel="noopener">James</a> claims he found it). The problem that we were trying to solve was that we wanted to patch together a new JSON object out of a bunch of C# objects. It could have been done by building a new DTO, mapping a number of objects to it and then serializing it to JSON. This was kind of a lot of work. Static languages are nice but chucking together ad hoc objects isn't a strong suit. In this case we used JObject to structure the new object</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sock = <span class="keyword">new</span> Sock&#123;</span><br><span class="line">            Colour = <span class="string">"blue"</span>,</span><br><span class="line">            Size = <span class="string">"medium"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> shoe = <span class="keyword">new</span> Shoe&#123;</span><br><span class="line">            Material = <span class="string">"leather"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> ensemble = JObject.FromObject(sock);</span><br><span class="line">        ensemble.Merge(JObject.FromObject(shoe));</span><br><span class="line">        Console.WriteLine(ensemble.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Sock</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Colour &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Size &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Shoe</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Material&#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The output looks like</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Colour"</span>: <span class="string">"blue"</span>,</span><br><span class="line">  <span class="attr">"Size"</span>: <span class="string">"medium"</span>,</span><br><span class="line">  <span class="attr">"Material"</span>: <span class="string">"leather"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This approach can be useful in a number of scenarios</p><ul><li>Treating an object as a mixin and applying it to a bunch of differently shaped JSON</li><li>Merging existing JSON with C# objects</li></ul><p>The latter scenario can be achieved like so</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hatJObject = JObject.Parse(<span class="string">@"</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    'HatSize': 'Large'</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            "</span>);</span><br><span class="line"><span class="keyword">var</span> ensemble = JObject.FromObject(sock);</span><br><span class="line"><span class="keyword">var</span> shoeJObject = JObject.FromObject(shoe);</span><br><span class="line">shoeJObject.Merge(JObject.FromObject(shoeLace));</span><br><span class="line">ensemble.Merge(shoeJObject);</span><br><span class="line">ensemble.Merge(hatJObject);</span><br></pre></td></tr></table></figure><p>This outputs</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Colour"</span>: <span class="string">"blue"</span>,</span><br><span class="line">  <span class="attr">"Size"</span>: <span class="string">"medium"</span>,</span><br><span class="line">  <span class="attr">"Material"</span>: <span class="string">"leather"</span>,</span><br><span class="line">  <span class="attr">"LaceLength"</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">"HatSize"</span>: <span class="string">"Large"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are also <code>JObject.Load</code> and <code>JObject.Read</code> for reading from JSON streams.</p><p>Newtonsoft.JSON is such a well known and well developed library that it is a shame to just use <code>JsonConvert</code> methods when there is such additional richness.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you happen to head over to &lt;a href=&quot;https://www.nuget.org/packages&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nuget.org/packages&lt;/a&gt; and look at which package has been downloaded the most there is a clear winner: JSON.net. It is in everything, every where. JSON is so wildly ubiquitous that I play a little game with myself when I start a new project: how long can I go before I need to serialize or deserialize JSON and need to pull in JSON.net. I rarely last more than a couple of hours.&lt;/p&gt;
&lt;p&gt;But it turns out that there is a lot more that JSON.net can do.&lt;/p&gt;
    
    </summary>
    
      <category term="json" scheme="http://www.westerndevs.com/categories/json/"/>
    
    
      <category term="json.net" scheme="http://www.westerndevs.com/tags/json-net/"/>
    
      <category term="c#" scheme="http://www.westerndevs.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title type="html">Using azure-cli in windows bash</title>
    <link href="http://www.westerndevs.com/messaging/az_command_line-on_windows_bash/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/messaging/az_command_line-on_windows_bash/</id>
    <published>2017-04-19T05:36:36.000Z</published>
    <updated>2018-04-12T23:57:35.278Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>The latest versions of Windows support running linux executables. The technical trickery to get that done boggle my mind. I wanted to get the Azure command line tools working inside of the bash. The tools are written in python so we need to get that installed.</p><a id="more"></a><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install python-pip python-<span class="built_in">dev</span> libffi-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span> libxml2-<span class="built_in">dev</span> libxslt1-<span class="built_in">dev</span> zlib1g-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p>This also installs some build tools which we'll need to install the actual azure-cli and pip which is kind of nuget for python. Now we just need to install the tools</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --<span class="keyword">user</span> <span class="title">azure-cli</span></span><br></pre></td></tr></table></figure><p>This will install the tools to <code>~/.local/bin</code>. You might need to add that to your path or at least reload the profile by running <code>. ~/.profile</code>. Now you can login with</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">az login</span></span><br></pre></td></tr></table></figure><p>This will give you a code to enter in a browser which will complete you login and Bob's your uncle. Because python is portable this could all be done on Windows as well but I'm still more comfortable scripting against bash than powershell.  You can read more about az and all the sub-commands like <code>az acr</code> at https://docs.microsoft.com/en-us/cli/azure/overview. I'll probably also post some more content on it soon.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The latest versions of Windows support running linux executables. The technical trickery to get that done boggle my mind. I wanted to get the Azure command line tools working inside of the bash. The tools are written in python so we need to get that installed.&lt;/p&gt;
    
    </summary>
    
      <category term="messaging" scheme="http://www.westerndevs.com/categories/messaging/"/>
    
    
      <category term="azure" scheme="http://www.westerndevs.com/tags/azure/"/>
    
      <category term="windows bash" scheme="http://www.westerndevs.com/tags/windows-bash/"/>
    
  </entry>
  
  <entry>
    <title type="html">Getting Started with RabbitMQ in ASP.NET</title>
    <link href="http://www.westerndevs.com/messaging/MassTransit_and_ASP/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/messaging/MassTransit_and_ASP/</id>
    <published>2017-03-19T05:36:36.000Z</published>
    <updated>2018-04-12T23:57:35.278Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>In the last post we looked at how to set up RabbitMQ in a Windows container. It was quite the adventure and I'm sure it was woth the time I invested. Probably. Now we have it set up we can get to writing an application using it.</p><p>A pretty common use case when building a web application is that we want to do some background processing which takes longer than we'd like to keep a request open for. Doing so would lock up an IIS thread too, which ins't optimal. In this example we'd like to make our user creation a background process.</p><a id="more"></a><p>To start we need a command which is just a plain old CLR object</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AddUser</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> EmailAddress &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That all looks pretty standard. In our controller, we'll just use the handy UserCreationSender</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> :</span> Controller</span><br><span class="line">&#123;</span><br><span class="line">    IUserCreationSender _userCreationSender;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeController</span><span class="params">(IUserCreationSender userCreationSender)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _userCreationSender = userCreationSender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _userCreationSender.Send(<span class="string">"simon"</span>, <span class="string">"tibbs"</span>, <span class="string">"stimms@gmail.com"</span>);</span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There that was easy. In our next post, we'll... what's that? I've missed actually showing any implementation. Fair point, we can do that.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public void Send(string firstName, string lastName, string emailAddress)</span><br><span class="line">&#123;</span><br><span class="line">    var factory = new ConnectionFactory()</span><br><span class="line">    &#123;</span><br><span class="line">        HostName = <span class="string">"172.22.144.236"</span>,</span><br><span class="line">       <span class="built_in"> Port </span>= 5672,</span><br><span class="line">        UserName = <span class="string">"guest"</span>,</span><br><span class="line">        Password = <span class="string">"guest"</span></span><br><span class="line">    &#125;;</span><br><span class="line">    using (var<span class="built_in"> connection </span>= factory.CreateConnection())</span><br><span class="line">    using (var channel = connection.CreateModel())</span><br><span class="line">    &#123;</span><br><span class="line">        channel.QueueDeclare(queue: <span class="string">"niftyqueue"</span>,</span><br><span class="line">                                durable: <span class="literal">false</span>,</span><br><span class="line">                                exclusive: <span class="literal">false</span>,</span><br><span class="line">                                autoDelete: <span class="literal">false</span>,</span><br><span class="line">                                arguments: <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        var command = new AddUser</span><br><span class="line">        &#123;</span><br><span class="line">            FirstName = firstName,</span><br><span class="line">            LastName = lastName,</span><br><span class="line">            EmailAddress = emailAddress,</span><br><span class="line">            Password = <span class="string">"examplePassword"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        string message = JsonConvert.SerializeObject(command);</span><br><span class="line">        var body = Encoding.UTF8.GetBytes(message);</span><br><span class="line"></span><br><span class="line">        channel.BasicPublish(exchange: <span class="string">""</span>,</span><br><span class="line">                                routingKey: <span class="string">"niftyqueue"</span>,</span><br><span class="line">                                basicProperties: <span class="literal">null</span>,</span><br><span class="line">                                body: body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Values here are hard coded which we don't want to do usually, check out https://aspnetmonsters.com/2016/01/Configuration-in-ASP-NET-Core-MVC/ for how to pull in configuration. Ignoring that we start by creating a conneciton factory with connection information for RabbitMQ. We then create a new queue (or ensure that it already exists) called &quot;niftyqueue&quot;. There are some other parameters in the queue creation we can get into in a future article.</p><p>Next we'll create an AddUser command and serialize it to JSON using good old Json.net then get the bytes. Rabbit messages contain a byte array so we have to do a tiny bit of leg work to get our CLR object into a form usable by the transport. JSON is the standard for everything these days so we'll go with the flow. In a real system you might want to investigate Protocol Buffer or something else.</p><p>Finally we perform a basic publish, sending our message. The Rabbit management site provides a super cool view of the messages being published on it</p><p><img src="http://i.imgur.com/odiUxPh.png" alt="The dashboard"></p><p>How cool is that? Man I like real time charts.</p><p>Shoving messages into the bus is half the equation, the other half is getting it out again. We want to have a separate process handle getting the message. That looks quite similar to the message sending.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"starting consumption"</span>);</span><br><span class="line">    var factory = new ConnectionFactory()</span><br><span class="line">    &#123;</span><br><span class="line">        HostName = <span class="string">"172.22.144.236"</span>,</span><br><span class="line">       <span class="built_in"> Port </span>= 5672,</span><br><span class="line">        UserName = <span class="string">"guest"</span>,</span><br><span class="line">        Password = <span class="string">"guest"</span></span><br><span class="line">    &#125;;</span><br><span class="line">    using (var<span class="built_in"> connection </span>= factory.CreateConnection())</span><br><span class="line">    using (var channel = connection.CreateModel())</span><br><span class="line">    &#123;</span><br><span class="line">        channel.QueueDeclare(queue: <span class="string">"niftyqueue"</span>,</span><br><span class="line">                                durable: <span class="literal">false</span>,</span><br><span class="line">                                exclusive: <span class="literal">false</span>,</span><br><span class="line">                                autoDelete: <span class="literal">false</span>,</span><br><span class="line">                                arguments: <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        var consumer = new EventingBasicConsumer(channel);</span><br><span class="line">        consumer.Received += (model, ea) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            var body = ea.Body;</span><br><span class="line">            var message = Encoding.UTF8.GetString(body);</span><br><span class="line">            var deserialized = JsonConvert.DeserializeObject&lt;AddUser&gt;(message);</span><br><span class="line">            Console.WriteLine(<span class="string">"Creating user &#123;0&#125; &#123;1&#125;"</span>, deserialized.FirstName, deserialized.LastName);</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.BasicConsume(queue: <span class="string">"niftyqueue"</span>,</span><br><span class="line">                                noAck: <span class="literal">true</span>,</span><br><span class="line">                                consumer: consumer);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">"Done."</span>);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Again we create the factory and the queue (some opportunity there for refactoring, me thinks). Next we start up an EventingBasicConsumer on top of the channel. There are a couple of different ways to consume messages none of which I really love. The eventing model seem the leas objectionable. You simply assign a delegate to the event handler and it will fire when a message is recieved.</p><p>In the next post I'll start taking a look at how we can layer <a href="http://masstransit-project.com/" target="_blank" rel="noopener">MassTransit</a>, a .NET message bus, on top of raw RabbitMQ. The result is a much more pleasant experience then simply hammering together raw RabbitMQ.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In the last post we looked at how to set up RabbitMQ in a Windows container. It was quite the adventure and I&#39;m sure it was woth the time I invested. Probably. Now we have it set up we can get to writing an application using it.&lt;/p&gt;
&lt;p&gt;A pretty common use case when building a web application is that we want to do some background processing which takes longer than we&#39;d like to keep a request open for. Doing so would lock up an IIS thread too, which ins&#39;t optimal. In this example we&#39;d like to make our user creation a background process.&lt;/p&gt;
    
    </summary>
    
      <category term="messaging" scheme="http://www.westerndevs.com/categories/messaging/"/>
    
    
      <category term=".net" scheme="http://www.westerndevs.com/tags/net/"/>
    
      <category term="RabbitMQ" scheme="http://www.westerndevs.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title type="html">Creating a Rabbit MQ Container</title>
    <link href="http://www.westerndevs.com/docker/RabbitContainer/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/docker/RabbitContainer/</id>
    <published>2017-03-16T11:36:36.000Z</published>
    <updated>2018-04-12T23:57:35.278Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I bought a new laptop, a Dell XPS 15 and my oh my is it snazzy. The thing I was most excited about was that I'd get to play with Windows containers again. I have 3 other machines in the house but they're either unsuitable for containers (OSX running Windows in parallels) or I've so toally borked them playing with early betas of containers they need to be formatted and reinstalled - possibly also thrown into the sun.</p><p>So when I found myself presented with the question &quot;how can we get into messaging in our apps for free?&quot; I figured I'd crack open the laptop and build something with MassTransit. I found that MassTransit supports running on RabbitMQ. Why that sounds like a perfect opportunity to deploy RabbitMQ to a container. Only problem was that I didn't really know how to do that.</p><a id="more"></a><p>In my heart I felt like running the installer wasn't quite the right way to go. I'd just copy the installation file into their destination. Problem is that RabbitMQ relies on erlang so I'd have to install that too. I build a docker file which looked something like</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> microsoft/windowsservercore</span><br><span class="line"><span class="keyword">ENV</span> rabbitSourceDir <span class="string">"RabbitMQ Server"</span></span><br><span class="line"><span class="keyword">ENV</span> erlngDir <span class="string">"C:/program files/erl8.2/"</span></span><br><span class="line"><span class="keyword">ENV</span> rabbitDir <span class="string">"C:/program files/RabbitMQ Server/"</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> <span class="variable">$&#123;rabbitSourceDir&#125;</span> <span class="variable">$&#123;rabbitDir&#125;</span></span></span><br><span class="line"><span class="bash">ADD erl8.2 <span class="variable">$&#123;erlngDir&#125;</span></span></span><br><span class="line"><span class="bash">ENV ERLANG_HOME <span class="string">"c:\program files\erl8.2\erts-8.2"</span></span></span><br></pre></td></tr></table></figure><p>In the erlngDir and rabbitDir I dumped the contents of an install of erlang and rabbitmq. Then I built the container with</p><p><code>docker build -t monsters/rabbitmq .</code></p><p>Didn't work. There must be something useful the installer actually does as part of installing files. So next I considered putting in the installers and running them when building the container. That seemed like a huge pain so I got to thinking about using chocolatey. At first I was pretty deadset against using choco my reasoning being that containers should be lightweight and have only one purpose. Having one time software like chocolatey on there which wouldn't ever be used seemed like it would make... whoever invented containers mad.</p><p>So attempt number two:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> microsoft/windowsservercore</span><br><span class="line"></span><br><span class="line"><span class="comment">#install chocolatey</span></span><br><span class="line"><span class="builtin-name">RUN</span> @powershell -NoProfile -ExecutionPolicy Bypass -Command <span class="string">"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"</span> &amp;&amp; <span class="builtin-name">SET</span> <span class="string">"PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#install rabbitmq</span></span><br><span class="line"><span class="builtin-name">RUN</span> choco install -y rabbitmq</span><br></pre></td></tr></table></figure><p>That was enough to get Rabbit MQ installed. I still needed to expose some ports for RabbitMQ so I added</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">####### PORTS ########</span><br><span class="line">#Main rabbitmq port</span><br><span class="line">EXPOSE <span class="number">5672</span></span><br><span class="line">#port mapper daemon (epmd)</span><br><span class="line">EXPOSE <span class="number">4369</span></span><br><span class="line">#inet_dist_listen</span><br><span class="line">EXPOSE <span class="number">35197</span></span><br><span class="line">#rabbitmq management console</span><br><span class="line">EXPOSE <span class="number">15672</span></span><br></pre></td></tr></table></figure><p>Rabbit also likes to know where Erlang lives so some environmental variables for that aren't going to hurt.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set the home directory for erlang so rabbit can find it easily</span></span><br><span class="line"><span class="keyword">ENV</span> ERLANG_HOME <span class="string">"c:\program files\erl8.2\erts-8.2"</span></span><br><span class="line"><span class="keyword">ENV</span> ERLANG_SERVICE_MANAGER_PATH <span class="string">"c:\program files\erl8.2\erts-8.2"</span></span><br></pre></td></tr></table></figure><p>We could forward the RabbitMQ ports to our local machine but I like the idea of using the container as if it were a distinct machine so let's also enable the management UI from anywhere on the network. To do that we'll replace the default config file with one that has</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;loopback_users, <span class="string">[]</span>&#125;,</span><br></pre></td></tr></table></figure><p>in it. We can copy our new config file over the one in the container from the dockerfile and set up a variable to point Rabbit at it.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> RABBITMQ_CONFIG_FILE <span class="string">"C:\rabbitmq"</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">"rabbitmq.config"</span>,<span class="string">" C:/"</span>]</span></span><br></pre></td></tr></table></figure><p>The config file looks like</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;rabbit, [&#123;loopback_users, []&#125;]&#125;].</span><br></pre></td></tr></table></figure><p>Finally we'll start the actual rabbit process as the default action of the container</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> RABBIT_MQ_HOME <span class="string">"C:\Program Files\RabbitMQ Server\rabbitmq_server-3.6.5"</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="string">"<span class="variable">$&#123;RABBIT_MQ_HOME&#125;</span>/sbin/rabbitmq-server.bat"</span></span></span><br></pre></td></tr></table></figure><p>Now you can log into the management portal using the guest/guest account.</p><p><img src="http://i.imgur.com/KvDVTb9.png" alt="Admin login"></p><p>It takes quite a while to start up the container and it took me close to 40 years to figure out building the container but it does save me installing rabbitmq on my local machine and makes experimenting with multiple instances pretty jolly easy.</p><p>The complete docker file is here:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> microsoft/windowsservercore</span><br><span class="line"></span><br><span class="line"><span class="comment">####### PORTS ########</span></span><br><span class="line"><span class="comment">#Main rabbitmq port</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5672</span></span><br><span class="line"><span class="comment">#port mapper daemon (epmd)</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">4369</span></span><br><span class="line"><span class="comment">#inet_dist_listen</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">35197</span></span><br><span class="line"><span class="comment">#rabbitmq management console</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">15672</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#set the home directory for erlang so rabbit can find it easily</span></span><br><span class="line"><span class="keyword">ENV</span> ERLANG_HOME <span class="string">"c:\program files\erl8.2\erts-8.2"</span></span><br><span class="line"><span class="keyword">ENV</span> ERLANG_SERVICE_MANAGER_PATH <span class="string">"c:\program files\erl8.2\erts-8.2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#install chocolatey</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> @powershell -NoProfile -ExecutionPolicy Bypass -Command <span class="string">"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"</span> &amp;&amp; SET <span class="string">"PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#install rabbitmq</span></span></span><br><span class="line"><span class="bash">RUN choco install -y rabbitmq</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#set up the path to the config file</span></span></span><br><span class="line"><span class="bash">ENV RABBITMQ_CONFIG_FILE <span class="string">"C:\rabbitmq"</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#copy a config file over</span></span></span><br><span class="line"><span class="bash">COPY [<span class="string">"rabbitmq.config"</span>,<span class="string">" C:/"</span>]</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#set the startup command to be rabbit</span></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"C:/Program Files/RabbitMQ Server/rabbitmq_server-3.6.5/sbin/rabbitmq-server.bat"</span>]</span></span><br></pre></td></tr></table></figure><p>In my next post I'll get around to actually using Rabbit MQ because all the yaks are shaved now... I hope.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I bought a new laptop, a Dell XPS 15 and my oh my is it snazzy. The thing I was most excited about was that I&#39;d get to play with Windows containers again. I have 3 other machines in the house but they&#39;re either unsuitable for containers (OSX running Windows in parallels) or I&#39;ve so toally borked them playing with early betas of containers they need to be formatted and reinstalled - possibly also thrown into the sun.&lt;/p&gt;
&lt;p&gt;So when I found myself presented with the question &amp;quot;how can we get into messaging in our apps for free?&amp;quot; I figured I&#39;d crack open the laptop and build something with MassTransit. I found that MassTransit supports running on RabbitMQ. Why that sounds like a perfect opportunity to deploy RabbitMQ to a container. Only problem was that I didn&#39;t really know how to do that.&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.westerndevs.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.westerndevs.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title type="html">C# Wildcard Variables</title>
    <link href="http://www.westerndevs.com/C/Wildcard-csharp/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/C/Wildcard-csharp/</id>
    <published>2016-11-09T22:00:00.000Z</published>
    <updated>2018-04-12T23:57:35.278Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>There is some great discussion going on about including discard variables in C#, possibly even for the C# 7 timeframe. It is so new that the name for them is still up in the air. In Haskel it is called a wildcard. I think this is a great feature which is found in other languages but isn't well known for people who haven't done funcitonal programming. The C# language has been sneaking into being a bit more functional over the last few releases. There is support for lambdas and there has been a bunch of work on immutability. Let's take a walk through how wildcards works.</p><p>Let's say that we have a function which has a number of output paramaters:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"><span class="keyword">out</span> List&lt;T&gt; list, <span class="keyword">out</span> <span class="keyword">int</span> size</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>Ugh, already I hate this method. I've never liked the out syntax because it is wordy. To use this function you would have to do</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; <span class="built_in">list</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">DoSomething(out <span class="built_in">list</span>, out <span class="built_in">size</span>);</span><br></pre></td></tr></table></figure><p>There is some hope for that syntax in C# 7 with what I would have called inline declaration of out variables but is being called &quot;out variables&quot;. The syntax would look like</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DoSomething(<span class="keyword">out</span> List&lt;T&gt; list, <span class="keyword">out</span> <span class="built_in">int</span> <span class="built_in">size</span>);</span><br></pre></td></tr></table></figure><p>This is obviously much nicer and you can read a bit more about it athttps://blogs.msdn.microsoft.com/dotnet/2016/08/24/whats-new-in-csharp-7-0/</p><p>However in my code base perhaps I don't care about the size parameter. As it stands right now you still need to declare some variable to hold the size even if it never gets used. For one variable this isn't a huge pain. I've taken to using the underscore to denote that I don't care about some variable.</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DoSomething(<span class="keyword">out</span> <span class="keyword">List</span>&lt;T&gt; <span class="keyword">list</span>, <span class="keyword">out</span> int _);</span><br><span class="line"><span class="comment">//make use of list never reference the _ variable</span></span><br></pre></td></tr></table></figure><p>The issue comes when I have some funciton which takes many parameters I don't care about.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DoSomething(<span class="keyword">out</span> List&lt;T&gt; list, <span class="keyword">out</span> <span class="keyword">int</span> _, <span class="keyword">out</span> <span class="keyword">float</span> __, <span class="keyword">out</span> <span class="keyword">decimal</span> ___);</span><br><span class="line"><span class="comment">//make use of list never reference the _ variables</span></span><br></pre></td></tr></table></figure><p>This is a huge bit of uglyness because we can't overload the _ variable so we need to create a bunch more variables. It is even more so ugly if we're using tuples and a deconstructing declaration (also part of C# 7). Our funciton could be changed to look like</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(List&lt;T&gt;, <span class="keyword">int</span>, <span class="keyword">float</span>, <span class="keyword">decimal</span>) DoSomething() &#123;&#125;</span><br></pre></td></tr></table></figure><p>This is now a function which returns a tuple containing everything we previously had as out prameters. Then you can break this tuple up using a deconstructing declaration.</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(List&lt;T&gt; list, <span class="built_in">int</span> <span class="built_in">size</span>, <span class="built_in">float</span> fidelity, <span class="keyword">decimal</span> cost) = DoSomething();</span><br></pre></td></tr></table></figure><p>This will break up the tuple into the fields you actually want. Except you don't care about size, fidelity and cost. With a wildcard we can write this as</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(List&lt;T&gt; list, int <span class="symbol">_</span>, <span class="built_in">float</span> <span class="symbol">_</span>, decimal <span class="symbol">_</span>) = DoSomething();</span><br></pre></td></tr></table></figure><p>This beauty of this wildcard is that we can use the same wildcard for each field an not worry about them in the least.</p><p>I'm really hopeful that this feature will make it to the next release.</p>]]></content>
    
    <summary type="html">
    
      Wildcard variables in C# are up for discussion for inclusion in C# 7 or some later version. They are a useful construct taken from functional languages like Haskel.
    
    </summary>
    
      <category term="C#" scheme="http://www.westerndevs.com/categories/C/"/>
    
    
      <category term="C#" scheme="http://www.westerndevs.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title type="html">You&#39;re using HttpClient wrong and it is destabilizing your software</title>
    <link href="http://www.westerndevs.com/Deployment/httpclientwrong/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Deployment/httpclientwrong/</id>
    <published>2016-08-28T21:36:36.000Z</published>
    <updated>2018-04-12T23:57:35.278Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I've been using HttpClient wrong for years and it finally came back to bite me. My site was unstable and my clients furious, with a simple fix performance improved greatly and the instability disapeared.</p><p><img src="http://i.imgur.com/EctiaBj.jpg" alt="Imgur"></p><p>At the same time I actually improved the performance of the application through more efficient socket usage.</p><a id="more"></a><p>Microservices can be a bear to deal with. As more services are added and monoliths are broken down there tends to be more communication paths between services. There are many options for communicating, but HTTP is an ever popular option. If the microservies are built in C# or any .NET language then chances are you've made use of <code>HttpClient</code>. I know I did.</p><p>The typical usage pattern looked a little bit like this:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span>(<span class="keyword">var</span> client = <span class="keyword">new</span> <span class="type">HttpClient</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//do something with http client</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>Here's the Rub</h2><p>The <code>using</code> statement is a C# nicity for dealing with disposable objects. Once the <code>using</code> block is complete then the disposable object, in this case <code>HttpClient</code>, goes out of scope and is disposed. The <code>dispose</code> method is called and whatever resources are in use are cleaned up. This is a very typical pattern in .NET and we use it for everything from database connections to stream writers. Really any object which has external resources that must be clean up uses the <code>IDisposable</code> interface.</p><p>And you can't be blamed for wanting to wrap it with the using. First of all, it's considered good practice to do so. In fact, the <a href="https://msdn.microsoft.com/en-ca/library/yh598w02.aspx" target="_blank" rel="noopener">official docs</a> for <code>using</code> state:</p><blockquote><p>As a rule, when you use an IDisposable object, you should declare and instantiate it in a using statement.</p></blockquote><p>Secondly, all code you may have seen since...the inception of <code>HttpClient</code> would have told you to use a <code>using</code> statement block, including recent docs on the <a href="http://www.asp.net/web-api/overview/advanced/calling-a-web-api-from-a-net-client" target="_blank" rel="noopener">ASP.NET site itself</a>. The internet is generally <a href="http://stackoverflow.com/questions/212198/what-is-the-c-sharp-using-block-and-why-should-i-use-it" target="_blank" rel="noopener">in agreement as well</a>.</p><p>But <code>HttpClient</code> is different. Although it implements the <code>IDisposable</code> interface it is actually a shared object. This means that under the covers it is <a href="https://en.wikipedia.org/wiki/Reentrancy_(computing)" target="_blank" rel="noopener">reentrant</a> and thread safe. Instead of creating a new instance of <code>HttpClient</code> for each execution you should share a single instance of <code>HttpClient</code> for the entire lifetime of the application. Let's look at why.</p><h2>See For Yourself</h2><p>Here is a simple program written to demonstrate the use of <code>HttpClient</code>:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using System;</span><br><span class="line">using System.Net.Http;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApplication</span><br><span class="line">&#123;</span><br><span class="line">    public class Program</span><br><span class="line">    &#123;</span><br><span class="line">        public static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Starting connections"</span>);</span><br><span class="line">            <span class="keyword">for</span>(int i = 0; i&lt;10; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                using(var<span class="built_in"> client </span>= new HttpClient())</span><br><span class="line">                &#123;</span><br><span class="line">                    var result = client.GetAsync(<span class="string">"http://aspnetmonsters.com"</span>).Result;</span><br><span class="line">                    Console.WriteLine(result.StatusCode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">"Connections done"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This will open up 10 requests to one of the best sites on the internet <a href="http://aspnetmonsters.com" target="_blank" rel="noopener">http://aspnetmonsters.com</a> and do a <code>GET</code>. We just print the status code so we know it is working. The output is going to be:</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">C:\code\socket&gt; dotnet run</span><br><span class="line">Project socket (.NETCoreApp,Version=v1.0) will be compiled because inputs were modified</span><br><span class="line">Compiling socket for .NETCoreApp,Version=v1.0</span><br><span class="line"></span><br><span class="line">Compilation succeeded.</span><br><span class="line">   <span class="number"> 0 </span>Warning(s)</span><br><span class="line">   <span class="number"> 0 </span>Error(s)</span><br><span class="line"></span><br><span class="line">Time elapsed 00:00:01.2501667</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting connections</span><br><span class="line"><span class="symbol">OK</span></span><br><span class="line"><span class="symbol">OK</span></span><br><span class="line"><span class="symbol">OK</span></span><br><span class="line"><span class="symbol">OK</span></span><br><span class="line"><span class="symbol">OK</span></span><br><span class="line"><span class="symbol">OK</span></span><br><span class="line"><span class="symbol">OK</span></span><br><span class="line"><span class="symbol">OK</span></span><br><span class="line"><span class="symbol">OK</span></span><br><span class="line"><span class="symbol">OK</span></span><br><span class="line">Connections done</span><br></pre></td></tr></table></figure><h2>But Wait, There's More!</h2><p>All work and everything is right with the world. Except that it isn't. If we pull out the <code>netstat</code> tool and look at the state of sockets on the machine running this we'll see:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">C</span>:\<span class="selector-tag">code</span>\<span class="selector-tag">socket</span>&gt;<span class="selector-tag">NETSTAT</span><span class="selector-class">.EXE</span></span><br><span class="line">...</span><br><span class="line">  <span class="selector-tag">Proto</span>  <span class="selector-tag">Local</span> <span class="selector-tag">Address</span>          <span class="selector-tag">Foreign</span> <span class="selector-tag">Address</span>        <span class="selector-tag">State</span></span><br><span class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12050</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></span><br><span class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12051</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></span><br><span class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12053</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></span><br><span class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12054</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></span><br><span class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12055</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></span><br><span class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12056</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></span><br><span class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12057</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></span><br><span class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12058</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></span><br><span class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12059</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></span><br><span class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12060</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></span><br><span class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12061</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></span><br><span class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12062</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></span><br><span class="line">  <span class="selector-tag">TCP</span>    127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:1695</span>         <span class="selector-tag">SIMONTIMMS742B</span><span class="selector-pseudo">:1696</span>    <span class="selector-tag">ESTABLISHED</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Huh, that's weird...the application has exited and yet there are still a bunch of these connections open to the Azure machine which hosts the ASP.NET Monsters website. They are in the <code>TIME_WAIT</code> state which means that the connection has been closed on one side (ours) but we're still waiting to see if any additional packets come in on it because they might have been delayed on the network somewhere. Here is a diagram of TCP/IP states I stole from https://www4.cs.fau.de/Projects/JX/Projects/TCP/tcpstate.html.</p><p><img src="http://i.imgur.com/rXxnIA8.png" alt="Imgur"></p><p>Windows will hold a connection in this state for 240 seconds (It is set by <code>[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\TcpTimedWaitDelay]</code>). There is a limit to how quickly Windows can open new sockets so if you exhaust the connection pool then you're likely to see error like:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unable <span class="keyword">to</span> connect <span class="keyword">to</span> the remote server</span><br><span class="line">System.Net.Sockets.SocketException: Only one usage of each socket<span class="built_in"> address </span>(protocol<span class="built_in">/network </span>address/port) is normally permitted.</span><br></pre></td></tr></table></figure><p>Searching for that in the Googles will give you some terrible advice about decreasing the connection timeout. In fact, decreasing the timeout can lead to other detrimental consequences when applications that properly use <code>HttpClient</code> or similar constructs are run on the server. We need to understand what &quot;properly&quot; means and fix the underlying problem instead of tinkering with machine level variables.</p><h2>The Fix is In</h2><p>I really must thank <a href="https://twitter.com/hsulriksen" target="_blank" rel="noopener">Harald S. Ulrksen</a> and <a href="https://twitter.com/darrel_miller" target="_blank" rel="noopener">Darrel Miller</a> for pointing me to <a href="https://t.co/bewSxPqlps" target="_blank" rel="noopener">The Patterns and Practices documents</a> on this.</p><p>If we share a single instance of <code>HttpClient</code> then we can reduce the waste of sockets by reusing them:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Net.Http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ConsoleApplication</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> class Program</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">HttpClient</span> <span class="built_in">Client</span> = <span class="keyword">new</span> <span class="built_in">HttpClient</span>();</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Main(<span class="keyword">string</span>[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Console</span>.WriteLine(<span class="string">"Starting connections"</span>);</span><br><span class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                var result = <span class="built_in">Client</span>.GetAsync(<span class="string">"http://aspnetmonsters.com"</span>).Result;</span><br><span class="line">                <span class="built_in">Console</span>.WriteLine(result.StatusCode);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Console</span>.WriteLine(<span class="string">"Connections done"</span>);</span><br><span class="line">            <span class="built_in">Console</span>.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note here that we have just one instance of <code>HttpClient</code> shared for the entire application. Eveything still works like it use to (actually a little faster due to socket reuse). Netstat now just shows:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12254</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">ESTABLISHED</span></span><br></pre></td></tr></table></figure><p>In the production scenario I had the number of sockets was averaging around 4000, and at peak would exceed 5000, effectively crushing the available resources on the server, which then caused services to fall over. After implementing the change, the sockets in use dropped from an average of more than 4000 to being consistently less than 400, and usually around 100.</p><p>This is a chunk of a graph from our monitoring tools and shows what happened after we deployed a limited proof of the fix to a select number of microservices.</p><p><img src="http://i.imgur.com/0QVdLMT.png" alt="Imgur"></p><p>This is dramatic. If you have any kind of load at all you need to remember these two things:</p><ol><li>Make your <code>HttpClient</code> static.</li><li>Do <em>not</em> dispose of or wrap your <code>HttpClient</code> in a using unless you explicitly are looking for a particular behaviour (such as causing your services to fail).</li></ol><h2>Wrapping Up</h2><p>The socket exhaustion problems we had been struggling with for months disapeared and our client threw a virtual parade. I cannot understate how unobvious this bug was. For years we have been conditioned to dispose of objects that implement <code>IDisposable</code> and many refactoring tools like R# and CodeRush actually warn if you don't. In this case disposing of <code>HttpClient</code> was the wrong thing to do. It is unfortunate that <code>HttpClient</code> implements <code>IDisposable</code> and encourages the wrong behaviour</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I&#39;ve been using HttpClient wrong for years and it finally came back to bite me. My site was unstable and my clients furious, with a simple fix performance improved greatly and the instability disapeared.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/EctiaBj.jpg&quot; alt=&quot;Imgur&quot;&gt;&lt;/p&gt;
&lt;p&gt;At the same time I actually improved the performance of the application through more efficient socket usage.&lt;/p&gt;
    
    </summary>
    
      <category term="Deployment" scheme="http://www.westerndevs.com/categories/Deployment/"/>
    
    
      <category term=".net" scheme="http://www.westerndevs.com/tags/net/"/>
    
  </entry>
  
  <entry>
    <title type="html">An Intro to NGINX for Kestrel</title>
    <link href="http://www.westerndevs.com/Deployment/nginx/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Deployment/nginx/</id>
    <published>2016-07-17T21:36:36.000Z</published>
    <updated>2018-04-12T23:57:35.278Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Kestrel is a light weight web server for hosting ASP.NET Core applications on really any platform. It is based on a library called libuv which is an eventing library and it, actually, the same one used by nodejs. This means that it is an event driven asynchronous I/O based server.</p><p>When I say that Kestrel is light weight I mean that it is lacking a lot of the things that an ASP.NET web developer might have come to expect from a web server like IIS. For instance you cannot do SSL termination with Kestrel or URL rewrites or GZip compression. Some of this can be done by ASP.NET proper but that tends to be less efficient than one might like. Ideally the server would just be responsbile for running ASP.NET code.  The suggested approach not just for Kestrel but for other light weight front end web servers like nodejs is to put a web server in front of it to handle infrastructure concerns. One of the better known ones is Nginx (pronounced engine-X like racer X).</p><p><img src="https://www.nginx.com/wp-content/themes/nginx-theme/assets/img//logo.png" alt="https://www.nginx.com/wp-content/themes/nginx-theme/assets/img//logo.png"></p><p>Nginix is a basket full of interesting capabilities. You can use it as a reverse proxy; in this configuration it takes load off your actual web server by preserving a cache of data which it serves before calling back to your web server. As a proxy it can also sit in front of multiple end points on your server and make them appear to be a single end point. This is useful for hiding a number of microservices behind a single end point. It can do SSL termination which makes it easy to add SSL to your site without having to modify a single line of code. It can also do gzip compression and serve static files. The commercial version of Nginx adds load balancing to the equation and a host of other things.</p><p>Let's set up Nginx in front of Kestrel to provide gzip support for our web site. First we'll just create a new ASP.NET Core web application.</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yo aspnet</span></span><br></pre></td></tr></table></figure><p>Select <code>Web Application</code> and then bring it up with</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet restore</span><br><span class="line">dotnet <span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>This is running on port 5000 on my machine and hitting it with a web browser reports the content-encoding as regular, no gzip.</p><p><img src="http://i.imgur.com/3NvYQ0w.jpg" alt="No gzip content encoding"></p><p>That's no good, we want to make sure our applications are served with gzip. That will make the payload smaller and the application faster to load.</p><p>Let's set up Nginx. I installed my copy through brew (I'm running on OSX) but you can just as easily download a copy from the <a href="https://www.nginx.org/" target="_blank" rel="noopener">Nginx site</a>. There is even <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">support for Windows</a> although the performance there is not as good as it in on *NIX operating systems. I then set up a <code>nginx.conf</code> configuraiton file. The default config file is huge but I've trimmed it down here and annotated it.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number of worker processes to spawn</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#maximum number of connections</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#serving http information</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment">#set up mime types</span></span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#set up logging</span></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line">    <span class="attribute">access_log</span>  /Users/stimms/Projects/nginxdemo/logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#uses sendfile(2) to send files directly to a socket without buffering</span></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#the length of time a connection will stay alive on the server</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#compress the response stream with gzip</span></span><br><span class="line">    <span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#configure where to listen</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment">#listen over http on port 8080 on localhost</span></span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8080</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#serve static files from /Users/stimms/Projects/nginxdemo for requests for</span></span><br><span class="line">        <span class="comment">#resources under /static</span></span><br><span class="line">        <span class="attribute">location</span> /static &#123;</span><br><span class="line">            <span class="attribute">root</span> /Users/stimms/Projects/nginxdemo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#by default pass all requests on / over to localhost on port 5000</span></span><br><span class="line">        <span class="comment">#this is our Kestrel server</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:5000/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With this file in place we can load up the server on port 8080 and test it out.</p><p><code>nginx -c /Users/stimms/Projects/nginxdemo/nginx.conf</code></p><p>I found I had to use full paths to the config file or nginx would look in its configuration directory.</p><p>Don't forget to also run Kestrel. Now when pointing a web browser at port 8080 on the local host we see</p><p><img src="http://i.imgur.com/diRLFrA.jpg" alt="Content-encoding gzip enabled"></p><p>Content-encoding now lists gzip compression. Even on this small page we can see a reduction from 8.5K to 2.6K scaled over a huge web site this would be a massive savings.</p><p>Let's play with taking some more load off the Kestrel server by caching results. In the nginx configuration file we can add a new cache under the <code>http</code> configuration</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set up a proxy cache location</span></span><br><span class="line">proxy_cache_path  /tmp/cache <span class="attribute">levels</span>=1:2 <span class="attribute">keys_zone</span>=aspnetcache:8m <span class="attribute">max_size</span>=1000m <span class="attribute">inactive</span>=600m;  </span><br><span class="line">proxy_temp_path /tmp/cache/temp;</span><br></pre></td></tr></table></figure><p>This sets up a cache in /tmp/cache of size 8MB up to 1000MB which will become inactive after 600 minutes (10 hours). Then under the listen directive we'll add some rules about what to cache</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#use the proxy to save files</span><br><span class="line">proxy_cache aspnetcache;</span><br><span class="line">proxy_cache_valid  <span class="number">200</span> <span class="number">302</span>  <span class="number">60</span>m;</span><br><span class="line">proxy_cache_valid  <span class="number">404</span>      <span class="number">1</span>m;</span><br></pre></td></tr></table></figure><p>Here we cache 200 and 302 respones for 60 minutes and 404 responses for 1 minute. If we add these rules and restart the nginx server</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -c <span class="regexp">/Users/</span>stimms<span class="regexp">/Projects/</span>nginxdemo<span class="regexp">/nginx.conf -s reload</span></span><br></pre></td></tr></table></figure><p>Now when we visit the site multiple times the output of the Kestrel web server shows it isn't being hit. Awesome! You might not want to cache everything on your site and you can add rules to the listen directive to just cache image files, for instance.</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#just <span class="keyword">cache</span> image files, <span class="keyword">if</span> <span class="literal">not</span> <span class="keyword">in</span> <span class="keyword">cache</span> ask Kestrel</span><br><span class="line">location /images/ &#123;</span><br><span class="line">    #use the proxy <span class="keyword">to</span> save files</span><br><span class="line">    proxy_cache aspnetcache;</span><br><span class="line">    proxy_cache_valid  <span class="number">200</span> <span class="number">302</span>  <span class="number">60</span>m;</span><br><span class="line">    proxy_cache_valid  <span class="number">404</span>      <span class="number">1</span>m;</span><br><span class="line">    proxy_pass http:<span class="comment">//127.0.0.1:5000;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#by default pass <span class="literal">all</span> requests <span class="keyword">on</span> / over <span class="keyword">to</span> localhost <span class="keyword">on</span> port <span class="number">5000</span></span><br><span class="line">#this is our Kestrel server</span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http:<span class="comment">//127.0.0.1:5000/;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>While Kestrel is fast it is still slower than Nginx at serving static files so it is worthwhile offloading traffix to Nginx when possible.</p><p>Nginx is a great deal of fun and worth playing with. We'll probably revisit it in future and talk about how to use it in conjunction with microservices. You can find the code for this post at <a href="https://github.com/AspNetMonsters/Nginx" target="_blank" rel="noopener">https://github.com/AspNetMonsters/Nginx</a>.</p>]]></content>
    
    <summary type="html">
    
      Kestrel is a server capable of serving up ASP.NET Core applications on any platform but in production you need to run it behind another server.
    
    </summary>
    
      <category term="Deployment" scheme="http://www.westerndevs.com/categories/Deployment/"/>
    
    
      <category term="nginx" scheme="http://www.westerndevs.com/tags/nginx/"/>
    
      <category term="kestrel" scheme="http://www.westerndevs.com/tags/kestrel/"/>
    
      <category term="deployment" scheme="http://www.westerndevs.com/tags/deployment/"/>
    
  </entry>
  
  <entry>
    <title type="html">End to end testing for your saga</title>
    <link href="http://www.westerndevs.com/Tools/NSBSagaTimeouts/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Tools/NSBSagaTimeouts/</id>
    <published>2016-07-15T18:56:56.000Z</published>
    <updated>2018-04-12T23:57:35.274Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><strong>Disclaimer</strong></p><p>In this article I'm going to use the term &quot;saga&quot; because that's what NServiceBus calls it. Don't take this as acceptance of this definition of &quot;saga&quot; in general. What NServiceBus call &quot;saga&quot; would be better called a &quot;workflow&quot; or &quot;process manager&quot;. Kellabyte has a <a href="http://kellabyte.com/tag/saga/" target="_blank" rel="noopener">great article</a> on it.</p><p>I've recently been playing with sagas in NServiceBus. A saga is a tool for coordinating a number of messages across time. Generally there will be one or messages which start a saga and then the saga will listen for new messages to wake up and perform action. A saga is stateful which means that you can put all sorts of useful information in the saga data to allow making decisions later on. A very useful feature of sagas is that you can set a timeout to be fired at some point in the future. So for example you could start a shopping cart saga and schedule a timeout 24 hours in the future. When that timeout is reached the saga is woken up again and you could send a reminder e-mail to the owner of cart to check out. There are countless business processes which have some requirement to do something in the future even if that something is checking to make sure that some action has occured and compensating if not.</p><p>As you can imagine when testing a saga in an end to end test you don't really want to wait 24 hours for something to timeout. The usual advice around this is to make the timeout configurable in some fashion and just set it to a low value. This is difficult to do in an end to end test and still have confidence that you're not hiding some broken functionality. This is why we don't like to have special constructors just for unit testing. In my case I'm using SQL persistance to save timeout information to a database. This means that the database can be hacked to allow the manual execution of timeouts. Let's do it.</p><p>The <code>TimeoutEntity</code> table is the one we want to alter. It contains a column called <code>Time</code> which is the time at which the timeout will occur. In my case I knew an Id from the saga so I joined against the specific saga data table to find the approprate timeout to update. I only schedule one timeout at a time with this saga so I don't have to worry about finding a timeout in a multitude of them for that saga.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> te</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">Time</span>=<span class="keyword">GETUTCDATE</span>()</span><br><span class="line"><span class="keyword">from</span> nservicebus.dbo.TimeoutEntity te <span class="keyword">inner</span> <span class="keyword">join</span> </span><br><span class="line">        nservicebus.dbo.SockFinderSagaData sfsd <span class="keyword">on</span> te.SagaId = sfsd.Id</span><br><span class="line"><span class="keyword">where</span> SockId=@sockId</span><br></pre></td></tr></table></figure><p>You'll note here that I set the time to the current time. It is important that you don't set the date to some time in the past. I initially did that and found timeouts weren't firing. The reason is that the query NServiceBus uses to find the timeout looks for timeout entries since the last polling event to now. This query would miss things scheduled way in the past. Here are the queries the NHibernate persistence uses</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span><span class="number">-07</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">17</span>:<span class="number">29</span>,<span class="number">197</span> DEBUG [<span class="number">15</span>][NT AUTHORITY\SYSTEM] SELECT this_.Id <span class="keyword">as</span> y0_, this_.Time <span class="keyword">as</span> y1_ FROM TimeoutEntity this_ WHERE this_.Endpoint = <span class="meta">@p</span>0 and (this_.Time &gt;= <span class="meta">@p</span>1 and this_.Time &lt;= <span class="meta">@p</span>2) ORDER BY this_.Time asc;<span class="meta">@p</span>0 = <span class="string">'AdverseActions'</span> [<span class="built_in">Type</span>: <span class="built_in">String</span> (<span class="number">4000</span>)], <span class="meta">@p</span>1 = <span class="number">7</span>/<span class="number">15</span>/<span class="number">2016</span> <span class="number">3</span>:<span class="number">47</span>:<span class="number">42</span> PM [<span class="built_in">Type</span>: <span class="built_in">DateTime</span> (<span class="number">0</span>)], <span class="meta">@p</span>2 = <span class="number">7</span>/<span class="number">15</span>/<span class="number">2016</span> <span class="number">4</span>:<span class="number">17</span>:<span class="number">29</span> PM [<span class="built_in">Type</span>: <span class="built_in">DateTime</span> (<span class="number">0</span>)]</span><br><span class="line"><span class="number">2016</span><span class="number">-07</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">17</span>:<span class="number">29</span>,<span class="number">197</span> DEBUG [<span class="number">15</span>][NT AUTHORITY\SYSTEM] SELECT this_.Id <span class="keyword">as</span> Id6_0_, this_.Destination <span class="keyword">as</span> Destinat2_6_0_, this_.SagaId <span class="keyword">as</span> SagaId6_0_, this_.State <span class="keyword">as</span> State6_0_, this_.Time <span class="keyword">as</span> Time6_0_, this_.Headers <span class="keyword">as</span> Headers6_0_, this_.Endpoint <span class="keyword">as</span> Endpoint6_0_ FROM TimeoutEntity this_ WHERE this_.Endpoint = <span class="meta">@p</span>0 and this_.Time &gt; <span class="meta">@p</span>1 ORDER BY this_.Time asc OFFSET <span class="number">0</span> ROWS FETCH FIRST <span class="meta">@p</span>2 ROWS ONLY;<span class="meta">@p</span>0 = <span class="string">'AdverseActions'</span> [<span class="built_in">Type</span>: <span class="built_in">String</span> (<span class="number">4000</span>)], <span class="meta">@p</span>1 = <span class="number">7</span>/<span class="number">15</span>/<span class="number">2016</span> <span class="number">4</span>:<span class="number">17</span>:<span class="number">29</span> PM [<span class="built_in">Type</span>: <span class="built_in">DateTime</span> (<span class="number">0</span>)], <span class="meta">@p</span>2 = <span class="number">1</span> [<span class="built_in">Type</span>: Int32 (<span class="number">0</span>)]</span><br></pre></td></tr></table></figure><p>Polling of the timeout table happens at least once per minute. So this still means that your tests need to wait 60 seconds from hacking the table to checking the result of the timeout. This is still a bit painful but these are integraiton tests and likely you're running a bunch in parallel so the hit isn't horrific. With this code in place I was able to reliably simulate the state of the saga in the future. I'm like a time traveler and you can be too.</p>]]></content>
    
    <summary type="html">
    
      Looking to do end to end testing of your saga? I strugged.
    
    </summary>
    
      <category term="Tools" scheme="http://www.westerndevs.com/categories/Tools/"/>
    
    
      <category term="NserviceBus" scheme="http://www.westerndevs.com/tags/NserviceBus/"/>
    
  </entry>
  
  <entry>
    <title type="html">How I fixed OneDrive like Mark Russinovich</title>
    <link href="http://www.westerndevs.com/debugging/MarkRussinovich/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/debugging/MarkRussinovich/</id>
    <published>2016-06-11T22:56:56.000Z</published>
    <updated>2018-04-12T23:57:35.274Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Fellow <a href="http://aspnetmonsters.com" target="_blank" rel="noopener">Monster David Paquette</a> sent me a link to a shared OneDrive folder today with some stuff in it. Clicking on the link I was able to add it to my OneDrive. The dialog told me files would appear on my machine soon. So I waited.</p><p>After an outrageously long time, 37 seconds, the files weren't there and I went hunting to find out why. As it turns out OneDrive wasn't even running. That's suppose to be a near impossiblity in Windows 10 so I hopped on the Interwebernets to find out why. Multiple sources suggested solutions like clearing my credentials and running <code>OneDrive.exe /reset</code>. Of course none of them worked.</p><p>Something was busted.</p><p>Running the OneDrive executable didn't bring up the UI it didn't do any of the things the Internet told me it should. My mind went back to when I was setting up my account on this computer and how I fat fingered <code>stimm</code> instead of <code>stimms</code> as my user name. Could it be the OneDrive was trying to access some files that didn't exist?</p><p>Channeling my inner Mark Russinovich I opened up <code>ProcessMonitor</code> a fantastic tool which monitors file system and registry access. You can grab your own copy for free from <a href="https://technet.microsoft.com/en-us/sysinternals/bb896645.aspx" target="_blank" rel="noopener">https://technet.microsoft.com/en-us/sysinternals/bb896645.aspx</a>.</p><p>In the UI I added filters for any process with the word &quot;drive&quot; in it and then filtered out &quot;google&quot;. I did this because I wasn't sure if the rename from skydrive to onedrive had missed anything. Then I ran the command line to start up OneDrive again.</p><p>Process monitor found about 300 results before the process exited. Sure enough as I went through the file accesses I found<img src="http://i.imgur.com/soAh4PR.png" alt="http://i.imgur.com/soAh4PR.png">Sure enough OneDrive is trying to create files inside of a directory which doesn't exist. Scrolling further up I was able to find some references to values in the registry under <code>HKCU\SOFTWARE\Microsoft\OneDrive</code> which, when I opened them up, contained the wrong paths. I corrected them<img src="http://i.imgur.com/arhWYgt.png" alt="http://i.imgur.com/arhWYgt.png">And with that in place was able to start up OneDrive successfully again and sync down the pictures of cats that David had sent me.</p><p>The story here is that it is possible, and even easy, to figure out why a compiled application on your machine isn't working. By examining the file and registry accesses it is making you might be able to suss out what's going wrong and fix it.</p>]]></content>
    
    <summary type="html">
    
      Even with compiled applications it is possible to debug issues
    
    </summary>
    
      <category term="debugging" scheme="http://www.westerndevs.com/categories/debugging/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">CI with F# SQL Type Providers</title>
    <link href="http://www.westerndevs.com/docker/CI-for-fsharp-typeproviders/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/docker/CI-for-fsharp-typeproviders/</id>
    <published>2016-05-06T22:56:56.000Z</published>
    <updated>2018-04-12T23:57:35.274Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>My experimentation with F# continues. My latest challenge has been figuring out how to get SQL type providers to work with continuous integration. The way that SQL type providers work (and I'm speaking broadly here because there are about 4 of them) is that they examine a live database and generate types from it. On your local machine this is a perfect set up because you have the database locally to do development against. However on the build server having a database isn't as likely.</p><p>In my particular case I'm using Visual Studio Online or TFS Online or whatever the squid it is called these days. Visual studio team services that's what it is called.</p><p><img src="http://i.imgur.com/raetyHn.jpg" alt="Screenshot of VSTS"></p><p>I'm using a hosted build agent which may or may not have a database server on it - at least not one that I really want to rely on. I was tweeting about the issue and Dmitry Morozov (who wrote the type provider I'm using - the F# community on twitter is amazing) suggested that I just make the database part of my version control. Of course I'm already doing that but in this project I was using EF migrations. The issue with that is that I need to have the database in place to build the project and I needed to build the project to run the migrations... For those who are big into graph theory you will have recognized that there is a cycle in the dependency graph and that ain't good.</p><p><img src="http://i.imgur.com/8tORskw.png" alt="Graph cycles"></p><p>EF migrations are kind of a pain, at least that was my impression. I checked with Canada's Julie Lerman, David Paquette, to see if maybe I was just using them wrong.</p><p><img src="http://i.imgur.com/0O49NuU.jpg" alt="Discussion with Dave Paquette"></p><p>So I migrated to roundhouse which is a story for another post. With that in place I set up a super cheap database in azure and I hooked up the build process to update that database on every deploy. This is really nice because it catches database migration issues before the deployment step. I've been burned by migrations which locked the database before on this project and now I can catch them against a low impact database.</p><p>One of the first step in my build process is to deploy the database.<img src="http://i.imgur.com/rcrX5KS.jpg" alt="Build process"></p><p>In my F# I have a setting module which holds all the settings and it includes</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Settings = </span><br><span class="line">    <span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line">    <span class="keyword">let</span> buildTimeConnectionString = <span class="string">"Server=tcp:builddependencies.database.windows.net,1433;Database=BuildDependencies;User ID=build@builddependencies;Password=goodtryhackers;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"</span></span><br></pre></td></tr></table></figure><p>And this string is used throughout my code when I create the SQL based types</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">Completions </span>= SqlProgrammabilityProvider&lt;Settings.buildTimeConnectionString&gt;</span><br></pre></td></tr></table></figure><p>and</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mergeCommand = <span class="keyword">new</span> SqlCommandProvider&lt;<span class="string">"""</span></span><br><span class="line"><span class="string">        merge systems as target</span></span><br><span class="line"><span class="string">        ..."""</span>, Settings.buildTimeConnectionString&gt;(ConnectionStringProvider.GetConnection)</span><br></pre></td></tr></table></figure><p>In that second example you might notice that the build time connection string is different from the run time connection string which is specified as a parameter.</p><p>##How I wish it worked</p><p>For the most part having a database build as part of your build process isn't a huge deal. You need it for integration tests anyway but it is a barrier for adoption. It would be cool if you could check in a serialized version of the schema and, during CI builds, point the type provider at this serialized version. This serialized version could be generated on the developer workstations then checked in. I don't think it is an ideal solution and now I've done the footwork to get the build database I don't think I would use it.</p>]]></content>
    
    <summary type="html">
    
      F# type providers are awesome but it took me a bit to figure out how to get them to work with CI
    
    </summary>
    
      <category term="docker" scheme="http://www.westerndevs.com/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">Running your app on Windows Server Core Containers</title>
    <link href="http://www.westerndevs.com/docker/windows-docker/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/docker/windows-docker/</id>
    <published>2016-04-27T22:56:56.000Z</published>
    <updated>2018-04-12T23:57:35.274Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Most of the day I work on an app which makes use of <a href="http://particular.net/" target="_blank" rel="noopener">NServiceBus</a>. If you've ever talked to me about messaging, then you know that I'm all over messaging like a ferret in a sock.<img src="http://i.imgur.com/oglJADJ.png" alt="Sock Ferret"></p><p>So I'm, understandibly, a pretty big fan of NServiceBus - for the most part. The thing with architecting your solution to use SOA or Microservices or whatever we're calling it these days is that you end up with a lot of small applications. Figuring out how to deploy these can be a bit of a pain as your system grows. One solution I like is to make use of the exciting upcoming world of containers. I've deployed a few ASP.NET Core applications to a container but NServiceBus doesn't work on dotnet Core so I need to us a Windows container here.</p><p>First up is to download the ISO for Windows Server Core 2016 from Microsoft. You can do that for free <a href="https://www.microsoft.com/en-us/server-cloud/products/windows-server-2016/" target="_blank" rel="noopener">here</a>.  I provisioned a virtual box VM and installed Windows using the downloaded ISO. I chose to use windows server core as opposed to the version of windows which includes a full UI. The command line was good enough for Space Quest II and by gum it is good enough for me.</p><p>Starting up this vm gets you this screen<img src="http://i.imgur.com/jvEsdMU.png" alt="Imgur"></p><p>Okay, let's do it. Docker isn't installed by default but there is a great article on how to install it onto an existing machine <a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/quick-start/quick-start-windows-server" target="_blank" rel="noopener">here</a>. In short I ran</p><p><code>powershell.exe</code></p><p>Which started up powershell for me (weird that powershell isn't the default shell). Then</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -uri https://aka.ms/tp4/<span class="keyword">Install</span>-ContainerHost -OutFile <span class="keyword">C</span>:\<span class="keyword">Install</span>-ContainerHost.ps1</span><br><span class="line">&amp; <span class="keyword">C</span>:\<span class="keyword">Install</span>-ContainerHost.ps1</span><br></pre></td></tr></table></figure><p>I didn't specify the -HyperV flag as in the linked article because I wanted Docker containers. There are two flavours of containers on Windows at the moment. HyperV containers which are heavier weight and Docker containers which are lighter. I was pretty confident I could get away with Docker containers so I started with that. The installer took a long, long time. It had to download a bunch of stuff and for some reason it decided to use the background downloader which is super slow.</p><p><img src="http://i.imgur.com/3ce2GpA.png" alt="Slowwwww"></p><p>By default, the docker daemon only listens on 127.0.0.1 which means that you can only connect to it from inside the virtual machine. That's not all that useful as all my stuff is outside of the virtual machine. I needed to do a couple of things to get that working.</p><p>The first was to tell docker to listen on all interfaces. Ideally you shouldn't allow docker to bind to external interfaces without the TLS certificates installed. That was kind of a lot of work so I ignored the warning in the logs that it generates</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/!\\ DONT<span class="comment">' BIND ON ANY IP ADDRESS WITHOUT setting -tlsverify IF YOU DON'T KNOW WHAT YOU'RE DOING /!\\</span></span><br></pre></td></tr></table></figure><p>Yeah that's fine. To do this open up the docker start command and tell it to listen on the 0.0.0.0 interface.</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad c:<span class="symbol">\p</span>rogramdata<span class="symbol">\d</span>ocker<span class="symbol">\r</span>unDockerDaemon.cmd</span><br></pre></td></tr></table></figure><p>Now edit the line</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker daemon -D -<span class="selector-tag">b</span> <span class="string">"Virtual Switch"</span></span><br></pre></td></tr></table></figure><p>to read</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">daemon</span> <span class="selector-tag">-D</span> <span class="selector-tag">-b</span> "<span class="selector-tag">Virtual</span> <span class="selector-tag">Switch</span>" <span class="selector-tag">-H</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:2376</span></span><br></pre></td></tr></table></figure><p>Now we need to relax the firewall rules or, in my case, turn off the firewall completely.</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Set</span>-NetFirewallProfile <span class="comment">-name * -Enabled</span> <span class="comment">"false"</span></span><br></pre></td></tr></table></figure><p>Now restart docker</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> stop docker</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> docker</span><br></pre></td></tr></table></figure><p>We should now be able to access docker from the host operating system. And indeed I can by specifying the host to connect to when using the docker tools. In my case on port 2376 on 192.168.0.13</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker -H <span class="string">tcp:</span><span class="comment">//192.168.0.13:2376 ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS   PORTS               NAMES</span><br></pre></td></tr></table></figure><p>Finally, we can actually start using docker.</p><p>I hammered together a quick docker file which sucked in the output of my NSB handler's build directory.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> windowsservercore</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> bin/Debug /funnel</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">WORKDIR /funnel</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENTRYPOINT NServiceBus.Host.exe</span></span><br></pre></td></tr></table></figure><p>This dockerfile is based on the windowservercore image which was loaded onto the virtual machine during the setup script. You can check that using the <code>images</code> command to docker. To get the docker file running I first build the image then ask for it to be run</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker -H  <span class="built_in">t</span><span class="symbol">cp:</span>//<span class="number">192.168</span>.<span class="number">0.13</span><span class="symbol">:2376</span> build -<span class="built_in">t</span> funnel1 -f .\Dockerfile .</span><br><span class="line">docker -H  <span class="built_in">t</span><span class="symbol">cp:</span>//<span class="number">192.168</span>.<span class="number">0.13</span><span class="symbol">:2376</span> run -<span class="built_in">t</span> -d funnel1</span><br></pre></td></tr></table></figure><p>The final command spits out a big bunch of letters and numbers which is the Id of the image. I can use that to get access to the command line output from that image</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -H  <span class="string">tcp:</span><span class="comment">//192.168.0.13:2376 logs fb0d6f23050c9039e65a106bea62a9049d9f79ce6070234472c112fed516634e</span></span><br></pre></td></tr></table></figure><p>Which gets me<img src="http://i.imgur.com/Asbigge.png" alt="Output"></p><p>With that I'm most of the way there. I still need to figure out some networking stuff so NSB can find my database and put our license file in there and check that NSB is actually able to talk to MSMQ and maybe find a better way to get at the logs... okay there is actually a lot still to do but this is the first step.</p>]]></content>
    
    <summary type="html">
    
      Getting started with NServiceBus on windows containers
    
    </summary>
    
      <category term="docker" scheme="http://www.westerndevs.com/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">FSharp.Data.SqlClient Type Provider Having Trouble Bulk Loading</title>
    <link href="http://www.westerndevs.com/fsharp/FSharp.Data.SqlClient%20no%20method/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/fsharp/FSharp.Data.SqlClient no method/</id>
    <published>2016-04-24T22:56:56.000Z</published>
    <updated>2018-04-12T23:57:35.274Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I really hate assembly binding and redirects and the such in .net. Any time I see a fatal error message like</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could <span class="keyword">not</span> load <span class="built_in">file</span> <span class="keyword">or</span> assembly 'FSharp.Core, Version=<span class="number">4.3</span><span class="number">.0</span><span class="number">.0</span>, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' <span class="keyword">or</span> one <span class="keyword">of</span> <span class="keyword">its</span> dependencies. The located assembly's manifest definition <span class="keyword">does</span> <span class="keyword">not</span> match <span class="keyword">the</span> assembly <span class="keyword">reference</span>. (Exception <span class="keyword">from</span> HRESULT: <span class="number">0x80131040</span>)</span><br></pre></td></tr></table></figure><p>I want to quit programming and become a baker. Yeah I would have to get up early but I would rarely encounter</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could <span class="keyword">not</span> leven bread <span class="keyword">using</span> yeast <span class="number">1.0</span><span class="number">.4</span><span class="number">.5</span> <span class="keyword">or</span> <span class="literal">one</span> <span class="keyword">of</span> <span class="keyword">it</span><span class="string">'s dependencies</span></span><br></pre></td></tr></table></figure><p>Anyway while trying to use the bulk loading feature I was having a problem because my F# project was referending FSharp.Core 4.4.0 and the C# project I had consuming the F# api was using 4.3.0. I solved it by installing the correct version of the dll in the C# project</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-<span class="keyword">Package</span> <span class="title">fsharp.core</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Uh oh: Method not found: &#39;Void FSharp.Data.DataTable`1.BulkCopy&#39;
    
    </summary>
    
      <category term="fsharp" scheme="http://www.westerndevs.com/categories/fsharp/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">FSharp.Data.SqlClient Type Provider Not Finding Tables</title>
    <link href="http://www.westerndevs.com/fsharp/FSharp.Data.SqlClient/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/fsharp/FSharp.Data.SqlClient/</id>
    <published>2016-04-23T22:56:56.000Z</published>
    <updated>2018-04-12T23:57:35.274Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This one took me forever to figure out. I'm using the SqlProgrammabilityProvider from FSharp.Data.SqlClient to do some data work. However when I point the connection string at my databse it isn't able to generate any completions after Table</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[&lt;Literal&gt;]</span><br><span class="line">   let connectionString = <span class="string">@"Data Source=localhost\SQL2014;Initial Catalog=Completions;Integrated Security=True;MultipleActiveResultSets=True;Timeout=360"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   type Completions = SqlProgrammabilityProvider&lt;connectionString&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   let TagExists(projectId, tagNumber) =</span></span><br><span class="line"><span class="string">       let b = new Completions.dbo.Tables. //ugh, won't complete</span></span><br></pre></td></tr></table></figure><p>I tried pointing it at different databases on the same server and it worked just fine. I finally remembered that one of the tables in the database made use of spatial types. I experimented by deleting the tables which made use of the coordinates and all of a sudden things started working!</p><p>Obviously deleting the table wasn't a great solution so I pulled in the required packages which I think are</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Install-<span class="keyword">Package</span> <span class="title">microsoft.SqlServer.Types</span></span><br><span class="line">Install-<span class="keyword">Package</span> <span class="title">System.Spatial</span></span><br></pre></td></tr></table></figure><p>I was now able to access the tables as expected.</p>]]></content>
    
    <summary type="html">
    
      If the SqlProgrammabilityProvider isn&#39;t finding table names for you this might be the fix
    
    </summary>
    
      <category term="fsharp" scheme="http://www.westerndevs.com/categories/fsharp/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">What is middleware anyway?</title>
    <link href="http://www.westerndevs.com/Tools/What-is-middleware/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Tools/What-is-middleware/</id>
    <published>2016-03-16T17:56:56.000Z</published>
    <updated>2018-04-12T23:57:35.274Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>If you spend a bit of time around the net ASP.NET Core there is a word you're going to hear thrown around a bunch and that is &quot;middleware&quot;. I find middleware to be a confusing term which doesn't mean anything or perhaps means everything. Let's figure out what middleware means and what sorts of middleware we can slot into ASP.NET Core.</p><a id="more"></a><p>Middleware sits between two pieces of software which talk with one another piece.  It is responsible for connecting the softwares together and may intercede to alter the communication or even intercept it. I know what you're thinking: that's a super vague definition, by that definition almost everything is middleware. Yep. See why I consider the term to be so confusing? The software we use these days is hugely abstracted and there are a lot of layers. Any of these layers in between are middleware.</p><p><img src="http://i.imgur.com/JHGMtei.png" alt="Middleware as a hamburger"></p><p>When I was a kid I had this game, Spellicoptor, which you had to boot right into. As far as I know it ran right on the hardware without that heavy weight Disk Operating System getting in the way. That was probably the last piece of software I used which wasn't middleware - it was certainly the most sneakily educational.</p><p>For a web application we usually think of middleware as the software between the web server and the application responsible for returning HTML. In ASP.NET Core serving out static files such as .css files and images is performed by middleware. The prevents our, comparatively, complicated application pipeline from even running. This would be an example of middleware which intercepts requests and prevents it from even reaching the other layer.  You could also put authentication in the pipeline so that by the time a request hits you application code you can be confident that it is properly authenticated. In ASP.NET Core the middleware is implemented as a pipeline. This means that a request can pass though multiple pieces of middleware before it hits your code. In theory your code should not depend on a piece of middleware being there. However, in practice, we frequently do depend on something being there. Consider the case of authenticating a user: we frequently rely on the user name being set. However this user name could have been set by some authentication middleware or it could have been set by some mock development middleware which passes in a fake user.</p><p>The pipeline in ASP.NET Core is a bi-directional one. This means that each piece of middleware has two opportunities to intervene in the request processing: when the request comes in and when the response goes out. So your middleware can alter the data your application gets or it can alter the data coming from your application.</p><p><img src="http://i.imgur.com/PR96d6W.png" alt="Incoming and outgoing"></p><p>When should you use middleware? I like to think of it as something of a cross cutting concern. If there is something you want to before or after a large number of requests and it isn't part of the core logic of the application then middleware might be the place for you. Pay attention to the &quot;core logic&quot; part of that sentence. If your application has some cross cutting concern but is really part of the logic of the application - say sending notification e-mail when anybody deletes an item (via the DELETE HTTP verb) then this shouldn't be in the middleware. However if you want to log requests then middleware could be a great place.</p><p>Middleware can take the place of what was one written as modules for IIS. Moving this functionality to middleware which knows how to talk OWIN means that your application is less coupled to IIS. It may be difficult to imagine a world where IIS is not the de facto tool for running ASP.NET applications but I suspect there are a great number of sites and applications which don't need the power of a full IIS stack behind them.</p><p>I wrote ASP.NET applications for the better part of a decade and I wrote modules perhaps 3 times in all those years. I just didn't see the advantage to using them. However others such as Dave and James assure me that in the wider world modules were used quite heavily. So this paragraph was going to be about how you'll likely never need to write middleware but at this juncture I honestly don't know where everything will end up. You might be writing middleware for 90% of your code.</p><p>I'm excited to see where the middleware for ASP.NET ends up. There is already some pretty nifty tooling in place providing custom error messages to help people out with very descriptive errors. I'd love to hear about your ideas for middleware in the comments below.</p>]]></content>
    
    <summary type="html">
    
      I find middleware to be a confusing term which doesn&#39;t mean anything or perhaps means everything. Let&#39;s figure out what middleware means
    
    </summary>
    
      <category term="Tools" scheme="http://www.westerndevs.com/categories/Tools/"/>
    
    
      <category term="asp.net" scheme="http://www.westerndevs.com/tags/asp-net/"/>
    
  </entry>
  
</feed>
