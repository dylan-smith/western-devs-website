<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Western Devs</title>
  
  <link href="/feed.xml" rel="self" type="application/atom+xml"/>
  <link href="http://www.westerndevs.com" rel="alternate" type="application/atom+xml"/>
  
  <updated>2018-04-12T23:57:35.282Z</updated>
  <id>http://www.westerndevs.com/</id>
  
  <author>
    <name>Western Devs</name>
	<uri>http://www.westerndevs.com</uri>
    <email>info@westerndevs.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title type="html">Loading Related Entities with Dapper Many-to-One - Part 2</title>
    <link href="http://www.westerndevs.com/Dapper/loading-related-entities-many-to-one-part-2/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Dapper/loading-related-entities-many-to-one-part-2/</id>
    <published>2018-04-10T22:04:42.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This is a part of a series of blog posts on data access with Dapper. To see the full list of posts, visit the <a href="https://www.davepaquette.com/archive/2018/01/21/exploring-dapper-series.aspx" target="_blank" rel="noopener">Dapper Series Index Page</a>.</p><p>In today's post, we look at another option for how to load Many-to-One relationships. In the last post, we used a technique called Multi-Mapping to load related Many-to-One entities. In that post, I had a theory that maybe this approach was not the most efficient method for loading related entities because it duplicated a lot of data.</p><p><img src="https://www.davepaquette.com/images/dapper/flight_to_airport_many_to_one.png" alt="Many-to-One"></p><p>To recap, we would like to load a list of <code>ScheduledFlight</code> entities. A <code>ScheduleFlight</code> has a departure <code>Airport</code> and an arrival <code>Airport</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ScheduledFlight</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FlightNumber &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Airport DepartureAirport &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> DepartureHour &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> DepartureMinute &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Airport ArrivalAirport &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ArrivalHour &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ArrivalMinute &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//Other properties omitted for brevity </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Airport</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Code &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> City &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ProvinceState &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Country &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <h2>Using Multiple Result Sets</h2><p>In the previous post, we loaded the <code>ScheduledFlight</code> entities and all related <code>Airport</code> entities in a single query. In this example we will use 2 separate queries: One for the <code>ScheduledFlight</code> entities, one for the related arrival and departure <code>Airport</code> entities. These 2 queries will all be executed as a single sql command that returns multiple result sets.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.Id, s.FlightNumber, s.DepartureHour, s.DepartureMinute, s.ArrivalHour, s.ArrivalMinute, s.IsSundayFlight, s.IsMondayFlight, s.IsTuesdayFlight, s.IsWednesdayFlight, s.IsThursdayFlight, s.IsFridayFlight, s.IsSaturdayFlight,</span><br><span class="line">s.DepartureAirportId, s.ArrivalAirportId</span><br><span class="line"><span class="keyword">FROM</span> ScheduledFlight s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Airport a1</span><br><span class="line"><span class="keyword">ON</span> s.DepartureAirportId = a1.Id</span><br><span class="line">    <span class="keyword">WHERE</span> a1.Code = @FromCode</span><br><span class="line">    </span><br><span class="line"><span class="keyword">SELECT</span> a1.Id, a1.Code, a1.City, a1.ProvinceState, a1.Country</span><br><span class="line"><span class="keyword">FROM</span> Airport a1</span><br><span class="line"><span class="keyword">WHERE</span> a1.Code = @FromCode</span><br><span class="line"><span class="keyword">UNION</span>    </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> a2.Id, a2.Code, a2.City, a2.ProvinceState, a2.Country</span><br><span class="line"><span class="keyword">FROM</span> ScheduledFlight s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Airport a1</span><br><span class="line"><span class="keyword">ON</span> s.DepartureAirportId = a1.Id</span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Airport a2</span><br><span class="line"><span class="keyword">ON</span> s.ArrivalAirportId = a2.Id</span><br><span class="line">    <span class="keyword">WHERE</span> a1.Code = @FromCode</span><br></pre></td></tr></table></figure>  <p>Using Dapper's <code>QueryMultipleAsync</code> method, we pass in 2 arguments: the query and the parameters for the query.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;ScheduledFlight&gt;&gt; GetAlt(<span class="keyword">string</span> <span class="keyword">from</span>)</span><br><span class="line">&#123;</span><br><span class="line">  IEnumerable&lt;ScheduledFlight&gt; scheduledFlights;</span><br><span class="line">  <span class="keyword">using</span> (<span class="keyword">var</span> connection = <span class="keyword">new</span> SqlConnection(_connectionString))</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">await</span> connection.OpenAsync();</span><br><span class="line">  <span class="keyword">var</span> query = <span class="string">@"</span></span><br><span class="line"><span class="string">SELECT s.Id, s.FlightNumber, s.DepartureHour, s.DepartureMinute, s.ArrivalHour, s.ArrivalMinute, s.IsSundayFlight, s.IsMondayFlight, s.IsTuesdayFlight, s.IsWednesdayFlight, s.IsThursdayFlight, s.IsFridayFlight, s.IsSaturdayFlight,</span></span><br><span class="line"><span class="string">s.DepartureAirportId, s.ArrivalAirportId</span></span><br><span class="line"><span class="string">FROM ScheduledFlight s</span></span><br><span class="line"><span class="string">INNER JOIN Airport a1</span></span><br><span class="line"><span class="string">ON s.DepartureAirportId = a1.Id</span></span><br><span class="line"><span class="string">    WHERE a1.Code = @FromCode</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">SELECT a1.Id, a1.Code, a1.City, a1.ProvinceState, a1.Country</span></span><br><span class="line"><span class="string">FROM Airport a1</span></span><br><span class="line"><span class="string">WHERE a1.Code = @FromCode</span></span><br><span class="line"><span class="string">UNION    </span></span><br><span class="line"><span class="string">SELECT DISTINCT a2.Id, a2.Code, a2.City, a2.ProvinceState, a2.Country</span></span><br><span class="line"><span class="string">FROM ScheduledFlight s</span></span><br><span class="line"><span class="string">INNER JOIN Airport a1</span></span><br><span class="line"><span class="string">ON s.DepartureAirportId = a1.Id</span></span><br><span class="line"><span class="string">    INNER JOIN Airport a2</span></span><br><span class="line"><span class="string">ON s.ArrivalAirportId = a2.Id</span></span><br><span class="line"><span class="string">    WHERE a1.Code = @FromCode"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> multi = <span class="keyword">await</span> connection.QueryMultipleAsync(query, <span class="keyword">new</span>&#123;FromCode = <span class="keyword">from</span>&#125; ))</span><br><span class="line">    &#123;</span><br><span class="line">        scheduledFlights = multi.Read&lt;ScheduledFlight&gt;();</span><br><span class="line">        <span class="keyword">var</span> airports = multi.Read&lt;Airport&gt;().ToDictionary(a =&gt; a.Id);</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> flight <span class="keyword">in</span> scheduledFlights)</span><br><span class="line">        &#123;</span><br><span class="line">            flight.ArrivalAirport = airports[flight.ArrivalAirportId];</span><br><span class="line">            flight.DepartureAirport = airports[flight.DepartureAirportId];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> scheduledFlights;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>The <code>QueryMultipleAsync</code> method returns a <code>GridReader</code>. The <code>GridReader</code> makes it very easy to map mutliple result sets to different objects using the <code>Read&lt;T&gt;</code> method. When you call the <code>Read&lt;T&gt;</code> method, it will read all the results from the next result set that was returned by the query. In our case, we call <code>Read&lt;ScheduledFlight&gt;</code> to read the first result set and map the results into a collection of <code>ScheduledFlight</code> entities. Next, we call <code>Read&lt;Airport&gt;</code> to read the second result set. We then call <code>ToDictionary(a =&gt; a.Id)</code> to populate those <code>Airport</code> entities into a dictionary. This is to make it easier to read the results when setting the <code>ArrivalAirport</code> and <code>DepartureAirport</code> properties for each <code>ScheduledFlight</code>.</p><p>Finally, we iterate through the scheduled flights and set the <code>ArrivalAirport</code> and <code>DepartureAirport</code> properties to the correct <code>Airport</code> entity.</p><p>The big difference between this approach and the previous approach is that we no longer have duplicate instances for <code>Airport</code> entities. For example, if the query returned 100 scheduled flights departing from Calgary (YYC), there would be a single instance of the <code>Airport</code> entity representing YYC, whereas the previous approach would have resulted in 100 separate instances of the <code>Airport</code> entity.</p><p>There is also less raw data returned by the query itself since the columns from the <code>Airport</code> table are not repeated in each row from the <code>ScheduleFlight</code> table.</p><h2>Comparing Performance</h2><p>I had a theory that the multi-mapping approach outlined in the previous blog post would be less efficient than the multiple result set approach outlined in this blog post, at least from a memory usage perspective. However, a theory is just theory until it is tested. I was curious and also wanted to make sure I wasn't misleading anyone so I decided to test things out using <a href="http://benchmarkdotnet.org/" target="_blank" rel="noopener">Benchmark.NET</a>. Using Benchmark.NET, I compared both methods using different sizes of data sets.</p><p>I won't get into the details of Benchmark.NET. If you want to dig into it in more detail, visit the <a href="http://benchmarkdotnet.org/" target="_blank" rel="noopener">official site</a> and read through the docs. For the purposes of this blog post, the following legend should suffice:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Mean      : <span class="type">Arithmetic</span> mean <span class="keyword">of</span> <span class="keyword">all</span> measurements</span><br><span class="line">Error     : <span class="type">Half</span> <span class="keyword">of</span> <span class="number">99.9</span>% confidence interval</span><br><span class="line">StdDev    : <span class="type">Standard</span> deviation <span class="keyword">of</span> <span class="keyword">all</span> measurements</span><br><span class="line">Gen <span class="number">0</span>     : <span class="type">GC</span> Generation <span class="number">0</span> collects per <span class="number">1</span>k Operations</span><br><span class="line">Gen <span class="number">1</span>     : <span class="type">GC</span> Generation <span class="number">1</span> collects per <span class="number">1</span>k Operations</span><br><span class="line">Gen <span class="number">2</span>     : <span class="type">GC</span> Generation <span class="number">2</span> collects per <span class="number">1</span>k Operations</span><br><span class="line">Allocated : <span class="type">Allocated</span> memory per single operation (managed only, inclusive, <span class="number">1</span>KB = <span class="number">1024</span>B)</span><br></pre></td></tr></table></figure><h3>10 ScheduledFlight records</h3><table><thead><tr><th>Method</th><th style="text-align:right">Mean</th><th style="text-align:right">Error</th><th style="text-align:right">StdDev</th><th style="text-align:right">Gen 0</th><th style="text-align:right">Allocated</th></tr></thead><tbody><tr><td>MultiMapping</td><td style="text-align:right">396.9 us</td><td style="text-align:right">7.392 us</td><td style="text-align:right">7.260 us</td><td style="text-align:right">5.8594</td><td style="text-align:right">6.77 KB</td></tr><tr><td>MultipleResultSets</td><td style="text-align:right">467.6 us</td><td style="text-align:right">9.194 us</td><td style="text-align:right">16.811 us</td><td style="text-align:right">4.8828</td><td style="text-align:right">6.69 KB</td></tr></tbody></table><p>As I suspected, the difference is minimal when dealing with small result sets. The results here are in microseconds so in both cases, executing the query and mapping the results takes less 1/2 a millisecond. The mutliple result sets approach takes a little longer, which I kind of expected because of the overhead of creating a dictionary and doing lookups into that dictionary when setting the <code>ArrivalAirport</code> and <code>DepartureAirport</code> properties. The difference is minimal and in a most real world scenarios, this won't be noticable. What is interesting is that even with this small amount of data, we can see that there is ~1 more Gen 0 garbage collection happening per 1,000 operations. I suspect we will see this creep up as the amount of data increases.</p><h3>100 ScheduledFlight records</h3><table><thead><tr><th>Method</th><th style="text-align:right">Mean</th><th style="text-align:right">Error</th><th style="text-align:right">StdDev</th><th style="text-align:right">Gen 0</th><th style="text-align:right">Gen 1</th><th style="text-align:right">Allocated</th></tr></thead><tbody><tr><td>MultiMapping</td><td style="text-align:right">1.013 ms</td><td style="text-align:right">0.0200 ms</td><td style="text-align:right">0.0287 ms</td><td style="text-align:right">25.3906</td><td style="text-align:right">5.8594</td><td style="text-align:right">6.77 KB</td></tr><tr><td>MultipleResultSets</td><td style="text-align:right">1.114 ms</td><td style="text-align:right">0.0220 ms</td><td style="text-align:right">0.0225 ms</td><td style="text-align:right">15.6250</td><td style="text-align:right">-</td><td style="text-align:right">6.69 KB</td></tr></tbody></table><p>Okay, this surprised me a little. I expected to see a bigger different between the two but they are still, essentially the same in terms of time. The multi-mapping approach is still slightly faster. Keep in mind that both are still just a little over 1ms to query and map 100 records. That's crazy fast!</p><h3>1000 ScheduledFlight records</h3><table><thead><tr><th>Method</th><th style="text-align:right">Mean</th><th style="text-align:right">Error</th><th style="text-align:right">StdDev</th><th style="text-align:right">Gen 0</th><th style="text-align:right">Gen 1</th><th style="text-align:right">Allocated</th></tr></thead><tbody><tr><td>MultiMapping</td><td style="text-align:right">5.137 ms</td><td style="text-align:right">0.1006 ms</td><td style="text-align:right">0.1443 ms</td><td style="text-align:right">148.4375</td><td style="text-align:right">70.3125</td><td style="text-align:right">6.77 KB</td></tr><tr><td>MultipleResultSets</td><td style="text-align:right">3.459 ms</td><td style="text-align:right">0.0408 ms</td><td style="text-align:right">0.0341 ms</td><td style="text-align:right">113.2813</td><td style="text-align:right">27.3438</td><td style="text-align:right">6.69 KB</td></tr></tbody></table><p>Here we go. Now the multiple result sets approach finally wins out, and you can see why. There are way more Gen 0 and Gen 1 garbage collections happening per 1,000 operations when using the multi-mapping approach.</p><h3>10,000 ScheduledFlight records</h3><table><thead><tr><th>Method</th><th style="text-align:right">Mean</th><th style="text-align:right">Error</th><th style="text-align:right">StdDev</th><th style="text-align:right">Gen 0</th><th style="text-align:right">Gen 1</th><th style="text-align:right">Gen 2</th><th style="text-align:right">Allocated</th></tr></thead><tbody><tr><td>MultiMapping</td><td style="text-align:right">58.51 ms</td><td style="text-align:right">1.1483 ms</td><td style="text-align:right">1.276 ms</td><td style="text-align:right">1687.5000</td><td style="text-align:right">687.5000</td><td style="text-align:right">187.5000</td><td style="text-align:right">6.78 KB</td></tr><tr><td>MultipleResultSets</td><td style="text-align:right">38.23 ms</td><td style="text-align:right">0.8821 ms</td><td style="text-align:right">1.918 ms</td><td style="text-align:right">812.5000</td><td style="text-align:right">312.5000</td><td style="text-align:right">125.0000</td><td style="text-align:right">6.69 KB</td></tr></tbody></table><p>One last test with 10,000 records shows a more substantial difference. The multiple result sets approach is a full 20ms faster!</p><h2>Wrapping it up</h2><p>I think that in most realistic scenarios, there is no discernable difference between the 2 approaches to loading many-to-one related entities. If you loading larger amounts of records into memory in a single query, then the multiple result sets approach will likely give you better performance. If you are dealing with &lt; 100 records per query, then you likely won't notice a difference. Keep in mind also that your results will vary depending on the specific data you are loading.</p>]]></content>
    
    <summary type="html">
    
      This is a part of a series of blog posts on data access with Dapper. In today&#39;s post, we look at a second option for loading Many-to-One related entities.
    
    </summary>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/categories/Dapper/"/>
    
    
      <category term=".NET Core" scheme="http://www.westerndevs.com/tags/NET-Core/"/>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/tags/Dapper/"/>
    
      <category term=".NET" scheme="http://www.westerndevs.com/tags/NET/"/>
    
      <category term="Micro ORM" scheme="http://www.westerndevs.com/tags/Micro-ORM/"/>
    
  </entry>
  
  <entry>
    <title type="html">Environment Agnostic Packaging - Just Do It</title>
    <link href="http://www.westerndevs.com/Development/Environment-independent-packaging/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Development/Environment-independent-packaging/</id>
    <published>2018-03-28T23:38:30.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I've been noticing a bit of a trend lately around how some tools suggest you package your builds: they build differently for each environment. This is super-inconvenient if you're trying to progress a package through multiple environments. Just don't package configuration in with your build packages.</p><a id="more"></a><p>Okay, let's break this down: when we build software as part of a release process on a CI server we end up with a package at the end. In modern devops, or what I would have called 'release engineering' back in the day, we then take this package and run it through the rest of the pipeline. The rest of the pipeline may consist of deploying to a test server, running integration tests, running UI tests, and promoting to higher environments. You can think the pipeline extending all the way out to the end user. The rule of thumb is that it is cheaper to catch errors and problems earlier in the build pipeline than later. That makes a lot of sense: a unit test catching a problem has an impact only on that developer while a user discovering a problem involves all sorts of layers of technical support and issue tracking, not to mention the cost of redeploying.</p><style>@keyframes slidein {  from {    left: 0%;  }  to {    left: 620px;  }}.block{width: 50px; height: 50px;   background-color: #39d;   animation-duration: 12s;  animation-name: slidein;  animation-iteration-count: infinite;  animation-timing-function: linear;  display: inline-block;  position: absolute;}</style><div style="width: 100%; border-bottom: 3px black solid; height: 50px"><div style="animation-delay: 0s;" class="block"></div><div style="animation-delay: -8s;" class="block"></div><div style="animation-delay: -4s;" class="block"></div></div><p>One of the key features of the build pipeline is that the package which is released to production is the same package which has gone through the pipeline. If the package is different then what is the point of all the testing done in the pipeline?</p><p>That questions was rhetorical but let me answer it anyway: There is no point, it is a waste and it wrecks the quality of your software. This is why I'm so surprised to see a number of really popular software packages which suggest compiling environment information into the package. This means that it no longer possible to deploy the package to testing environments or to environments not envisioned at build time.</p><p>The two packages I've encountered recently which commit this sin are Angular 2/4/5 and the Serverless framework. Angular's build packages everything up using the <a href="https://blog.angulartraining.com/how-to-manage-different-environments-with-angular-cli-883c26e99d15" target="_blank" rel="noopener">environment</a> selected at build time and Serverless uses <a href="https://serverless.com/framework/docs/providers/aws/guide/variables/" target="_blank" rel="noopener">stages</a> which are basically the same thing.</p><p>Now some people will claim that just rebuilding the same source code for each environment isn't a big deal: it will result it the same executable. Except that there are tons of times when it won't. <code>#ifdefs</code> can exercise different code paths, optimization levels on the compiler can produce different output, any one of a hundred other things could be different. The only way to be sure the package progressing through environments is correct is to ensure that it is, indeed, the same package.</p><p>If you're a developer choosing frameworks I implore you to consider the full lifecycle of your package as it travels down the pipeline. Just pick a framework which supports sane devops practices. Just do it.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I&#39;ve been noticing a bit of a trend lately around how some tools suggest you package your builds: they build differently for each environment. This is super-inconvenient if you&#39;re trying to progress a package through multiple environments. Just don&#39;t package configuration in with your build packages.&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://www.westerndevs.com/categories/Development/"/>
    
    
      <category term="devops" scheme="http://www.westerndevs.com/tags/devops/"/>
    
      <category term="builds" scheme="http://www.westerndevs.com/tags/builds/"/>
    
  </entry>
  
  <entry>
    <title type="html">F12 Chooser is a Dev Tool Thing</title>
    <link href="http://www.westerndevs.com/Development/f12-chooser-is-dev-tool-thing/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Development/f12-chooser-is-dev-tool-thing/</id>
    <published>2018-03-28T17:10:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>The F12 Chooser is a development tool thing that I like and you should know about if you want your web application or web extension to support Microsoft Edge.</p><a id="more"></a><p><img src="https://i.imgur.com/wt4L09z.png" alt="1"></p><p>The <a href="https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide" target="_blank" rel="noopener">F12 Developer Tools</a> are pretty great. They are the original in-browser developer tools (included in Internet Explorer 7), and have evolved into something more modern for all us &quot;modern&quot; developers.</p><p>With all in-browser developer tools, I've found that every once and I come across an application I'm trying to debug that is so unstable that F12 can't seem to attache properly. Whether that's because of the application locking up the browser or whatever, without being able to attach a debugger I can't really get into the code and start sorting out the issue.</p><p>That's where the F12 Chooser comes into play.</p><h2>What is F12 Chooser?</h2><p>F12 Chooser is a utility built into Windows that allows you choose the target application for the F12 Developer Tools without having to open Microsoft Edge itself.</p><h2>How do I run it?</h2><p>On Windows 10, you run <code>\\Windows\System32\F12\F12Chooser.exe</code>. The window that comes up will display a list of targets for which you can attach the F12 tools. You can find the 64-bit version in <code>C:\Windows\SysWOW64\F12\F12Chooser.exe</code>.</p><p><img src="https://i.imgur.com/ch1TjEr.gif" alt="2"></p><h2>Why does this matter?</h2><p>Because it gives you another option when it seems like the F12 tools are failing. If your browser locks up when you try and debug your application code, you should try the F12 Chooser once the application has loaded in the browser.</p><p>It also allows you to target applications that aren't necessarily web applications that you view in a browser. For example, maybe you're looking to debug an <a href="https://docs.microsoft.com/en-us/office/dev/add-ins/testing/debug-add-ins-using-f12-developer-tools-on-windows-10" target="_blank" rel="noopener">Office Add-In</a>.</p><h2>Conclusion</h2><p>In conclusion, you have the F12 Chooser as another way to load up and attach the F12 developer tools in Windows 10 to help you with debugging web applications, web extensions, and even other things like Office Add-Ins.</p><p>And now you know it exists. You're welcome.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The F12 Chooser is a development tool thing that I like and you should know about if you want your web application or web extension to support Microsoft Edge.&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://www.westerndevs.com/categories/Development/"/>
    
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="http://www.westerndevs.com/tags/TypeScript/"/>
    
      <category term="Web Extensions" scheme="http://www.westerndevs.com/tags/Web-Extensions/"/>
    
      <category term="Office Add-In" scheme="http://www.westerndevs.com/tags/Office-Add-In/"/>
    
  </entry>
  
  <entry>
    <title type="html">Picking between TypeScript and JavaScript</title>
    <link href="http://www.westerndevs.com/Development/typescript-or-javascript/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Development/typescript-or-javascript/</id>
    <published>2018-03-15T15:40:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Which one should you pick: TypeScript or JavaScript? They are both great languages, people always ask me when you should use one or the other. This post puts that to rest.</p><a id="more"></a><p>Whether it's a work project or a personal one, the question &quot;TypeScript or JavaScript&quot; always seems to come up in my mind. Utlimately, they provide a very similiar function considering that TypeScript is a superset of JavaScript, and compiles down to JavaScript itself.</p><p>I'm not the only person that has this question either. Over the past year, I've asked a number of JavaScript/TypeScript developers about how they pick between the two and I wanted to sum up my thoughts here after being influenced by my private panel of experts.</p><h2>It Depends on the Project</h2><p>Of course it does.</p><p>There is never one answer for everything, and this is no different. That being said, there are a few criteria or &quot;flags&quot; that help me select when I want to use one over the other.</p><h3>JavaScript Knowledge is Assumed</h3><p>Before we get into it, let me clarify that I'm assuming that the developer(s) working on the project already know JavaScript. They don't need to be experts, but they are familiar with writing vanilla JavaScript for applications, whether that be client or server side code.</p><p>That being said, I'm also assuming that a TypeScript-focued developer can get their way around JavaScript code.</p><h2>When to TypeScript</h2><p><img src="https://i.imgur.com/IAPRGfv.png" alt=""></p><p>I fall to TypeScript when I am writing more than one or two code files or if I'm writing code that I expect someone else to have to run. Although I use TypeScript, the it's not necessarily the language itself that I want, but the TypeScript compiler as it helps the other developers running my code, and removes the ambiguity of types between functions or classes that need to work togther.</p><p>It does a lot of stuff for me:</p><ul><li>Catches errors, especially typing ones, at compile time rather than run time</li><li>Sets standards around what JS-like conventions I want to use</li><li>Better legacy browser support</li><li>Supports multiple module practices</li></ul><p>Ultimately, that compiler is powerful and I put a lot of trust into it considering I expect that the compiled code to be optimal.</p><h3>But doesn't the compiler work on JavaScript too?</h3><p>Yes. Yes it does.</p><p>The catch is that the compiler is not as thurough as it is with TypeScript. When you add the <code>//@ts-check</code> <a href="https://code.visualstudio.com/docs/languages/javascript#_type-checking-and-quick-fixes-for-javascript-files" target="_blank" rel="noopener">reference</a> at the top of your JavaScript file in Visual Studio Code, that really helps with the development story of any JavaScript code, but it's still not as deep as using TypeScript itself.</p><p>Using TypeScript with the TypeScript compiler gives you that little bit of extra help in development, and that is really where the value comes in for me.</p><h2>When to JavaScript</h2><p><img src="https://i.imgur.com/yCn8NUQ.png" alt=""></p><p>I tend to use JavaScript when I'm only writing a little bit of code and don't want to deal with the overhead of setting up the compiler for the project. For examples, when I'm writing a little Node script, or experimenting with REST API and want a simple GUI, I'll quickly put together some vanilla JS code and get something working quickly.</p><p>That being said, I write the majority of my JavaScript in <a href="https://code.visualstudio.com" target="_blank" rel="noopener">Visual Studio Code</a> which provides a lot of JavaScript tooling support using the TypeScript compiler underneath the hood.</p><h2>Conclusion</h2><p>In conclusion, when I have to pick between JavaScript or TypeScript I lean towards TypeScript. It provides the better development story between the two, and that's a really important factor when I'm writing and sharing code.</p><p>When I'm lazy and don't want to setup a TypeScript project, I fall back on JavaScript but still rely on the built-in TypeScript tooling in Visual Studio Code.</p><p>TypeScript provides the tooling and needed bit of abstraction from the implementation with its compiler. Even though JavaScript has come a long way with <a href="https://github.com/tc39/ecma262" target="_blank" rel="noopener">ECMA-262</a> getting plenty of updates, there is still the challenge of browser vendors supporting the spec and so on. In the end, the overhead of setting up your project to using the TypeScript compiler outweighs the complexity that large JavaScript projects bring to the table.</p><p>Even when JavaScript is &quot;feature complete&quot;, I'm guessing that TypeScript will still provide a stronger developer story for larger software projects, while JavaScript will continue to provide the foundation for the web platform, and TypeScript itself.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Which one should you pick: TypeScript or JavaScript? They are both great languages, people always ask me when you should use one or the other. This post puts that to rest.&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://www.westerndevs.com/categories/Development/"/>
    
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="http://www.westerndevs.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title type="html">Pi Day 2018</title>
    <link href="http://www.westerndevs.com/Development/PiDay/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Development/PiDay/</id>
    <published>2018-03-14T13:00:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Donald Belcham</name>
	  <email>donald.belcham@igloocoder.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><img src="https://www.igloocoder.com/images/RPi-Logo.png" alt=""></p><p>I have a bunch of <a href="https://www.raspberrypi.org" target="_blank" rel="noopener">RaspberryPi devices</a> kicking around the house and office. There are some Pi 2s, Pi 3s, and a Pi Zero. I use them for a lot of different things. I just setup a Pi 3 to act as a scanning server for the <a href="http://www.fujitsu.com/uk/products/computing/peripheral/scanners/scansnap/ix500/" target="_blank" rel="noopener">Fujitsu iX500 ScanSnap</a> that we use to keep a paperless home. There's a Pi 2 running <a href="http://networkupstools.org/" target="_blank" rel="noopener">NUT</a>, some cron scripts, and some other admin stuff for my home network. We got a Pi Zero from an <a href="https://www.adafruit.com/adabox/" target="_blank" rel="noopener">Ada Box</a> that we setup to run <a href="https://retropie.org.uk/" target="_blank" rel="noopener">RetroPie</a>. While interesting, it's not overly complicated stuff. Places like <a href="https://www.youtube.com/watch?v=78H-4KqVvrg" target="_blank" rel="noopener">Los Alamos National Labratory use Raspberry Pis for prototyping their large systems</a>.</p><a id="more"></a><p>The versatility of the Raspberry Pi is undeniable. When my colleagues at Particular Software started working on a .NET Core version of NServiceBus I had to know; would NServiceBus run on the Pi? An hour of .NET Core research plus the <a href="https://docs.particular.net/samples/learning-transport/" target="_blank" rel="noopener">Learning Transport sample</a> and I had this</p><blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Step 2 complete: <a href="https://twitter.com/hashtag/NServiceBus?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#NServiceBus</a> running the Learning Transport in Docker on a RaspberryPi3. <a href="https://t.co/OixMIjWbCB" target="_blank" rel="noopener">pic.twitter.com/OixMIjWbCB</a></p>&mdash; Donald Belcham (@dbelcham) <a href="https://twitter.com/dbelcham/status/903418955989217280?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 1, 2017</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>The only trick with it was that I had to <code>dotnet publish</code> using the <code>-r linux-arm</code> parameter.</p><p>This doesn't seem like much, but it can open up a lot of options for a team developing distributed apps. One of the biggest challenges for those teams is having a non-production environment that mimics the topology of the ultimate solution.. In my experience teams struggle with getting the infrastructure required to properly test. Servers are allocated by a different team. Once setup, the topology is fixed which makes it difficult for the team to experiment and/or adjust their architecture.</p><p>Now, what could you do with 8 Raspberry Pis if you were building a distributed system? Well you could have one running a database server (SQL Server, MySQL, and Postgres will all run on ARM hardware), one Pi could run your messaging system (RabbitMQ for example), and the rest could represent nodes for your distributed code. Great, but that's no different than using 8 VMs you say?</p><p>Unplug one of the distributed nodes. Just unplug it. Don't shut it down gracefully. With a Pi that's easy, you just reach for the plug and pull. With a VM it's a fair bit harder, and if you can the infrastructure folks will blow a gasket that you just did that to their precious, stable systems. This is really important in a distributed system though. How does your system handle uncontrolled shutdowns? How do you plan your recovery in that scenario? What if you just pull the network cable but leave the power on? How does recovery differ? What do your reporting tools tell you when this happens, and what do they tell you right after the problem is fixed?</p><p>There are a lot more moving parts in a distributed system which lead to a lot more disaster prevention and recovery needs. A collection of Raspberry Pis running as a testing or development environment gives you a great platform to simulate many of these situations. They don't allow you to do all your testing though. I'd never pretend that a setup of Pis would be adequate, or appropriate, for load testing a system.</p><p>Raspberry Pi is a great platform for prototyping (and more). Don't relegate it to just prototyping things you'd like to play with at home. They can be a huge tool for distributed system development too. Heck, if Los Alamos is using them, why can't you?</p><p>Happy Pi Day!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.igloocoder.com/images/RPi-Logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;I have a bunch of &lt;a href=&quot;https://www.raspberrypi.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RaspberryPi devices&lt;/a&gt; kicking around the house and office. There are some Pi 2s, Pi 3s, and a Pi Zero. I use them for a lot of different things. I just setup a Pi 3 to act as a scanning server for the &lt;a href=&quot;http://www.fujitsu.com/uk/products/computing/peripheral/scanners/scansnap/ix500/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fujitsu iX500 ScanSnap&lt;/a&gt; that we use to keep a paperless home. There&#39;s a Pi 2 running &lt;a href=&quot;http://networkupstools.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NUT&lt;/a&gt;, some cron scripts, and some other admin stuff for my home network. We got a Pi Zero from an &lt;a href=&quot;https://www.adafruit.com/adabox/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ada Box&lt;/a&gt; that we setup to run &lt;a href=&quot;https://retropie.org.uk/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RetroPie&lt;/a&gt;. While interesting, it&#39;s not overly complicated stuff. Places like &lt;a href=&quot;https://www.youtube.com/watch?v=78H-4KqVvrg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Los Alamos National Labratory use Raspberry Pis for prototyping their large systems&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://www.westerndevs.com/categories/Development/"/>
    
    
      <category term="RPi" scheme="http://www.westerndevs.com/tags/RPi/"/>
    
  </entry>
  
  <entry>
    <title type="html">Crowdsourcing Documentation is Cool</title>
    <link href="http://www.westerndevs.com/Development/crowdsourcing-docs-is-cool/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Development/crowdsourcing-docs-is-cool/</id>
    <published>2018-03-13T13:40:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>The idea of these large enterprises crowdsourcing their technical documentation is pretty cool. More cool than I had originally realized, and I want to take a moment to explain why I like it and why you should get involved yourself.</p><a id="more"></a><p>I updated the Microsoft Edge documentation on web extensions. As of this writing, you can see it <a href="https://docs.microsoft.com/en-us/microsoft-edge/extensions/extensions-for-enterprise" target="_blank" rel="noopener">here</a>, but just in case you can't I've included an image.</p><p><img src="https://i.imgur.com/5ptKftE.png" alt=""></p><p>The idea of these large enterprises crowdsourcing their technical documentation is pretty cool. More cool than I had originally realized and, for that reason, I want to take a moment to explain why I like it and why you should get involved yourself.</p><h2>What do you mean by &quot;Crowdsourcing&quot;?</h2><p>When it comes to web platforms, many of the platform owners (<a href="https://github.com/awsdocs" target="_blank" rel="noopener">Amazon</a>, <a href="https://github.com/MicrosoftDocs" target="_blank" rel="noopener">Microsoft</a>, <a href="https://github.com/mdn" target="_blank" rel="noopener">Mozilla</a>) have started crowdsourcing their technical documentation. When I say <em>crowdsourcing</em> I mean that the organization opens up the conversation about what the documentation should say to the community at large.</p><p>The community, being the consumers of the product (and the documentation) can have input into adding, editing, or removing sections of official product or platform documentation. Assuming the vendor agrees with the changes being suggested, then the change is accepted and the official documentation is updated.</p><p>This whole process if facilitated generally by GitHub, where documentation is published as source code and pull requests act as the avenue submitting changes. This way, the conversation about the changes is tracked, shared, and kept in the open for people to review and understand.</p><p>Plus, using things like contributors guides and automated build tools can be integrated with GitHub to validate the change, to make sure that the change to the documentation doesn't break anything and follows any rules the vendor has in place.</p><h2>Where is the coolness?</h2><p>There are a couple of cool points I'd like to highlight.</p><h3>Consumers are More Qualified than Vendors</h3><p>The developers of the platform itself are somewhat qualified considering they know the inner workings of the product, but they aren't the ones using it. The people using the product don't need to know how the guts work, they need to how to use it.</p><p>There is nobody more qualified to update product documentation than the consumers of the documentation and technology. The people that are neck deep and actually <em>using</em> in tech to make things happen. Those are the people that are best suited to critique and ultimately improve the documentation.</p><h3>Transparent Conversations</h3><p>When you crowdsource your documentation, you need to make it open and accessible, which tends to make conversation around the documentation transparent. In our case, GitHub provides the facilty to make this happen with public repositories filled with documentation and through the issue and pull request interface.</p><p>People can submit pull requests and issues and have a conversation with the vendor about their documentation and ultimately their product.</p><p>Something that starts out like a minor update, could result in an entire section. In my case, I was confident that I'd be adding new pages of content, but once I got into the thick of it, I realized all the parts were already present in the docs. I just needed to add some context and minor updates to what was already there.</p><h2>Conclusion</h2><p>In conclusion, anyone reviewing the documentation for a tool or technology should check to see if:</p><ol><li>It's open to improvement through crowdsourcing</li><li>They can think they can make it better.</li></ol><p>It's a great way to get involved in your technology community, all while improving the developer experience for the next person that comes along.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The idea of these large enterprises crowdsourcing their technical documentation is pretty cool. More cool than I had originally realized, and I want to take a moment to explain why I like it and why you should get involved yourself.&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://www.westerndevs.com/categories/Development/"/>
    
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/tags/JavaScript/"/>
    
      <category term="Documentation" scheme="http://www.westerndevs.com/tags/Documentation/"/>
    
  </entry>
  
  <entry>
    <title type="html">Angular Testing Patterns - Leverage Observable</title>
    <link href="http://www.westerndevs.com/Development/angular-testing-2/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Development/angular-testing-2/</id>
    <published>2018-02-21T19:38:30.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>One of the most challenging parts of testing is finding seams to reduce the scope of tests. Doing so is important because it make your tests smaller and cleaner which makes them more resilient to changes in the rest of your code base. Testing isn't helping you if every minor change breaks dozens of interconnected tests. Angular's heavy use of Observable provides us a great seam.</p><a id="more"></a><p>This post is part two of a series on angular testing. You can check out the other posts here:</p><ol><li><a href="/Development/angular-testing-1/">Keep the number of test bed tests to a minimum</a>.</li><li>Leverage <code>Observable</code> as a testing seam (this post)</li><li>Leverage monkey patching as a testing seam</li><li>No matter what anybody says e2e tests still need sleeps</li></ol><p>Reactive programming is a really nice paradigm which extend the Promise or Task patterns that have become quite popular over the last decade. Instead of returning a single value upon completion as Promises do an observable allows subscriptions which are handlers executed every time a value is returned from the observable.</p><p>I have seen a lot of people who ignore the complexity of observables by simply converting to a promise using <code>toPromise</code> but this ignores some of the really cool things you can do with promises. For instances if I have a component that requires talking to multiple HTTP endpoints I'll <a href="http://reactivex.io/documentation/operators/zip.html" target="_blank" rel="noopener">zip</a> the responses together so that the rendering doesn't happen until all the requests are complete. There are a ton of other cool patters you can use if you stick with observables.</p><p>Anyway, I'm not currently here to sell you on RxJS (it <em>is</em> awesome) but tell you how you can use observables to act as a good seam to limit the scope of your tests.</p><p>Let's look at a snippet of a component that makes use of observables and see how to shim in tests.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> vendorService: VendorService, </span></span><br><span class="line"><span class="params">            <span class="keyword">private</span> deviceViewService: DeviceViewService, </span></span><br><span class="line"><span class="params">            <span class="keyword">private</span> originsService: OriginsService</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.vendorService.get().subscribe(<span class="function">(<span class="params">v: Vendor[]</span>) =&gt;</span> <span class="keyword">this</span>.vendors = v);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.deviceViewService.getDevices().subscribe(<span class="function"><span class="params">devices</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.devices = devices;</span><br><span class="line">      activateDevices();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> originsObservable = <span class="keyword">this</span>.originsService.getOrigins();</span><br><span class="line">    <span class="keyword">let</span> destinationsObservable = <span class="keyword">this</span>.originsService.getDestinations();</span><br><span class="line">    Observable.zip(originsObservable, destinationsObservable, <span class="function">(<span class="params">origins: Origin[], destinations: Destination[]</span>)=&gt;</span>[origins,destinations])</span><br><span class="line">        .subscribe(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.setupOriginsAndDestinations(result);</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Here we have 4 observables which complete in various ways. The first, <code>vendorService.get()</code>, simply assigns vendors to an existing variable. The devices observable does the same but also calls a function and, finally, the last two observables are synchronized via a zip operator. It looks like a lot is going on here but we can isolate things to test easily.</p><p>First up we want to test to make sure that whatever is returned by the vendor service is properly assigned to the vendors collection. We can us a combination of mocks and observables to focus just on the vendor service like so(I'm using <a href="https://github.com/NagRock/ts-mockito" target="_blank" rel="noopener">ts-mockito</a>'s mocking syntax here):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Demo Component'</span>, () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    it(<span class="string">'should set vendors'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        <span class="keyword">let</span> mockVendorService = mock(VendorService);</span><br><span class="line">        <span class="keyword">let</span> vendors = [&#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Vendor ABC'</span>&#125;];</span><br><span class="line">        when(mockVendorService.get()).thenReturn(Observable.from([vendors]));</span><br><span class="line">        <span class="keyword">let</span> mockDeviceViewService = mock(DeviceViewService);</span><br><span class="line">        when(mockDeviceViewService.getDevices()).thenReturn(Observable.from([]));</span><br><span class="line">        <span class="keyword">let</span> mockOriginsService = mock(OriginsService);</span><br><span class="line">        when(mockOriginsService.getOrigins()).thenReturn(Observable.from([]));</span><br><span class="line">        when(mockOriginsService.getDestinations()).thenReturn(Observable.from([]));</span><br><span class="line">        <span class="keyword">let</span> sut = <span class="keyword">new</span> DemoComponent(instance(mockVendorService), instance(mockDeviceService), instance(mockOriginsService));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        sut.ngOnInit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//assert</span></span><br><span class="line">        expect(sut.vendors).to.equal(vendors);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>As you can see we set up the mocks to return either an <code>Observable</code> with a single result to test the code or with an empty result to never trigger the subscriptions to that observable. So even though the ngOnInit is quite complex the testing doesn't have to be.</p><p>Let's look at one more example for the zip case</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'origins and destinations being complete should trigger setup'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">//arrange</span></span><br><span class="line">        <span class="keyword">let</span> mockVendorService = mock(VendorService);</span><br><span class="line">        when(mockVendorService.get()).thenReturn(Observable.from([]));</span><br><span class="line">        <span class="keyword">let</span> mockDeviceViewService = mock(DeviceViewService);</span><br><span class="line">        when(mockDeviceViewService.getDevices()).thenReturn(Observable.from([]));</span><br><span class="line">        <span class="keyword">let</span> mockOriginsService = mock(OriginsService);</span><br><span class="line">        <span class="keyword">let</span> origins = [&#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Origin ABC'</span>&#125;];</span><br><span class="line">        when(mockOriginsService.getOrigins()).thenReturn(Observable.from([origins]));</span><br><span class="line">        <span class="keyword">let</span> destinations = [&#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Destination ABC'</span>&#125;];</span><br><span class="line">        when(mockOriginsService.getDestinations()).thenReturn(Observable.from([destinations]));</span><br><span class="line">        <span class="keyword">let</span> sut = <span class="keyword">new</span> DemoComponent(instance(mockVendorService), instance(mockDeviceService), instance(mockOriginsService));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> didWork = <span class="literal">false</span>;</span><br><span class="line">        sut.setupOriginsAndDestinations = <span class="function">(<span class="params">passedOrigins, passedDestinations</span>) =&gt;</span> &#123;</span><br><span class="line">            didWork = passedOrigins === origins &amp;&amp; passedDestinations === destinations;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//act</span></span><br><span class="line">        sut.ngOnInit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//assert</span></span><br><span class="line">        expect(didWork).to.be.true;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>You might also have equivalent tests to ensure that just completing one or the other of <code>getOrigins</code> and <code>getDestinations</code> doesn't cause the setup to be fired.</p><p>The crux of this post is that observables provide for a nice place to hook into tests because you can use them to isolate large chunks of subscription code or exercise that code with arbitrary values. The more seams you have the easier testing becomes.</p><p>I already gave away a bit of the third post in this series when I overrode the setup method in the last example: this is called monkey patching and it is slick beans for isolating code to test.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One of the most challenging parts of testing is finding seams to reduce the scope of tests. Doing so is important because it make your tests smaller and cleaner which makes them more resilient to changes in the rest of your code base. Testing isn&#39;t helping you if every minor change breaks dozens of interconnected tests. Angular&#39;s heavy use of Observable provides us a great seam.&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://www.westerndevs.com/categories/Development/"/>
    
    
      <category term="Testing" scheme="http://www.westerndevs.com/tags/Testing/"/>
    
      <category term="Angular" scheme="http://www.westerndevs.com/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title type="html">Loading Related Entities: Many-to-One</title>
    <link href="http://www.westerndevs.com/Dapper/loading-related-entities-many-to-one/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Dapper/loading-related-entities-many-to-one/</id>
    <published>2018-02-07T05:00:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This is a part of a series of blog posts on data access with Dapper. To see the full list of posts, visit the <a href="https://www.davepaquette.com/archive/2018/01/21/exploring-dapper-series.aspx" target="_blank" rel="noopener">Dapper Series Index Page</a>.</p><p>In today's post, we will start our journey into more complex query scenarios by exploring how to load related entities. There are a few different scenarios to cover here. In this post we will be covering the Many-to-One scenario.</p><p><img src="https://www.davepaquette.com/images/dapper/flight_to_airport_many_to_one.png" alt="Many-to-One"></p><p>Continuing with our sample domain for the ever expanding <em>Air Paquette</em> airline, we will now look at loading a list of <code>ScheduledFlight</code> entities. A <code>ScheduleFlight</code> has a departure <code>Airport</code> and an arrival <code>Airport</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ScheduledFlight</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FlightNumber &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Airport DepartureAirport &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> DepartureHour &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> DepartureMinute &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Airport ArrivalAirport &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ArrivalHour &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ArrivalMinute &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//Other properties omitted for brevity </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Airport</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Code &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> City &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ProvinceState &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Country &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p><em>Side Note:</em> Let's ignore my poor representation of the arrival and departure times of the scheduled flights. In a future most we might look using Noda Time to properly represent these values.</p><h2>Loading everything in a single query</h2><p>Using Dapper, we can easily load a list of <code>ScheduledFlight</code> using a single query. First, we need to craft a query that returns all the columns for a <code>ScheduledFlight</code>, the departure <code>Airport</code> and the arrival <code>Airport</code> in a single row.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.Id, s.FlightNumber, s.DepartureHour, s.DepartureMinute, s.ArrivalHour, s.ArrivalMinute, s.IsSundayFlight, s.IsMondayFlight, s.IsTuesdayFlight, s.IsWednesdayFlight, s.IsThursdayFlight, s.IsFridayFlight, s.IsSaturdayFlight,</span><br><span class="line">       a1.Id, a1.Code, a1.City, a1.ProvinceState, a1.Country,</span><br><span class="line">   a2.Id, a2.Code, a2.City, a2.ProvinceState, a2.Country</span><br><span class="line"><span class="keyword">FROM</span> ScheduledFlight s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Airport a1</span><br><span class="line"><span class="keyword">ON</span> s.DepartureAirportId = a1.Id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Airport a2</span><br><span class="line"><span class="keyword">ON</span> s.ArrivalAirportId = a2.Id</span><br></pre></td></tr></table></figure><p>We use the <code>QueryAsync</code> method to load a list of <code>ScheduledFlight</code> entities along with their related <code>DepartureAirport</code> and <code>ArrivalAirport</code> entities. The parameters we pass in are a little different from what we saw in our previous posts.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;ScheduledFlight&gt;&gt; Get(<span class="keyword">string</span> <span class="keyword">from</span>)</span><br><span class="line">&#123;</span><br><span class="line">    IEnumerable&lt;ScheduledFlight&gt; scheduledFlights;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> connection = <span class="keyword">new</span> SqlConnection(_connectionString))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> connection.OpenAsync();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> query = <span class="string">@"</span></span><br><span class="line"><span class="string">SELECT s.Id, s.FlightNumber, s.DepartureHour, s.DepartureMinute, s.ArrivalHour, s.ArrivalMinute, s.IsSundayFlight, s.IsMondayFlight, s.IsTuesdayFlight, s.IsWednesdayFlight, s.IsThursdayFlight, s.IsFridayFlight, s.IsSaturdayFlight,</span></span><br><span class="line"><span class="string">     a1.Id, a1.Code, a1.City, a1.ProvinceState, a1.Country,</span></span><br><span class="line"><span class="string">     a2.Id, a2.Code, a2.City, a2.ProvinceState, a2.Country</span></span><br><span class="line"><span class="string">FROM ScheduledFlight s</span></span><br><span class="line"><span class="string">     INNER JOIN Airport a1</span></span><br><span class="line"><span class="string">          ON s.DepartureAirportId = a1.Id</span></span><br><span class="line"><span class="string">    INNER JOIN Airport a2</span></span><br><span class="line"><span class="string">          ON s.ArrivalAirportId = a2.Id</span></span><br><span class="line"><span class="string">WHERE a1.Code = @FromCode"</span>;</span><br><span class="line"></span><br><span class="line">        scheduledFlights = </span><br><span class="line">            <span class="keyword">await</span> connection.QueryAsync&lt;ScheduledFlight, Airport, Airport, ScheduledFlight&gt;(query,</span><br><span class="line">                    (flight, departure, arrival ) =&gt; &#123;</span><br><span class="line">                        flight.DepartureAirport = departure;</span><br><span class="line">                        flight.ArrivalAirport = arrival;</span><br><span class="line">                        <span class="keyword">return</span> flight;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="keyword">new</span>&#123;FromCode = <span class="keyword">from</span>&#125; );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> scheduledFlights;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>First, instead of a single type parameter <code>&lt;ScheduledFlight&gt;</code>, we need to provide a series of type parameters: <code>&lt;ScheduledFlight, Airport, Airport, ScheduledFlight&gt;</code>. The first 3 parameters specify the types that are contained in each row that the query returns. In this example, each row contains columns that will be mapped to <code>ScheduledFlight</code> and 2 <code>Airports</code>. The order matters here, and Dapper assumes that when it seems a column named <code>Id</code> then it is looking at columns for the next entity type. In the example below, the columns from <code>Id</code> to <code>IsSaturdayFlight</code> are mapped to a <code>ScheduledFlight</code> entity. The next 5 columns <code>Id, Code, City, ProvinceState, Country</code> are mapped to an <code>Airport</code> entity, and the last 5 columns are mapped to a second <code>Airport</code> entity. If you aren't using <code>Id</code>, you can use the optional <code>splitOn</code> argument to specify the column names that Dapper should use to identity the start of each entity type.</p><p>What's that last type parameter? Why do we need to specify <code>ScheduledFlight</code> again? Well, I'm glad you asked. The thing about Dapper is that it doesn't actually know much about the structure of our entities so we need to tell it how to wire up the 3 entities that it just mapped from a row. That last <code>ScheduledFlight</code> type parameter is telling Dapper that <code>ScheduledFlight</code> is ultimately the entity we want to return from this query. It is important for the second argument that is passed to the <code>QueryAsync</code> method.</p><p>That second argument is a function that takes in the 3 entities that were mapped back from that row and returns and entity of the type that was specified as the last type parameter. In this case, we assign the first <code>Airport</code> to the flight's <code>DepartureAirport</code> property and assign the second <code>Airport</code> to the flight's <code>ArrivalAiport</code> parameter, then we return the flight that was passed in.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(flight, departure, arrival ) =&gt; &#123;</span><br><span class="line">    flight.DepartureAirport = departure;</span><br><span class="line">    flight.ArrivalAirport = arrival;</span><br><span class="line">    <span class="keyword">return</span> flight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The first argument argument passed to the <code>QueryAsync</code> method is the SQL query, and the third argument is an anonymous object containing any parameters for that query. Those arguments are really no different than the simple examples we saw in <a href="https://www.davepaquette.com/archive/2018/01/22/loading-an-object-graph-with-dapper.aspx" target="_blank" rel="noopener">previous blog posts</a>.</p><h2>Wrapping it up</h2><p>Dapper refers to this technique as <a href="https://github.com/StackExchange/Dapper#multi-mapping" target="_blank" rel="noopener">Multi Mapping</a>. I think it's called that because we are mapping multiple entities from each row that the query returns. In a fully featured ORM like Entity Framework, we call this feature Eager Loading. It is an optimization technique that avoids the need for multiple queries in order to load an entity and it's associated entities.</p><p>This approach is simple enough to use and it does reduce the number of round trips needed to load a set of entities. It does, however, come at a cost. Specifically, the results of the query end up causing some duplication of data. As you can see below, the data for the Calgary and Vancouver airports is repeated in each row.</p><p><img src="https://www.davepaquette.com/images/dapper/multi_mapping_data_duplication.png" alt="Data Duplication"></p><p>This isn't a huge problem if the result set only contains 3 rows but it can become problematic when dealing with large result sets. In addition to creating somewhat bloated result sets, Dapper will also create new instances of those related entities for each row in the result set. In the example above, we would end up with 3 instances of the <code>Airport</code> class representing YYC - Calgary and 3 instances of the <code>Airport</code> class representing YVR - Vancouver. Again, this isn't necessarily a big problem when we have 3 rows in the result set but with larger result sets it could cause your application to use a lot more memory than necessary.</p><p>It is worth considering the cost associated with this approach. Given the added memory cost, this approach might be better suited to One-to-One associations rather than the Many-to-One example we talked about in this post. In the next post, we will explore an alternate approach that is more memory efficient but probably a little more costly on the CPU for the mapping.</p>]]></content>
    
    <summary type="html">
    
      This is a part of a series of blog posts on data access with Dapper. In today&#39;s post, we will start our journey into more complex query scenarios by exploring how to load related entities. There are a few different scenarios to cover here. In this post we will be covering the Many-to-One scenario.
    
    </summary>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/categories/Dapper/"/>
    
    
      <category term=".NET Core" scheme="http://www.westerndevs.com/tags/NET-Core/"/>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/tags/Dapper/"/>
    
      <category term=".NET" scheme="http://www.westerndevs.com/tags/NET/"/>
    
      <category term="Micro ORM" scheme="http://www.westerndevs.com/tags/Micro-ORM/"/>
    
  </entry>
  
  <entry>
    <title type="html">Using Stored Procedures to Load Data with Dapper</title>
    <link href="http://www.westerndevs.com/Dapper/using-stored-procedures-to-load-data-with-dapper/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Dapper/using-stored-procedures-to-load-data-with-dapper/</id>
    <published>2018-01-29T01:00:01.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This is a part of a series of blog posts on data access with Dapper. To see the full list of posts, visit the <a href="https://www.davepaquette.com/archive/2018/01/21/exploring-dapper-series.aspx" target="_blank" rel="noopener">Dapper Series Index Page</a>.</p><p>Let's just get this one out of the way early. Stored procedures are not my favorite way to get data from SQL Server but there was a time when they were extremely popular. They are still heavily used today and so this series would not be complete without covering how to use stored procedures with Dapper.</p><h2>A Simple Example</h2><p>Let's imagine a simple stored procedure that allows us to query for <code>Aircraft</code> by model.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> GetAircraftByModel @<span class="keyword">Model</span> <span class="keyword">NVARCHAR</span>(<span class="number">255</span>) <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">       <span class="keyword">Id</span></span><br><span class="line">      ,Manufacturer</span><br><span class="line">      ,<span class="keyword">Model</span></span><br><span class="line">      ,RegistrationNumber</span><br><span class="line">      ,FirstClassCapacity</span><br><span class="line">      ,RegularClassCapacity</span><br><span class="line">      ,CrewCapacity</span><br><span class="line">      ,ManufactureDate</span><br><span class="line">      ,NumberOfEngines</span><br><span class="line">      ,EmptyWeight</span><br><span class="line">      ,MaxTakeoffWeight</span><br><span class="line">    <span class="keyword">FROM</span> Aircraft a</span><br><span class="line">    <span class="keyword">WHERE</span> a.Model = @<span class="keyword">Model</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>To execute this stored procedure and map the results to a collection of <code>Aircraft</code> objects, use the <code>QueryAsync</code> method almost exactly like we did in the <a href="https://www.davepaquette.com/archive/2018/01/22/loading-an-object-graph-with-dapper.aspx" target="_blank" rel="noopener">last post</a>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GET api/aircraft</span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;Aircraft&gt;&gt; Get(<span class="keyword">string</span> model)</span><br><span class="line">&#123;</span><br><span class="line">    IEnumerable&lt;Aircraft&gt; aircraft;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> connection = <span class="keyword">new</span> SqlConnection(_connectionString))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> connection.OpenAsync();</span><br><span class="line"></span><br><span class="line">        aircraft = <span class="keyword">await</span> connection.QueryAsync&lt;Aircraft&gt;(<span class="string">"GetAircraftByModel"</span>,</span><br><span class="line">                        <span class="keyword">new</span> &#123;Model = model&#125;, </span><br><span class="line">                        commandType: CommandType.StoredProcedure);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> aircraft;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Instead of passing in the raw SQL statement, we simply pass in the name of the stored procedure. We also pass in an object that has properties for each of the stored procedures arguments, in this case <code>new {Model = model}</code> maps the <code>model</code> variable to the stored procedure's <code>@Model</code> argument. Finally, we specify the <code>commandType</code> as <code>CommandType.StoredProcedure</code>.</p><h2>Wrapping it up</h2><p>That's all there is to using stored procedures with Dapper. As much as I dislike using stored procedures in my applications, I often do have to call stored procedures to fetch data from legacy databases. When that situation comes up, Dapper is my tool of choice.</p><p>Stay tuned for the next installment in this Dapper series. Comment below if there is a specific topic you would like covered.</p>]]></content>
    
    <summary type="html">
    
      Let&#39;s just get this one out of the way early. Stored procedures are not my favorite way to get data from SQL Server but there was a time when they were extremely popular. They are still heavily used today and so this series would not be complete without covering how to use stored procedures with Dapper.
    
    </summary>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/categories/Dapper/"/>
    
    
      <category term=".NET Core" scheme="http://www.westerndevs.com/tags/NET-Core/"/>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/tags/Dapper/"/>
    
      <category term=".NET" scheme="http://www.westerndevs.com/tags/NET/"/>
    
      <category term="Micro ORM" scheme="http://www.westerndevs.com/tags/Micro-ORM/"/>
    
  </entry>
  
  <entry>
    <title type="html">Loading an Object From SQL Server Using Dapper</title>
    <link href="http://www.westerndevs.com/Dapper/loading-an-object-graph-with-dapper/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Dapper/loading-an-object-graph-with-dapper/</id>
    <published>2018-01-23T02:30:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I was recently asked to create a read-only web API to expose some parts of a system's data model to third party developers. While <a href="https://docs.microsoft.com/en-us/ef/" target="_blank" rel="noopener">Entity Framework</a> is often my go-to tool for data access, I thought this was a good scenario to use Dapper instead. This series of blog posts explores dapper and how you might use it in your application. To see the full list of posts, visit the <a href="https://www.davepaquette.com/archive/2018/01/21/exploring-dapper-series.aspx" target="_blank" rel="noopener">Dapper Series Index Page</a>.</p><p>Today, we will start with the basics of loading a mapping and database table to a C# class.</p><h1>What is Dapper?</h1><p><a href="https://github.com/StackExchange/Dapper" target="_blank" rel="noopener">Dapper</a> calls itself a simple object mapper for .NET and is usually lumped into the category of micro ORM (Object Relational Mapper). When compared to a fully featured ORM like Entity Framework, Dapper lacks certain features like change-tracking, lazy loading and the ability to translate complex LINQ expressions to SQL queries. The fact that Dapper is missing these features is probably the single best thing about Dapper. While it might seem like you're giving up a lot, you are also gaining a lot by dropping those types of features. Dapper is fast since it doesn't do a lot of the magic that Entity Framework does under the covers. Since there is less magic, Dapper is also a lot easier to understand which can lead to lower maintenance costs and maybe even fewer bugs.</p><h1>How does it work?</h1><p>Throughout this series we will build on an example domain for an airline. All airlines need to manage a fleet of aircraft, so let's start there. Imagine a database with a table named <code>Aircraft</code> and a C# class with property names that match the column names of the <code>Aircraft</code> table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Aircraft</span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">Id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">CONSTRAINT</span> pk_Aircraft_Id PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">        Manufacturer <span class="keyword">nvarchar</span>(<span class="number">255</span>),</span><br><span class="line">        <span class="keyword">Model</span> <span class="keyword">nvarchar</span>(<span class="number">255</span>),</span><br><span class="line">        RegistrationNumber <span class="keyword">nvarchar</span>(<span class="number">50</span>),</span><br><span class="line">        FirstClassCapacity <span class="built_in">int</span>,</span><br><span class="line">        RegularClassCapacity <span class="built_in">int</span>,</span><br><span class="line">        CrewCapacity <span class="built_in">int</span>,</span><br><span class="line">        ManufactureDate <span class="built_in">date</span>,</span><br><span class="line">        NumberOfEngines <span class="built_in">int</span>,</span><br><span class="line">        EmptyWeight <span class="built_in">int</span>,</span><br><span class="line">        MaxTakeoffWeight <span class="built_in">int</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Aircraft</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Manufacturer &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Model &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> RegistrationNumber &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> FirstClassCapacity &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> RegularClassCapacity &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> CrewCapacity &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime ManufactureDate &#123;<span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> NumberOfEngines &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> EmptyWeight &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> MaxTakeoffWeight &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>Installing Dapper</h2><p>Dapper is available as a <a href="https://www.nuget.org/packages/Dapper/" target="_blank" rel="noopener">Nuget package</a>. To use Dapper, all you need to do is add the <code>Dapper</code> package to your project.</p><p><strong>.NET Core CLI</strong>: <code>dotnet add package Dapper</code></p><p><strong>Package Manager Console</strong>: <code>Install-Package Dapper</code></p><h2>Querying a single object</h2><p>Dapper provides a set of extension methods for .NET's <code>IDbConnection</code> interface. For our first task, we want to execute a query to return the data for a single row from the <code>Aircraft</code> table and place the results in an instance of the <code>Aircraft</code> class. This is easily accomplished using Dapper's <code>QuerySingleAsync</code> method.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet(<span class="meta-string">"&#123;id&#125;"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;Aircraft&gt; <span class="title">Get</span>(<span class="params"><span class="keyword">int</span> id</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Aircraft aircraft;</span><br><span class="line">  <span class="keyword">using</span> (<span class="keyword">var</span> connection = <span class="keyword">new</span> SqlConnection(_connectionString))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">await</span> connection.OpenAsync();</span><br><span class="line">    <span class="keyword">var</span> query = <span class="string">@"</span></span><br><span class="line"><span class="string">SELECT </span></span><br><span class="line"><span class="string">       Id</span></span><br><span class="line"><span class="string">      ,Manufacturer</span></span><br><span class="line"><span class="string">      ,Model</span></span><br><span class="line"><span class="string">      ,RegistrationNumber</span></span><br><span class="line"><span class="string">      ,FirstClassCapacity</span></span><br><span class="line"><span class="string">      ,RegularClassCapacity</span></span><br><span class="line"><span class="string">      ,CrewCapacity</span></span><br><span class="line"><span class="string">      ,ManufactureDate</span></span><br><span class="line"><span class="string">      ,NumberOfEngines</span></span><br><span class="line"><span class="string">      ,EmptyWeight</span></span><br><span class="line"><span class="string">      ,MaxTakeoffWeight</span></span><br><span class="line"><span class="string">  FROM Aircraft WHERE Id = @Id"</span>;</span><br><span class="line"></span><br><span class="line">    aircraft = <span class="keyword">await</span> connection.QuerySingleAsync&lt;Aircraft&gt;(query, <span class="keyword">new</span> &#123;Id = id&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> aircraft;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>Before we can call Dapper's <code>QuerySingleASync</code> method, we need an instance of an open <code>SqlConnection</code>. If you are an Entity Framework user, you might not be used to working directly with the <code>SqlConnection</code> class because Entity Framework generally manages connections for you. All we need to do is create a new <code>SqlConnection</code>, passing in the connection string, then call <code>OpenAsync</code> to open that connection. We wrap the connection in a <code>using</code> statement to ensure that <code>connection.Dispose()</code> is called when we are done with the connection. This is important because it ensures the connection is returned to the connection pool that is managed by .NET. If you forget to do this, you will quickly run into problems where your application is not able to connect to the database because the connection pool is starved. Check out the <a href="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql-server-connection-pooling" target="_blank" rel="noopener">.NET Docs</a> for  more information on connection pooling.</p><p>We will use the following pattern throughout this series of blogs posts:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span>(<span class="keyword">var</span> connection = <span class="keyword">new</span> SqlConnection(_connectionString))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">await</span> connection.OpenAsync();</span><br><span class="line">  <span class="comment">//Do Dapper Things</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As @Disman pointed out in the comments, it is not necessary to call <code>connection.OpenAsync()</code>. If the connection is not already opened, Dapper will call <code>OpenAsync</code> for you. Call me old fashioned but I think that whoever created the connection should be the one responsible for opening it, that's why I like to open the connection before calling Dapper.</p><p>Let's get back to our example. To query for a single <code>Aircraft</code>, we call the <code>QuerySingleAsync</code> method, specifying the <code>Aircraft</code> type parameter. The type parameter tells Dapper what class type to return. Dapper will take the results of the query that gets executed and map the column values to properties of the specified type. We also pass in two arguments. The first is the query that will return a single row based on a specified <code>@Id</code> parameter.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">       Id</span><br><span class="line">      ,Manufacturer</span><br><span class="line">      ,Model</span><br><span class="line">      ,RegistrationNumber</span><br><span class="line">      ,FirstClassCapacity</span><br><span class="line">      ,RegularClassCapacity</span><br><span class="line">      ,CrewCapacity</span><br><span class="line">      ,ManufactureDate</span><br><span class="line">      ,NumberOfEngines</span><br><span class="line">      ,EmptyWeight</span><br><span class="line">      ,MaxTakeoffWeight</span><br><span class="line">  FROM Aircraft WHERE Id = @Id</span><br></pre></td></tr></table></figure> <p>The next parameter is an anonymous class containing properties that will map to the parameters of the query.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> &#123;Id = id&#125;</span><br></pre></td></tr></table></figure><p>Passing the parameters in this way ensures that our queries are not susceptible to SQL injection attacks.</p><p>That's really all there is to it. As long as the column names and data types match the property of your class, Dapper takes care of executing the query, creating an instance of the <code>Aircraft</code> class and setting all the properties.</p><p>If the query doesn't contain return any results, Dapper will throw an <code>InvalidOperationException</code>.</p><blockquote><p>InvalidOperationException: Sequence contains no elements</p></blockquote><p>If you prefer that Dapper returns null when there are no results, use the <code>QuerySingleOrDefaultAsnyc</code> method instead.</p><h2>Querying a list of objects</h2><p>Querying for a list of objects is just as easy as querying for a single object. Simply call the <code>QueryAsync</code> method as follows.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;Aircraft&gt;&gt; Get()</span><br><span class="line">&#123;</span><br><span class="line">  IEnumerable&lt;Aircraft&gt; aircraft;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">using</span> (<span class="keyword">var</span> connection = <span class="keyword">new</span> SqlConnection(_connectionString))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">await</span> connection.OpenAsync();</span><br><span class="line">    <span class="keyword">var</span> query = <span class="string">@"</span></span><br><span class="line"><span class="string">SELECT </span></span><br><span class="line"><span class="string">       Id</span></span><br><span class="line"><span class="string">      ,Manufacturer</span></span><br><span class="line"><span class="string">      ,Model</span></span><br><span class="line"><span class="string">      ,RegistrationNumber</span></span><br><span class="line"><span class="string">      ,FirstClassCapacity</span></span><br><span class="line"><span class="string">      ,RegularClassCapacity</span></span><br><span class="line"><span class="string">      ,CrewCapacity</span></span><br><span class="line"><span class="string">      ,ManufactureDate</span></span><br><span class="line"><span class="string">      ,NumberOfEngines</span></span><br><span class="line"><span class="string">      ,EmptyWeight</span></span><br><span class="line"><span class="string">      ,MaxTakeoffWeight</span></span><br><span class="line"><span class="string">  FROM Aircraft"</span>;</span><br><span class="line">    aircraft = <span class="keyword">await</span> connection.QueryAsync&lt;Aircraft&gt;(query);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> aircraft;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this case, the query did not contain any parameters. If it did, we would pass those parameters in as an argument to the <code>QueryAsync</code> method just like we did for the <code>QuerySingleAsync</code> method.</p><h2>What's next?</h2><p>This is just the beginning of what I expect will be a long series of blog posts. You can follow along on this blog and you can track the <a href="https://github.com/AspNetMonsters/DapperSeries" target="_blank" rel="noopener">sample code on GitHub</a>.</p><p>Leave a comment below if there is a topic you would like me to cover.</p>]]></content>
    
    <summary type="html">
    
      I was recently asked to create a read-only web API to expose some parts of a system&#39;s data model to third party developers. While Entity Framework is often my go-to tool for data access, I thought this was a good scenario to use Dapper instead. This series of blog posts explores dapper and how you might use it in your application. Today, we will start with the basics of loading and mapping a database table to a C# class.
    
    </summary>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/categories/Dapper/"/>
    
    
      <category term=".NET Core" scheme="http://www.westerndevs.com/tags/NET-Core/"/>
    
      <category term="Dapper" scheme="http://www.westerndevs.com/tags/Dapper/"/>
    
      <category term=".NET" scheme="http://www.westerndevs.com/tags/NET/"/>
    
      <category term="Micro ORM" scheme="http://www.westerndevs.com/tags/Micro-ORM/"/>
    
  </entry>
  
  <entry>
    <title type="html">Home Networking - Racking</title>
    <link href="http://www.westerndevs.com/Networking/Home-Networking-3/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Networking/Home-Networking-3/</id>
    <published>2018-01-10T04:00:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Donald Belcham</name>
	  <email>donald.belcham@igloocoder.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<img style="float: right;padding-left:10px" src="https://www.igloocoder.com/images/raw-wiring.jpg"><p>As you can see in the picture, I didn't just terminate cables in a mechanical room and mount a few pieces of hardware directly to a wall. Instead I got a wall mount rack to organize everything in. The rack I chose had to meet a few base criteria:</p><ul><li>standard <code>U</code> sizing so mounting equipment would be easy</li><li>significant number of <code>U</code>s to fit current and future equipment</li><li>easy open access for setup and maintenance</li><li>enough depth to accept the networking hardware I had chosen</li></ul><p>In the end I got a <a href="https://www.amazon.ca/Tripp-Lite-SRW08U22-2-Post-Cabinet/dp/B0041W55YE/ref=sr_1_6?ie=UTF8&amp;qid=1515542698&amp;sr=8-6&amp;keywords=wall+mount+rack" target="_blank" rel="noopener">Tripp Lite rack</a> that I could lag into some wall studs and fill with up to 150lbs of equipment. The one thing that is weak on this kind of solution is the cable management options. There are no cable raceways down the sides that you can use and third-party options are limited if they exist at all. If you look closely at the picture you can see that I ended up having to velcro strap the cable bundles to the rack posts and supports to be able to maintain some semblance of cabling hygiene.</p><p>Getting the rack setup was pretty easy, but I did run into one issue that slowed me down. The rack has threaded holes for mounting, not holes for cage nuts. The threaded holes are ever so slightly smaller than those in cage nuts which made it impossible to use the bolts that came with most of the hardware I was mounting. If I were to do this again, I'd make the effort (and pay the necessary price) to get a wall rack that used cage nuts.</p><p>In addition to mounting the rack on the wall I had the electricians (who pulled all my Cat6 cabling) put two plugs on the all behind the rack. The plugs are on separate circuits for future expansion and/or high draw equipment. As of now, I only need one but I did not want to have to watch someone pounding nails or running screws behind my rack in the future. I'll cover the whole power system in another post, but safe to say it's not just a bunch of wall-warts plugged into power bars.</p><p>The last pieces added to the rack were accessories; horizontal cable management, shelves, and blank face plates. Of those, probably the only truly necessary items were the shelves. I have one mounted at the top of the rack that holds all of my ISP's hardware. I wanted to keep that crap isolated. The other shelf is mounted near the bottom of the rack and holds a collection of Raspberry Pi computers that I use for various things.</p><img src="https://www.igloocoder.com/images/rack-layout.jpg"><p>I spent a lot of time planning how to fill the rack. I didn't want network wires running all over the place, and I didn't want a mess of power cables either. In fact, I decided early on that I didn't want the networking and power cables to intermingle at all. The best tool that I found for doing this was Google Sheets (or Excel if you must). The diagram above shows the plan that I came up with to meet those goals.</p><p>When I started the process of building this infrastructure, I figured getting the rack mounted was going to be one of the easier tasks. It turned out not to be hard, but to be quite time consuming as I searched for the best setup.</p>]]></content>
    
    <summary type="html">
    
      I didn&#39;t just terminate cables in a mechanical room and mount a few pieces of hardware directly to a wall. Instead I got a wall mount rack to organize everything in.
    
    </summary>
    
      <category term="Networking" scheme="http://www.westerndevs.com/categories/Networking/"/>
    
    
      <category term="networking" scheme="http://www.westerndevs.com/tags/networking/"/>
    
  </entry>
  
  <entry>
    <title type="html">Angular Testing Patterns - TestBed</title>
    <link href="http://www.westerndevs.com/Development/angular-testing-1/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Development/angular-testing-1/</id>
    <published>2017-12-31T19:38:30.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Spec files are automatically generated by Angular 5's CLI but most projects leave them empty. Why not actually write some tests? This post covers some useful patterns to make the whole process as painless as possible.</p><a id="more"></a><p>I've recently been working on a team which has some downright amazing leadership on the testing side. As a result I've had to raise my testing game to a level I've not been at before. During the process the team developed some testing patters which might be useful to the general populace. Here they are:</p><ol><li>Keep the number of test bed tests to a minimum.</li><li>Leverage <code>Observable</code> as a testing seam</li><li>Leverage monkey patching as a testing seam</li><li>No matter what anybody says e2e tests still need sleeps</li></ol><p>I'm going to split this post into parts to keep the posts relatively short.</p><h1>Test Bed</h1><p>Angular 2 introduced the idea of the <code>TestBed</code> which is basically a way of testing out a component with a &quot;real&quot; DOM behind it. There is support for injecting services either real or mock into your component as well as binding your component's model to the template. TestBed tests are the default type of test generated by the angular-cli when you create a new component. They are great and can be used to test a component much more thoroughly than testing with isolated tests alone.</p><p>The issue with them is that they tend to be quite slow to run. The interaction with the DOM and the setup of an entire dependency injection instance per test adds several hundred milliseconds for every TestBed test run. Just watching the test counter tick up in my command-line test reporter I can easily see when TestBed tests are encountered as the counter slows right now. The added time may not be huge in isolation but if we add 500ms (pretty conservative in my experience) per test on a collection of 1500 tests (pretty small project) then we're talking twelve and a half minutes. Angular testing is already glacial so adding this coupled with the Karma runner's inability to selectively run tests and you're really in trouble.</p><p>Testing should be lightening fast because you want the feedback loop to be as tight as possible. That's why I'm such a big fan of <a href="https://blogs.msdn.microsoft.com/visualstudio/2017/03/09/live-unit-testing-in-visual-studio-2017-enterprise/" target="_blank" rel="noopener">Live Unit Testing</a>. My mantra is that you should be able to hold your breath during a test run without feeling uncomfortable (this makes former pearl divers well adapted to being Angular developers). Most of the functionality that we test on a component doesn't need to be tested using a full featured TestBed. Any functions which mutate the state or call out to other services can be written without the need for the TestBed. Many of my components contain just two TestBed tests: one to check the component can be created and one to check it can be initted. These two test generally catch any typos in the template which is a big source of errors as the TypeScript compiler doesn't catch things in there. In the init test you can also check that appropriate bindings are in place. It is faster to have a test which tests a bunch of properties at once than one test per property.</p><p>This being said there are still plenty of time when TestBed tests do come in useful, typically any time you're building a complex user interface and want to validate that it works cross browsers. I'm certainly not saying don't use TestBed at all but rather that its use should be limited and isolation tests should be favoured.</p><p>Let's take a look at an example test which we can migrate away from the TestBed.</p><p>This component does some simple addition. Left side + right side = answer, unless the answer is less than 0 then 'Value too small':</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-math-component'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./math-component.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./math-component.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MathComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  model: MathComponentModel = &#123;</span><br><span class="line">    left: <span class="number">0</span>,</span><br><span class="line">    right: <span class="number">0</span>,</span><br><span class="line">    answer: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update() &#123;</span><br><span class="line">    <span class="keyword">this</span>.model.answer = <span class="keyword">this</span>.model.left + <span class="keyword">this</span>.model.right;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.model.answer &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.model.answer = <span class="string">'Value too small'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MathComponentModel</span> </span>&#123;</span><br><span class="line">  left: number;</span><br><span class="line">  right: number;</span><br><span class="line">  answer: number | string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The template for it is equally simple</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"model.left"</span> (<span class="attr">change</span>)=<span class="string">"update()"</span> <span class="attr">type</span>=<span class="string">"number"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"model.right"</span> (<span class="attr">change</span>)=<span class="string">"update()"</span> <span class="attr">type</span>=<span class="string">"number"</span>/&gt;</span>=</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"model.answer"</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>A fully testbed test for this might look like</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'MathComponent'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> component: MathComponent;</span><br><span class="line">  <span class="keyword">let</span> fixture: ComponentFixture&lt;MathComponent&gt;;</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="keyword">async</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      declarations: [MathComponent],</span><br><span class="line">      imports: [FormsModule]</span><br><span class="line">    &#125;)</span><br><span class="line">      .compileComponents();</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fixture = TestBed.createComponent(MathComponent);</span><br><span class="line">    component = fixture.componentInstance;</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should create'</span>, () =&gt; &#123;</span><br><span class="line">    expect(component).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should add up two numbers'</span>, fakeAsync(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> compiled = fixture.debugElement.nativeElement;</span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=left]'</span>).value = <span class="string">'2'</span>;</span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=left]'</span>).dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'input'</span>));</span><br><span class="line"></span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=right]'</span>).value = <span class="string">'3'</span>;</span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=right]'</span>).dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'input'</span>));</span><br><span class="line"></span><br><span class="line">    component.update();</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">    tick();</span><br><span class="line">    expect(compiled.querySelector(<span class="string">'[data-autom=answer]'</span>).value).toBe(<span class="string">'5'</span>);</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should set answer to "Value too small" if answer &lt; 0'</span>, fakeAsync(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> compiled = fixture.debugElement.nativeElement;</span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=left]'</span>).value = <span class="string">'2'</span>;</span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=left]'</span>).dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'input'</span>));</span><br><span class="line"></span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=right]'</span>).value = <span class="string">'-3'</span>;</span><br><span class="line">    compiled.querySelector(<span class="string">'[data-autom=right]'</span>).dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'input'</span>));</span><br><span class="line"></span><br><span class="line">    component.update();</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">    tick();</span><br><span class="line"></span><br><span class="line">    expect(compiled.querySelector(<span class="string">'[data-autom=answer]'</span>).value).toBe(<span class="string">'Value too small'</span>);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>A couple of things to point out here: the first is that there is quite a bit of magic to interact with input boxes on the page. The second thing is that compiled component tests seem to be <a href="https://github.com/angular/angular/issues/12409" target="_blank" rel="noopener">quite slow</a>, doubly so if you haven't made your modules highly granular. Much of the testing here could be handled by testing the model rather than the rendering. A testbed test is still needed to check the rendering once but after that we're good with simpler tests.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'MathComponent bindings'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> component: MathComponent;</span><br><span class="line">  <span class="keyword">let</span> fixture: ComponentFixture&lt;MathComponent&gt;;</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="keyword">async</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      declarations: [MathComponent],</span><br><span class="line">      imports: [FormsModule]</span><br><span class="line">    &#125;)</span><br><span class="line">      .compileComponents();</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fixture = TestBed.createComponent(MathComponent);</span><br><span class="line">    component = fixture.componentInstance;</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should init'</span>, () =&gt; &#123;</span><br><span class="line">    expect(component).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should create'</span>, fakeAsync(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    component.model.answer = <span class="number">5</span>;</span><br><span class="line">    component.model.answer = <span class="number">5</span>;</span><br><span class="line">    component.model.left = <span class="number">3</span>;</span><br><span class="line">    component.model.right = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">    tick();</span><br><span class="line">    <span class="keyword">const</span> compiled = fixture.debugElement.nativeElement;</span><br><span class="line">    expect(compiled.querySelector(<span class="string">'[data-autom=answer]'</span>).value).toBe(component.model.answer.toString());</span><br><span class="line">    expect(compiled.querySelector(<span class="string">'[data-autom=left]'</span>).value).toBe(component.model.left.toString());</span><br><span class="line">    expect(compiled.querySelector(<span class="string">'[data-autom=right]'</span>).value).toBe(component.model.right.toString());</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;);</span><br><span class="line">describe(<span class="string">'MathComponent'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'should add up two numbers'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> component = <span class="keyword">new</span> MathComponent();</span><br><span class="line">    component.model.left = <span class="number">1</span>;</span><br><span class="line">    component.model.right = <span class="number">2</span>;</span><br><span class="line">    component.update();</span><br><span class="line">    expect(component.model.answer).toBe(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should set answer to Value too small if answer &lt; 0'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> component = <span class="keyword">new</span> MathComponent();</span><br><span class="line">    component.model.left = <span class="number">1</span>;</span><br><span class="line">    component.model.right = <span class="number">-2</span>;</span><br><span class="line">    component.update();</span><br><span class="line">    expect(component.model.answer).toBe(<span class="string">'Value too small'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The advantage here is that the tests are simpler and run faster. We also don't have to worry about fiddling with fake async or ticks.</p><p>In the next article we'll visit how we can use Observables, which are pretty popular in angular, as a seam to help write tests.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spec files are automatically generated by Angular 5&#39;s CLI but most projects leave them empty. Why not actually write some tests? This post covers some useful patterns to make the whole process as painless as possible.&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://www.westerndevs.com/categories/Development/"/>
    
    
      <category term="Testing" scheme="http://www.westerndevs.com/tags/Testing/"/>
    
      <category term="Angular" scheme="http://www.westerndevs.com/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title type="html">Authorize Resource Tag Helper for ASP.NET Core</title>
    <link href="http://www.westerndevs.com/ASP-NET-Core/Tag-Helpers/authorize-resource-tag-helper/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/ASP-NET-Core/Tag-Helpers/authorize-resource-tag-helper/</id>
    <published>2017-11-29T01:30:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>In my previous blog post, I wrote an <a href="https://www.davepaquette.com/archive/2017/11/05/authorize-tag-helper.aspx" target="_blank" rel="noopener">Authorize tag helper</a> that made it simple to use role and policy based authorization in Razor Views. In this blog post, we will take this one step further and build a tag helper for resource-based authorization.</p><h1>Resource-Based Authorization</h1><p>Using the <code>IAuthorizationService</code> in ASP.NET Core, it is easy to implement an authorization strategy that depends not only on properties of the User but also depends on the resource being accessed. To learn how resource-based authorization works, take a look at the well written <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/resourcebased?tabs=aspnetcore2x" target="_blank" rel="noopener">offical documentation</a>.</p><p>Once you have defined your authorization handlers and setup any policies in <code>Startup.ConfigureServices</code>, applying resource-based authorization is a matter of calling one of two overloads of the <code>AuthorizeAsync</code> method on the <code>IAuthorizationService</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;AuthorizationResult&gt; <span class="title">AuthorizeAsync</span>(<span class="params">ClaimsPrincipal user,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">object</span> resource,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">string</span> policyName</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Task&lt;AuthorizationResult&gt; <span class="title">AuthorizeAsync</span>(<span class="params">ClaimsPrincipal user,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">object</span> resource,</span></span></span><br><span class="line"><span class="function"><span class="params">                          IAuthorizationRequirement requirements</span>)</span>;</span><br></pre></td></tr></table></figure>                          <p>One method takes in a policy name while the other takes in an <code>IAuthorizationRequirement</code>. The resulting <code>AuthorizationResult</code> has a <code>Succeeded</code> boolean that indicates whether or not the user meets the requirements for the specified policy. Using the <code>IAuthorizationService</code> in a controller is easy enough. Simply inject the service into the controller, call the method you want to call and then check the result.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">public async Task&lt;IActionResult&gt; Edit(int id)</span><br><span class="line">&#123;</span><br><span class="line">    var document = _documentContext.Find(documentId);</span><br><span class="line"></span><br><span class="line">    var authorizationResult = await _authorizationService.AuthorizeAsync(User, Document, &quot;EditDocument&quot;);</span><br><span class="line"></span><br><span class="line">    if (authorizationResult.Succeeded)</span><br><span class="line">    &#123;</span><br><span class="line">        return View(document);</span><br><span class="line">    &#125;    </span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return new ChallengeResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using this approach, we can easily restrict which users can edit specific documents as defined by our EditDocument policy. For example, we might limit editing to only users who originally created the document.</p><p>Where things start to get a little ugly is if we want to render a UI element based on resource-based authorization. For example, we might only want to render the edit button for a document if the current user is actually authorized to edit that document. Out of the box, this would require us to inject the <code>IAuthorizationService</code> in the Razor view and use it like we did in the controller action. The approach works, but the Razor code will get ugly really fast.</p><h1>Authorize Resource Tag Helper</h1><p>Similar to the Authorize Tag Helper from the last blog post, this Authorize Resource Tag Helper will make it easy to show or hide blocks of HTML by evaluating authorization rules.</p><h2>Resource-Based Policy Authorization</h2><p>Let's assume we have a named &quot;EditDocument&quot; that requires a user to be the original author of a <code>Document</code> in order to edit the document. With the authorize resource tag helper, specify the resource instance using the <code>asp-authorize-resource</code> attribute and the policy name using the <code>asp-policy</code> attribute. Here is an example where <code>Model</code> is an instance of a <code>Document</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">asp-authorize-resource</span>=<span class="string">"Model"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">asp-policy</span>=<span class="string">"EditDocument"</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-pencil"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If the user meets the requirments for the &quot;EditDocument&quot; policy and the specified resource, then the block of HTML will be sent to the browser. If the requirements are not met, the tag helper will suppress the output of that block of HTML. The tag helper can be applied to any HTML element.</p><h2>Resource-Based Requirement Authorization</h2><p>Instead of specifying a policy name, authorization can be evaluated by specifying an instance of an <code>IAuthorizationRequirement</code>. When using requirements directly instead of policies, specify the requirement using the <code>asp-requirement</code> attribute.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">asp-authorize-resource</span>=<span class="string">"document"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">asp-requirement</span>=<span class="string">"Operations.Delete"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-trash text-danger"</span>&gt;</span>                            </span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If the user meets <code>Operations.Delete</code> requirement for the specified resource, then the block of HTML will be sent to the browser. If the requirement is not met, the tag helper will suppress the output of that block of HTML. The tag helper can be applied to any HTML element.</p><h2>Implementation Details</h2><p>The authorize resource tag helper itself is fairly simple. The implementation will likely evolve after this blog post so you can check out the latest version <a href="https://github.com/dpaquette/TagHelperSamples/blob/master/TagHelperSamples/src/TagHelperSamples.Authorization/AuthorizeResourceTagHelper.cs" target="_blank" rel="noopener">here</a>.</p><p>The tag helper needs an instance of the <code>IHttpContextAccessor</code> to get access to the current user and an instance of the <code>IAuthorizationService</code>. These are injected into the constructor. In the <code>ProcessAsync</code> method, either the specified <code>Policy</code> or the specified <code>Requirement</code> are passed in to the <code>IAuthorizationService</code> along with the resource.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HtmlTargetElement(Attributes = <span class="meta-string">"asp-authorize-resource,asp-policy"</span>)</span>]</span><br><span class="line">[<span class="meta">HtmlTargetElement(Attributes = <span class="meta-string">"asp-authorize-resource,asp-requirement"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorizeResourceTagHelper</span> : <span class="title">TagHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IAuthorizationService _authorizationService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IHttpContextAccessor _httpContextAccessor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthorizeResourceTagHelper</span>(<span class="params">IHttpContextAccessor httpContextAccessor, IAuthorizationService authorizationService</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _httpContextAccessor = httpContextAccessor;</span><br><span class="line">        _authorizationService = authorizationService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Gets or sets the policy name that determines access to the HTML block.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">HtmlAttributeName(<span class="meta-string">"asp-policy"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Policy &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Gets or sets a comma delimited list of roles that are allowed to access the HTML  block.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">HtmlAttributeName(<span class="meta-string">"asp-requirement"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> IAuthorizationRequirement Requirement &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Gets or sets the resource to be authorized against a particular policy</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">HtmlAttributeName(<span class="meta-string">"asp-authorize-resource"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">object</span> Resource &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ProcessAsync</span>(<span class="params">TagHelperContext context, TagHelperOutput output</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Resource == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"Resource cannot be null"</span>);                </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrWhiteSpace(Policy) &amp;&amp; Requirement == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"Either Policy or Requirement must be specified"</span>);</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(Policy) &amp;&amp; Requirement != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"Policy and Requirement cannot be specified at the same time"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AuthorizationResult authorizeResult;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(Policy))</span><br><span class="line">        &#123;</span><br><span class="line">            authorizeResult = <span class="keyword">await</span> _authorizationService.AuthorizeAsync(_httpContextAccessor.HttpContext.User, Resource, Policy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Requirement != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            authorizeResult =</span><br><span class="line">                <span class="keyword">await</span> _authorizationService.AuthorizeAsync(_httpContextAccessor.HttpContext.User, Resource,</span><br><span class="line">                    Requirement);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"Either Policy or Requirement must be specified"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!authorizeResult.Succeeded)</span><br><span class="line">        &#123;</span><br><span class="line">            output.SuppressOutput();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure> <p>Note that either a policy or a requirement must be specified along with a resource, but you can't specify both a policy AND a requirement. Most of the code in the <code>ProcessAsync</code> method is checking the argument values to make sure a valid combination was used.</p><h1>Try it out</h1><p>You can see the authorize resource tag helper in action on my tag helper samples site <a href="http://taghelpersamples.azurewebsites.net/Samples/Authorize" target="_blank" rel="noopener">here</a>. The sample site contains the examples listed in this blog post and also provides a way to log in as different users to test different scenarios.</p><p>The authorize resource tag helper is also available on <a href="https://www.nuget.org/packages/TagHelperSamples.Authorization/" target="_blank" rel="noopener">NuGet</a> so you can use it in your own ASP.NET Core application.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add <span class="keyword">package</span> <span class="title">TagHelperSamples.Authorization</span></span><br></pre></td></tr></table></figure><p>Let me know what you think. Would you like to see this tag helper including in the next release of ASP.NET Core?</p><p><em>NOTE:</em> If you choose to use the authorize resource tag helper in your application, you should remember that hiding a section of HTML is not enough to fully secure your application. You also need to make sure that resource-based authorization is applied to any related controllers and action methods.</p><h1>What's Next?</h1><p>There is one more authorization scenario related to supporting different authorization schemes that I hope to cover. Watch out for that in a future blog post. Also, this tag helper project is all open source so feel free to jump in on <a href="https://github.com/dpaquette/TagHelperSamples" target="_blank" rel="noopener">GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      ASP.NET Core has a powerful mechanism for implementing resource-based authorization using the IAuthorizationService and resource-based AuthorizationHandlers. In this blog post, we build a tag helper that makes it simple to use resource-based auhtorization to Razor views without writing any C# code in the view.
    
    </summary>
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/categories/ASP-NET-Core/"/>
    
      <category term="Tag Helpers" scheme="http://www.westerndevs.com/categories/ASP-NET-Core/Tag-Helpers/"/>
    
    
      <category term="Tag Helpers" scheme="http://www.westerndevs.com/tags/Tag-Helpers/"/>
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/tags/ASP-NET-Core/"/>
    
      <category term="MVC" scheme="http://www.westerndevs.com/tags/MVC/"/>
    
      <category term="Authorization" scheme="http://www.westerndevs.com/tags/Authorization/"/>
    
  </entry>
  
  <entry>
    <title type="html">Authorize Tag Helper for ASP.NET Core</title>
    <link href="http://www.westerndevs.com/ASP-NET-Core/Tag-Helpers/authorize-tag-helper/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/ASP-NET-Core/Tag-Helpers/authorize-tag-helper/</id>
    <published>2017-11-05T19:38:30.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>In ASP.NET Core, it's easy to control access to Controllers and Action Methods using the <code>[Authorize]</code> attribute. This attribute provides a simple way to ensure only authorized users are able to access certain parts of your application. While the <code>[Authorize]</code> attribute makes it easy to control authorization for an entire page, the mechanism for controlling access to a section of a page is <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/views?tabs=aspnetcore2x" target="_blank" rel="noopener">a little clumsy</a>, involving the use of a the <code>IAuthorizationService</code> and writing C# based <code>if</code> blocks in your Razor code.</p><p>In this blog post, we build an Authorize tag helper that makes it easy to control access to any block HTML in a Razor view.</p><h1>Authorize Tag Helper</h1><p>The basic idea of this tag helper is to provide similar functionality to the <code>[Authorize]</code> attribute and it's associated action filter in ASP.NET Core MVC. The authorize tag helper will provide the same options as the <code>[Authorize]</code> attribute and the implementation will be based on the authorize filter. In the MVC framework, the <code>[Authorize]</code> attribute provides data such as the names of roles and policies while the authorize filter contains the logic to check for roles and policies as part of the request pipeline. Let's walk through the most common scenarios.</p><h2>Simple Authorization</h2><p>In it's <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/simple" target="_blank" rel="noopener">simplest form</a>, adding the <code>[Authorize]</code> attribute to a controller or action method will limit access to that controller or action method to users who are authenticated. That is, only users who are logged in will be able to access those controllers or action methods.</p><p>With the Authorize tag helper, we will implement a similar behaviour. Adding the <code>asp-authorize</code> attribute to any HTML element will ensure that only authenticated users can see that that block of HTML.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">asp-authorize</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>Welcome !!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        If you're logged in, you can see this section</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If a user is not authenticated, the tag helper will suppress the output of that entire block of HTML. That section of HTML will not be sent to the browser.</p><h2>Role Based Authorization</h2><p>The <code>[Authorize]</code> attribute provides an option to specify the role that a user must belong to in order to access a controller or action method. For example, if a user must belong to the <em>Admin</em> role, we would add the <code>[Authorize]</code> attribute and specify the <code>Roles</code> property as follows:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Authorize(Roles = <span class="meta-string">"Admin"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AdminController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//Action methods here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The equivalent using the Authorize tag helper would be to add the <code>asp-authorize</code> attribute to an HTML element and then also add the <code>asp-roles</code> attribute specifying the require role.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">asp-authorize</span> <span class="attr">asp-roles</span>=<span class="string">"Admin"</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>Admin Section<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        Only admin users can see this section. Top secret admin things go here.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You can also specify a comma separated list of roles, in which case the HTML would be rendered if the user was a member of any of the roles specified.</p><h2>Policy Based Authorization</h2><p>The <code>[Authorize]</code> attribe also provides an option to authorize users based on the requirements specified in a Policy. You can learn more about the specifics of this approach by reading the offical docs on <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/claims" target="_blank" rel="noopener">Claims-Based Authorization</a> and <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies" target="_blank" rel="noopener">Custom-Policy Based Authorization</a>. Policy based authorization is applied by specifying <code>Policy</code> property for the <code>[Authorize]</code> attribute as follows:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Authorize(Policy = <span class="meta-string">"Seniors"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AdminController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//action methods here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This assumes a policy named <em>Seniors</em> was defined at startup. For example:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">services.AddAuthorization(o =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        o.AddPolicy(<span class="string">"Seniors"</span>, p =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            p.RequireAssertion(context =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> context.User.Claims</span><br><span class="line">                      .Any(c =&gt; c.Type == <span class="string">"Age"</span> &amp;&amp; Int32.Parse(c.Value) &gt;= <span class="number">65</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>The equivalent using the Authorize tag helper would be to add the <code>asp-authorize</code> attribute to an HTML element and then also add the <code>asp-policy</code> attribute specifying the policy name.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">asp-authorize</span> <span class="attr">asp-policy</span>=<span class="string">"Seniors"</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>Seniors Only<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        Only users age 65 or older can see this section. Early bird dinner coupons go here. </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>Combining Role and Policy Based Authorization</h2><p>You can combine the role based and policy based approaches by specifying both the <code>asp-roles</code> and <code>asp-policy</code> attributes. This has the effect of requiring that the user meets the requiremnts for both the role and the policy. For example, the following would require that the usere were both a member of the Admin role and meets the requirements defined in the Seniors policy.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">asp-authorize</span> <span class="attr">asp-roles</span>=<span class="string">"Admin"</span> <span class="attr">asp-policy</span>=<span class="string">"Seniors"</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>Admin Seniors Only<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        Only users who have both the Admin role AND are age 65 or older can see this section.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>Implementation Details</h2><p>The Authorize tag helper itself is fairly simple. The implementation will likely evolve after this blog post so you can check out the latest version <a href="https://github.com/dpaquette/TagHelperSamples/blob/master/TagHelperSamples/src/TagHelperSamples.Authorization/AuthorizeTagHelper.cs" target="_blank" rel="noopener">here</a>.</p><p>The tag helper implements the <code>IAuthorizeData</code> interface. This is the interface implemented by the <a href="https://github.com/aspnet/Security/blob/dev/src/Microsoft.AspNetCore.Authorization/AuthorizeAttribute.cs" target="_blank" rel="noopener">Authorize</a> attribute in ASP.NET Core. In the <code>ProcessAsync</code> method, the properties of <code>IAuthorizeData</code> are used to create an effective policy that is then evaluated against the current <code>HttpContext</code>. If the policy does not succeed, then the output of the tag helper is supressed. Remember that supressing the output of a tag helper means that the HTML for that element, including it's children, will be NOT sent to the client.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HtmlTargetElement(Attributes = <span class="meta-string">"asp-authorize"</span>)</span>]</span><br><span class="line">[<span class="meta">HtmlTargetElement(Attributes = <span class="meta-string">"asp-authorize,asp-policy"</span>)</span>]</span><br><span class="line">[<span class="meta">HtmlTargetElement(Attributes = <span class="meta-string">"asp-authorize,asp-roles"</span>)</span>]</span><br><span class="line">[<span class="meta">HtmlTargetElement(Attributes = <span class="meta-string">"asp-authorize,asp-authentication-schemes"</span>)</span>]</span><br><span class="line">public class AuthorizationPolicyTagHelper : TagHelper, IAuthorizeData</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IAuthorizationPolicyProvider _policyProvider;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IPolicyEvaluator _policyEvaluator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IHttpContextAccessor _httpContextAccessor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthorizationPolicyTagHelper</span>(<span class="params">IHttpContextAccessor httpContextAccessor, IAuthorizationPolicyProvider policyProvider, IPolicyEvaluator policyEvaluator</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _httpContextAccessor = httpContextAccessor;</span><br><span class="line">        _policyProvider = policyProvider;</span><br><span class="line">        _policyEvaluator = policyEvaluator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Gets or sets the policy name that determines access to the HTML block.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">HtmlAttributeName(<span class="meta-string">"asp-policy"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Policy &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Gets or sets a comma delimited list of roles that are allowed to access the HTML  block.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">HtmlAttributeName(<span class="meta-string">"asp-roles"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Roles &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Gets or sets a comma delimited list of schemes from which user information is constructed.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">HtmlAttributeName(<span class="meta-string">"asp-authentication-schemes"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> AuthenticationSchemes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ProcessAsync</span>(<span class="params">TagHelperContext context, TagHelperOutput output</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> policy = <span class="keyword">await</span> AuthorizationPolicy.CombineAsync(_policyProvider, <span class="keyword">new</span>[] &#123; <span class="keyword">this</span> &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> authenticateResult = <span class="keyword">await</span> _policyEvaluator.AuthenticateAsync(policy, _httpContextAccessor.HttpContext);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> authorizeResult = <span class="keyword">await</span> _policyEvaluator.AuthorizeAsync(policy, authenticateResult, _httpContextAccessor.HttpContext, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!authorizeResult.Succeeded)</span><br><span class="line">        &#123;</span><br><span class="line">            output.SuppressOutput();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>The code in the <code>ProcessAsync</code> method is based on the <a href="https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Core/Authorization/AuthorizeFilter.cs" target="_blank" rel="noopener">AuthorizeFilter</a> from ASP.NET Core MVC.</p><h1>Try it out</h1><p>You can see the Authorize tag helper in action on my tag helper samples site <a href="http://taghelpersamples.azurewebsites.net/Samples/Authorize" target="_blank" rel="noopener">here</a>. The sample site contains the examples listed in this blog post and also provides a way to log in as different users to test different scenarios.</p><p>The Authorize tag helper is also available on <a href="https://www.nuget.org/packages/TagHelperSamples.Authorization/" target="_blank" rel="noopener">NuGet</a> so you can use it in your own ASP.NET Core application.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add <span class="keyword">package</span> <span class="title">TagHelperSamples.Authorization</span></span><br></pre></td></tr></table></figure><p>Let me know what you think. Would you like to see this tag helper included in the next release of ASP.NET Core?</p><h1>What's Next?</h1><p>If you choose to use the Authorize tag helper in your application, you should remember that hiding a section of HTML is not enough to fully secure your application. You also need to make sure that authorization is applied to any related controllers and action methods. The Authorize tag helper is meant to be used in conjugtion with the <code>[Authorize]</code> attribute, not as a replacement for it.</p><p>There are a couple more scenarios I would like to go through and I will address those in a future post. One of those is supporting different Authorization Schemes and the other resource based authorization. Of course, this project is all open source so feel free to jump in on <a href="https://github.com/dpaquette/TagHelperSamples" target="_blank" rel="noopener">GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      In ASP.NET Core, it&#39;s easy to control access to Controllers and Action Methods using the Authorize attribute. This attribute provides a simple way to ensure only authorized users are able to access certain parts of your application. While the Authorize attribute makes it easy to control authorization for an entire page, the mechanism for controlling access to a section of a page is a little clumsy. In this blog post, we build a Tag Helper that makes it incredibly easy to control access to any block HTML in a Razor view.
    
    </summary>
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/categories/ASP-NET-Core/"/>
    
      <category term="Tag Helpers" scheme="http://www.westerndevs.com/categories/ASP-NET-Core/Tag-Helpers/"/>
    
    
      <category term="Tag Helpers" scheme="http://www.westerndevs.com/tags/Tag-Helpers/"/>
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/tags/ASP-NET-Core/"/>
    
      <category term="MVC" scheme="http://www.westerndevs.com/tags/MVC/"/>
    
      <category term="Authorization" scheme="http://www.westerndevs.com/tags/Authorization/"/>
    
  </entry>
  
  <entry>
    <title type="html">Home Networking - Cabling</title>
    <link href="http://www.westerndevs.com/Networking/Home-Networking-2/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Networking/Home-Networking-2/</id>
    <published>2017-10-03T03:00:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Donald Belcham</name>
	  <email>donald.belcham@igloocoder.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<img style="float: right;padding-left:10px" src="https://www.igloocoder.com/images/raw-wiring.jpg"><p>One of the things that I knew I wanted to do with this home network was run cables to as many places as possible. Some were non-negotiable:</p><ul><li>the office needed multiple drops (8 in the end)</li><li>the TV areas needed multiple drops</li><li>each of the wireless access points needed a drop</li></ul><p>I really didn't want to deal with pulling the cable into some of those areas. Hanging out in the attic wasn't way up on my list of fun things. And, to be honest, I had no clue how I was going to get cables from the main house into the attached in-law suite. So I called the local electrician. I needed a couple of circuits to power the equipment in the server rack so it seemed like something that would make sense to bundle together.</p><p>This was the best option. The electrician and his helper pulled about 1700 feet of Cat6 cable for me. Some were my required cables and a few were extras that they pulled to the attics so that I had extra capacity when I need it. They spent a bunch of time in the heat of the attic. They also pulled cables into wall cavities so that it looks like the house has always had Cat6.</p><p>All of the cable drops were pulled to the area that I was going to put the server racks. All of this is pretty basic stuff, but I did do one thing different than I did in my last house; I didn't cut the cables short on the rack end. Instead I terminated them into Cat6 female keystone jacks as close to the ends as possible.</p><p>This left a lot of extra cable by the rack. And that's fine. Heck, in the end I had to re-terminate a handful of the cables because I screwed them up or did them poorly.</p><blockquote><p>NOTE: It's worth buying a proper punch down tool if you're going to go do your own ends. Between my patch panel and the wall plates around the house I terminated about 50 keystones.</p></blockquote><p>So what do you do with all that excess cable? You dress it of course. If you've never seen well dressed network cables, you need to spend a bit of time over at <a href="/r/cableporn">https://cableporn.reddit.com</a>. I hate messy cables. It could be my desk, behind the TV, or my networking stuff, so the people of /r/cableporn have a dear place in my heart.</p><p>I dressed all the excess cables into what's known as a &quot;service loop&quot;. The loop provides you with an excess of cable really close to the rack. If you have to fix terminations you have extra cable that you can use. This was something that I didn't have at the old house and it almost bit me in the ass. So now I have a service loop attached right to the rack which gives me about 4-5 ft of extra cable.</p><blockquote><p>I had so much excess cable that I ended up with a second service loop that has about 8ft of cable in it too...so I should never have short cable problems.</p></blockquote><p>Having a service loop is great, but having a messy one is almost as bad as not having one at all. I bundled up all of the cables in the service loop using <a href="https://www.amazon.ca/gp/product/B001E1Y5O6/ref=oh_aui_detailpage_o00_s00?ie=UTF8&amp;psc=1" target="_blank" rel="noopener">velcro straps</a>. Not zip ties, velcro straps. You can easily undo them and move cables as needed. With zip ties I'd have to cut them and add new ones every time. It's also possible to over tighten a zip tie and end up cutting into the cabling...not good. Velcro straps were the right choice based on the amount of times that I had to loosen them to move cables.</p><img style="float: right;padding-left:10px" src="https://www.igloocoder.com/images/rack-loop.jpg"><p>I probably could have bundled the cables better if I'd used a <a href="https://www.amazon.ca/ACOM-PIECE-CONTRACTOR-INSTALLATION-YELLOW/dp/B01BTUI1TQ/ref=sr_1_1?ie=UTF8&amp;qid=1501120387&amp;sr=8-1&amp;keywords=cable+comb" target="_blank" rel="noopener">cable comb</a>, but for the amount of cables that I had I didn't think buying one was worth it.</p><p>The only other Cat6 cable work that I did was to make a bunch of short cables to go between the patch panel and the switch. Yah, I probably could have bought them and saved myself a bunch of time. I needed something to do in my evenings, and getting them the exact length that I wanted would make the front of the panel look a little better too.</p><p>So all that Cat6 cable management is great, but there are other cables in my rack area that needed to be managed too. The switches, routers, UPS, power distribution, etc all had power cables. Instead of running them all over the place to get them plugged in, I bundled them up too. I didn't bundle them with the Cat6 though. Power cables can cause interference in unshielded network cabling. So with the Cat6 service loop attached to one side of the rack, I bundled the power cables and ran them along the other side of the rack.</p><p>So cabling was important, and maybe I went a bit overboard on it for a house. I should never have issues with the cables I have, and if I do I have extra cable in the service loops to fix it. I have an organized rack cabling solution that makes it really easy to trace and replace/fix cables as required. It's also really easy to move things around, change ports being used, or completely remove hardware as needed.</p><p>Put some time into planning your cable needs, some effort into installing them, and some patience into organizing them. The end result will pay off.</p>]]></content>
    
    <summary type="html">
    
      One of the things that I knew I wanted to do with this home network was run cables to as many places as possible
    
    </summary>
    
      <category term="Networking" scheme="http://www.westerndevs.com/categories/Networking/"/>
    
    
      <category term="networking" scheme="http://www.westerndevs.com/tags/networking/"/>
    
  </entry>
  
  <entry>
    <title type="html">Creating a Custom Matcher for TS-Mokito</title>
    <link href="http://www.westerndevs.com/development/TsMokito-custom-matcher/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/development/TsMokito-custom-matcher/</id>
    <published>2017-09-29T23:36:36.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>For better or worse I've been working with a lot of Angular as of late. One of the better tools I've found for helping out with testing is a great little mocking library called <a href="https://github.com/NagRock/ts-mockito" target="_blank" rel="noopener">ts-mokito</a>. I don't want to get into why I still like to have a mocking library even with a language like JavaScript - that's another post.</p><p>Testing today I ran into an annoying problem in that I was testing an angular route like so</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verify(mockRouter.navigate([<span class="string">'/some/route'</span>])).called();</span><br></pre></td></tr></table></figure><p>This test was always failing. This is because the argument to navigate is an array and in JavaScript</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'/some/route'</span>] !== [<span class="string">'/some/route'</span>]</span><br></pre></td></tr></table></figure><p>How unfortunate. Fortunately there isn't much to a custom matcher in ts-mokito. You can already do</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verify(mockRouter.navigate(anything())).called();</span><br></pre></td></tr></table></figure><p>To simply check that something was passed in but we'd like our tests to be a bit more robust than that. Enter the ArraryMatcher</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Matcher &#125; <span class="keyword">from</span> <span class="string">'ts-mockito/lib/matcher/type/Matcher'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ArrayMatcher <span class="keyword">extends</span> Matcher &#123;</span><br><span class="line">    <span class="keyword">private</span> value: <span class="built_in">any</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> expected</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    match(value: <span class="built_in">any</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _.isEqual(<span class="keyword">this</span>.expected, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Did not match <span class="subst">$&#123;this.expected&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see it has an implementation of the <code>match</code> function which uses the <code>isEqual</code> from lodash. This class can be substituted into our verify</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verify(mockRouter.navigate(&lt;<span class="built_in">any</span>&gt;<span class="keyword">new</span> ArrayMatcher([<span class="string">'/some/route'</span>])).called();</span><br></pre></td></tr></table></figure><p>That's a bit ugly with casting in there. This can be fixed by exporting a function from the ArrayMatcher</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">arrayMatches</span>(<span class="params">expected</span>): <span class="title">any</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayMatcher(expected); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Which allows for the much more pleasant syntax</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verify(mockRouter.navigate(arrayMatches([<span class="string">`/some/route`</span>]))).called();</span><br></pre></td></tr></table></figure><p>Easily done and it should be simple to implement any other sort of matcher you like.</p>]]></content>
    
    <summary type="html">
    
      Mocking libraries can be useful, even in JavaScript testing. One of my favorites is ts-mokito a TypeScript mocking library. One minor problem with it is that it is lacking a good array matcher. In this article we&#39;ll see how to fix that.
    
    </summary>
    
      <category term="development" scheme="http://www.westerndevs.com/categories/development/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="testing" scheme="http://www.westerndevs.com/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title type="html">Windows Subsystem for Linux is Cool. No really, it is.</title>
    <link href="http://www.westerndevs.com/web/websummit-wsl/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/web/websummit-wsl/</id>
    <published>2017-09-20T22:35:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><em>This is part of a series of posts capturing the highlights from my experience at the <a href="https://summit.microsoftedge.com/" target="_blank" rel="noopener">Microsoft Edge Web Summit 2017</a></em></p><p><img src="https://davidwesst.blob.core.windows.net/blog/websummit-wsl/ubuntu-install.gif" alt="Installing Ubuntu on Windows 10 from the Windows Store"></p><p>With the Fall Creators Update for Windows 10, you can go to the Windows Store and install Linux.</p><p>Yeah, that's a thing now and it's pretty cool.</p><h2>What is the Windows Subsystem for Linux (WSL)?</h2><p>It's a new Windows feature that allows Linux distributions like Ubuntu and OpenSUSE to run inside of Windows. Essentially, this let's you run Linux-based command line applications against your files stored in Windows.</p><h2>Why is that cool?</h2><p>It's cool because a lot of the web runs on Linux, but many of us develop on Windows because the business runs on the Windows platform. This means that the dev tools you have installed to run your build and test your application are the Windows versions.</p><p>It might not seem like a big deal, but it's definitely a discrepancy. How are you expected to catch Linux issues before you deploy if you're running Windows? The WSL, that's how.</p><h2>Isn't this just CygWin?</h2><p>No, it's different.</p><p>According to the <a href="https://www.cygwin.com/" target="_blank" rel="noopener">CygWin homepage</a></p><blockquote><p>Cygwin is:</p><ul><li>a large collection of GNU and Open Source tools which provide functionality similar to a Linux distribution on Windows.</li><li>a DLL (cygwin1.dll) which provides substantial POSIX API functionality.</li></ul></blockquote><p>WSL, is a layer inside of Windows that allows actual Linux distributions to run against. Microsoft is providing the foundation for Linux distributions to build upon, and keeping their hands out of the tooling itself.</p><p>When you're using CygWin, you're not using a Linux distribution. You're using CygWin. With WSL, you're not using any Linux distributions unless you install them on top of the WSL. Once you do, you're using the tooling provided and build <em>for that Linux distribution</em>.</p><h2>Isn't this just Bash for Windows 10?</h2><p>No, it's also different.</p><p>Although I won't get into the weeds with it, Bash for Windows 10 was something of a precursor to the Ubuntu distribution that is in the Windows Store. Think of it as an Ubuntu for Windows preview.</p><p>Now, we're not limited to just Bash on Ubuntu. We can install OpenSUSE and run bash on that, and eventually Fedora, and probably other flavours of Linux as time goes on. So you can run two different or three different versions of Linux against the Windows filesystem at the same time, without needing a bunch of VMs running.</p><h2>Why don't I just run Linux?</h2><p>You totally can, this doesn't change that.</p><p>This is a dev tool, first and foremost. It's meant to (IMHO) provide developers a easier way to run Linux tools on Windows, with the resource boundaries and extra resource consumption of a virutal machine.</p><p>For example, if you're running Apache on your Linux-based web server, you no longer have to run Windows-based Apache. Rather, you can install the Linux version of Apache on Ubunut or whatever, adn directly against your Windows filesystem. No VM to prep, or system boundaries to cross. Just install and run it.</p><h2>How do I start?</h2><p>You can start by <a href="https://msdn.microsoft.com/en-us/commandline/wsl/install_guide" target="_blank" rel="noopener">installing the WSL on your Windows 10 machine</a>.</p><p>The Windows Store animation I showed at the beginning of this post is using an <a href="https://insider.windows.com/en-us/" target="_blank" rel="noopener">Insiders Build</a> of Fall Creators update for Windows 10. You can join the insiders program yourself learn about that <a href="https://insider.windows.com/en-us/" target="_blank" rel="noopener">here</a>.</p><p>Until the Fall Creators update, you can still start tinkering with Bash on Ubuntu for Windows 10 by following the <a href="https://msdn.microsoft.com/en-us/commandline/wsl/install_guide" target="_blank" rel="noopener">install instructions</a> provided earlier.</p><h2>Anything else?</h2><p>Yeah.</p><p>They are finally fixing the console window in Windows, so that's a thing too. Read about it on <a href="https://blogs.msdn.microsoft.com/commandline/" target="_blank" rel="noopener">the team's blog</a>.</p><hr><h2>Resources</h2><ul><li><a href="https://blogs.msdn.microsoft.com/commandline/" target="_blank" rel="noopener">Windows Command Line Tools Blog</a></li><li><a href="https://msdn.microsoft.com/en-us/commandline/wsl/install_guide" target="_blank" rel="noopener">Installing WSL Instructions</a></li></ul>]]></content>
    
    <summary type="html">
    
      With the Fall Creators update of Windows 10, you can go to the Windows Store and install Linux. Yeah, that&#39;s a thing now and it&#39;s pretty cool.
    
    </summary>
    
      <category term="web" scheme="http://www.westerndevs.com/categories/web/"/>
    
    
      <category term="microsoft-edge" scheme="http://www.westerndevs.com/tags/microsoft-edge/"/>
    
      <category term="f12" scheme="http://www.westerndevs.com/tags/f12/"/>
    
      <category term="linux" scheme="http://www.westerndevs.com/tags/linux/"/>
    
      <category term="windows subsystem for linux" scheme="http://www.westerndevs.com/tags/windows-subsystem-for-linux/"/>
    
      <category term="wsl" scheme="http://www.westerndevs.com/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title type="html">Sonar, the Linter I Never Knew I Wanted</title>
    <link href="http://www.westerndevs.com/web/websummit-sonar/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/web/websummit-sonar/</id>
    <published>2017-09-19T22:35:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><em>This is part of a series of posts capturing the highlights from my experience at the <a href="https://summit.microsoftedge.com/" target="_blank" rel="noopener">Microsoft Edge Web Summit 2017</a></em></p><p><img src="https://davidwesst.blob.core.windows.net/blog/websummit-sonar/sonar-bttf.png" alt="Nellie the Narwhal in the Back to the Future DeLorean"></p><p>Meet Nellie the Narwhal. Nellie is the official mascot for <a href="https://sonarwhal.com/" target="_blank" rel="noopener">Sonar</a>, the linting tool for the web. Nellie represents a tool that is long-overdue. It provides any web application the ability to verify they are meeting a high level of quality when it comes to their web applications, and catch any improvements to implement or common pitfalls to fix.</p><h2>What is Sonar?</h2><p>Sonar is a linting tool for the web. Plain and simple.</p><p>It provides command line linting tool, along with some rules, that prevent developers from making some common mistakes or pitfalls with their web applications. It covers things like security, accessbility, and progressive web applications, to name a few.</p><p>You can also create your own rules for the linter, allowing you to extend the tool to check your solutions for business specific requirements.</p><p>Oh, and it's been <a href="https://js.foundation/announcements/2017/06/22/sonar-js-foundation-welcomes-newest-project" target="_blank" rel="noopener">donated to the JS Foundation</a>, where Microsoft continues to contribute to it.</p><h2>Why do you want this?</h2><p>Because of devops, that's why.</p><p>This is a command line tool that can break a build if your site doesn't meet specific requirements. Personally, I'm happy about the security and accessiblity rules they provide, but being that <a href="http://www.westerndevs.com/web/websummit-pwa/">I'm pretty focused on PWAs</a>, I'm sure that Sonar is going to help me write better PWAs than I would have done learning on my own.</p><p>Personally, I'm looking forward to breaking a build because I forgot to implement some accessibility rules. It will help me and my team learn some of these optimizations to make our web projects work best for everyone on any device.</p><h2>How can I start using it?</h2><p><img src="https://davidwesst.blob.core.windows.net/blog/websummit-sonar/sonar-in-action.gif" alt="Sonar running against WesternDevs.com showing lots of issues"></p><p>It's pretty easy: just install, initialize, and run it.</p><p>As you can see, there is work for us to do if we want to bring our blog up to the recommended specification provided by Sonar.</p><p>If you're looking to set a bar of quality, whether it be the recommended standard or just your own set of standards, Sonar is the tool that can make that happen.</p><hr><h2>Resources</h2><ul><li><a href="https://sonarwhal.com/" target="_blank" rel="noopener">Sonar</a></li><li><a href="https://js.foundation/" target="_blank" rel="noopener">JS Foundation</a></li></ul><h2>Image Credit</h2><ul><li><a href="https://github.com/sonarwhal/nellie" target="_blank" rel="noopener">Nellie's Photo Album | Back to the Future</a></li></ul>]]></content>
    
    <summary type="html">
    
      Meet Nellie the Narwhal, the official mascot for Sonar, the linting tool for the web. Nellie represents a tool that is long-overdue. It provides any web application the ability to verify they are meeting a high level of quality when it comes to their web applications, and not miss any common mistakes.
    
    </summary>
    
      <category term="web" scheme="http://www.westerndevs.com/categories/web/"/>
    
    
      <category term="devops" scheme="http://www.westerndevs.com/tags/devops/"/>
    
      <category term="microsoft-edge" scheme="http://www.westerndevs.com/tags/microsoft-edge/"/>
    
      <category term="sonar" scheme="http://www.westerndevs.com/tags/sonar/"/>
    
      <category term="accessibility" scheme="http://www.westerndevs.com/tags/accessibility/"/>
    
  </entry>
  
  <entry>
    <title type="html">Service Workers and PWAs are Super Cool</title>
    <link href="http://www.westerndevs.com/web/websummit-pwa/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/web/websummit-pwa/</id>
    <published>2017-09-18T23:35:00.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><em>This is part of a series of posts capturing the highlights from my experience at the <a href="https://summit.microsoftedge.com/" target="_blank" rel="noopener">Microsoft Edge Web Summit 2017</a></em></p><p>One of the core items highlighted by the Microsoft Edge team, along with many others who were just web professionals, was the importance of Progressive Web Apps (PWAs). I started out thinking they were something that <em>could</em> be interesting one day, but left the conference convinced that this will change the way we think of the web.</p><h2>What is a PWA?</h2><p><img src="https://davidwesst.blob.core.windows.net/blog/websummit-pwa/pwa-logo.svg" alt="PWA Logo from diekus.net/logo-pwinter"></p><p><a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">Google has been talking about PWAs</a> for a while now, but in my words they are web applications that use a progressive enhancement design strategy to add device native features, when available.</p><p>So, it's just a web app with some fancy bells and whistles, like offline loading once the site has been downloaded once and native device API access, like camera access or push notifications straight to the device.</p><p>If it sounds like regular installed application rather than a web application, then you're understanding this correctly.</p><p>PWAs <em>could</em> be the next wave of &quot;apps&quot; for our devices, but they won't need a store front. Rather, the user can just navigate to the site and &quot;install&quot; the site, which can be cached for offline usage amongst other things.</p><h2>What makes them super cool?</h2><p>Outside of the coolness of extending the reach of the web into offline world, it's also built on a set of open web standards.</p><p>Standards give developers APIs to use across platforms, but they also give the platform holders something common to build against. Both Windows and Android have big plans for PWAs, giving web developers a whole new opportunity to use our existing skills to deliver great software.</p><p>Just to be clear, software that can be offline and installed natively, using web development tools and skills.</p><p>That <em>is</em> super cool.</p><h2>So, where do I start?</h2><p>With the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener">Service Worker API</a>.</p><p>This is the first step in building a great PWA, as it allows you to &quot;install&quot; the web application on the device. Once you have it installed, then you can worry about the rest of the functionality and how it should work.</p><p>On top of that, start looking at some of the new APIs that have been coming out of the W3C like the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Push_API" target="_blank" rel="noopener">Push API</a>, the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API" target="_blank" rel="noopener">Payment Request API</a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener">IndexedDB</a>.</p><p>This should give you a good idea of what can do with a PWA rather than a regular old web application.</p>]]></content>
    
    <summary type="html">
    
      One of the core items highlighted by the Microsoft Edge team, along with many others who were just web professionals, was the importance of Progressive Web Apps (PWAs). I started out thinking they were something that could be interesting one day, but left the conference convinced that this will change the way we think of the web.
    
    </summary>
    
      <category term="web" scheme="http://www.westerndevs.com/categories/web/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="microsoft-edge" scheme="http://www.westerndevs.com/tags/microsoft-edge/"/>
    
      <category term="service-workers" scheme="http://www.westerndevs.com/tags/service-workers/"/>
    
      <category term="progressive-web-apps" scheme="http://www.westerndevs.com/tags/progressive-web-apps/"/>
    
  </entry>
  
  <entry>
    <title type="html">Is there still a place for the server-side web?</title>
    <link href="http://www.westerndevs.com/podcasts/Server-side-web/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/podcasts/Server-side-web/</id>
    <published>2017-09-10T15:34:08.000Z</published>
    <updated>2018-04-12T23:57:35.282Z</updated>
	<author>
		  
	  <name>Western Devs</name>
	  <email>info@westerndevs.com</email>	  
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<h3>Synopsis</h3><ul><li>Microsoft docs recommends using Razor pages by default for server-side rendering</li><li>Razor pages != Razor views in MVC (though they're close)</li><li>Making the case for ditching server-side rendering altogether</li><li>Pre-rendering pages with a lot of data</li><li>Targeting an appropriate level of interactivity</li><li>If it's simple, there's often a SaaS for it</li><li>Deciding between client-side and server-side</li><li>Content management systems/Wordpress</li><li>Internationalization</li><li>Bootstrapping</li></ul>]]></content>
    
    <summary type="html">
    
      In a leaner half-hour podcast, we discuss whether we should still be rendering web pages on the server
    
    </summary>
    
      <category term="podcasts" scheme="http://www.westerndevs.com/categories/podcasts/"/>
    
    
  </entry>
  
</feed>
